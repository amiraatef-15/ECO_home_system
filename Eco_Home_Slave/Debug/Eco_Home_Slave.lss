
Eco_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022c  00800060  00007cb6  00007d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  0080028c  0080028c  00007f76  2**0
                  ALLOC
  3 .stab         000059c4  00000000  00000000  00007f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019e3  00000000  00000000  0000d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f31f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000f4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  0000f6af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  00012395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  000136e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000149f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  00014bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  00014ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 aa 2c 	jmp	0x5954	; 0x5954 <__vector_4>
      14:	0c 94 77 2c 	jmp	0x58ee	; 0x58ee <__vector_5>
      18:	0c 94 44 2c 	jmp	0x5888	; 0x5888 <__vector_6>
      1c:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <__vector_7>
      20:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__vector_8>
      24:	0c 94 ab 2b 	jmp	0x5756	; 0x5756 <__vector_9>
      28:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__vector_10>
      2c:	0c 94 45 2b 	jmp	0x568a	; 0x568a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ad 2f 	jmp	0x5f5a	; 0x5f5a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 05 30 	jmp	0x600a	; 0x600a <__vector_15>
      40:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fc e7       	ldi	r31, 0x7C	; 124
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 30 	call	0x611e	; 0x611e <main>
      8a:	0c 94 59 3e 	jmp	0x7cb2	; 0x7cb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	80 5d       	subi	r24, 0xD0	; 208
     2e6:	9e 4f       	sbci	r25, 0xFE	; 254
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	80 5d       	subi	r24, 0xD0	; 208
     582:	9e 4f       	sbci	r25, 0xFE	; 254
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	80 5d       	subi	r24, 0xD0	; 208
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	80 5d       	subi	r24, 0xD0	; 208
    1000:	9e 4f       	sbci	r25, 0xFE	; 254
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	80 5d       	subi	r24, 0xD0	; 208
    1226:	9e 4f       	sbci	r25, 0xFE	; 254
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	80 5d       	subi	r24, 0xD0	; 208
    1608:	9e 4f       	sbci	r25, 0xFE	; 254
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	a8 e2       	ldi	r26, 0x28	; 40
    1bf0:	b1 e0       	ldi	r27, 0x01	; 1
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 4a 3e 	jmp	0x7c94	; 0x7c94 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 4a 3e 	jmp	0x7c94	; 0x7c94 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	88 e2       	ldi	r24, 0x28	; 40
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 4a 3e 	jmp	0x7c94	; 0x7c94 <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 4a 3e 	jmp	0x7c94	; 0x7c94 <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 4a 3e 	jmp	0x7c94	; 0x7c94 <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <ADC_vInit>:
static u8 ADC_u8State= IDLE ;

//=====================================================================================================================

void ADC_vInit(void)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	#if ADC_VREF == AREF
		CLR_BIT(ADMUX , ADMUX_REFS0) ;
		CLR_BIT(ADMUX , ADMUX_REFS1) ;

	#elif ADC_VREF == AVCC
		SET_BIT(ADMUX , ADMUX_REFS0) ;
    2616:	a7 e2       	ldi	r26, 0x27	; 39
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e7 e2       	ldi	r30, 0x27	; 39
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 64       	ori	r24, 0x40	; 64
    2622:	8c 93       	st	X, r24
		CLR_BIT(ADMUX , ADMUX_REFS1) ;
    2624:	a7 e2       	ldi	r26, 0x27	; 39
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e7 e2       	ldi	r30, 0x27	; 39
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	8f 77       	andi	r24, 0x7F	; 127
    2630:	8c 93       	st	X, r24
	#endif


	/*Set Left Adjust Result*/
	#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			CLR_BIT(ADMUX , ADMUX_ADLAR) ;
    2632:	a7 e2       	ldi	r26, 0x27	; 39
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e7 e2       	ldi	r30, 0x27	; 39
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8f 7d       	andi	r24, 0xDF	; 223
    263e:	8c 93       	st	X, r24
		#error "Wrong ADC_ADJUSTMENT config"

	#endif

	/*Set Prescaler Value*/
	ADSAR &= ADC_PRE_MASK ;
    2640:	a6 e2       	ldi	r26, 0x26	; 38
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e6 e2       	ldi	r30, 0x26	; 38
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	88 7f       	andi	r24, 0xF8	; 248
    264c:	8c 93       	st	X, r24
	ADSAR |= ADC_PRESCALLER ;
    264e:	a6 e2       	ldi	r26, 0x26	; 38
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e6 e2       	ldi	r30, 0x26	; 38
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	86 60       	ori	r24, 0x06	; 6
    265a:	8c 93       	st	X, r24

	/*Enable ADC Peripheral*/
	#if ADC_STATUS == ADC_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADEN) ;
	#elif ADC_STATUS == ADC_ENABLE
		SET_BIT(ADSAR , ADSAR_ADEN) ;
    265c:	a6 e2       	ldi	r26, 0x26	; 38
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e6 e2       	ldi	r30, 0x26	; 38
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	80 68       	ori	r24, 0x80	; 128
    2668:	8c 93       	st	X, r24
	#error "Wrong ADC_STATUS config"
	#endif

	/*Enable ADC Interrupt*/
	#if INT_STATUS == INT_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
    266a:	a6 e2       	ldi	r26, 0x26	; 38
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e6 e2       	ldi	r30, 0x26	; 38
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	87 7f       	andi	r24, 0xF7	; 247
    2676:	8c 93       	st	X, r24
		SET_BIT(ADSAR , ADSAR_ADIE) ;
	#else
	#error "Wrong INT_STATUS config"
	#endif

}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <ADC_vEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_vEnable (void)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADEN) ;
    2686:	a6 e2       	ldi	r26, 0x26	; 38
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e6 e2       	ldi	r30, 0x26	; 38
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	80 68       	ori	r24, 0x80	; 128
    2692:	8c 93       	st	X, r24
}
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <ADC_vDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_vDisable (void)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADEN) ;
    26a2:	a6 e2       	ldi	r26, 0x26	; 38
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e6 e2       	ldi	r30, 0x26	; 38
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	8c 93       	st	X, r24
}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <ADC_vInterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_vInterruptEnable (void)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADIE) ;
    26be:	a6 e2       	ldi	r26, 0x26	; 38
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e6 e2       	ldi	r30, 0x26	; 38
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	88 60       	ori	r24, 0x08	; 8
    26ca:	8c 93       	st	X, r24
}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <ADC_vInterruptDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_vInterruptDisable (void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADIE) ;
    26da:	a6 e2       	ldi	r26, 0x26	; 38
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e6 e2       	ldi	r30, 0x26	; 38
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	87 7f       	andi	r24, 0xF7	; 247
    26e6:	8c 93       	st	X, r24
}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <ADC_u8SetPrescaler>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8SetPrescaler (u8 Copy_u8Prescaler)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <ADC_u8SetPrescaler+0x6>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    26fa:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Prescaler < 8)
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	88 30       	cpi	r24, 0x08	; 8
    2700:	78 f4       	brcc	.+30     	; 0x2720 <ADC_u8SetPrescaler+0x32>
	{
		/*Set Prescaler Value*/
		ADSAR &= ADC_PRE_MASK ;
    2702:	a6 e2       	ldi	r26, 0x26	; 38
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e6 e2       	ldi	r30, 0x26	; 38
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	88 7f       	andi	r24, 0xF8	; 248
    270e:	8c 93       	st	X, r24
		ADSAR |= Copy_u8Prescaler ;
    2710:	a6 e2       	ldi	r26, 0x26	; 38
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e6 e2       	ldi	r30, 0x26	; 38
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	90 81       	ld	r25, Z
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	89 2b       	or	r24, r25
    271e:	8c 93       	st	X, r24
	}

	return Local_u8ErrorState ;
    2720:	89 81       	ldd	r24, Y+1	; 0x01
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <ADC_u8GetResultSync>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	29 97       	sbiw	r28, 0x09	; 9
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	8f 83       	std	Y+7, r24	; 0x07
    2742:	79 87       	std	Y+9, r23	; 0x09
    2744:	68 87       	std	Y+8, r22	; 0x08
	u16 Local_u16ErrorState = OK ;
    2746:	1e 82       	std	Y+6, r1	; 0x06
    2748:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	1a 82       	std	Y+2, r1	; 0x02
    274e:	1b 82       	std	Y+3, r1	; 0x03
    2750:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_pu16Result != NULL)
    2752:	88 85       	ldd	r24, Y+8	; 0x08
    2754:	99 85       	ldd	r25, Y+9	; 0x09
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	09 f4       	brne	.+2      	; 0x275c <ADC_u8GetResultSync+0x30>
    275a:	79 c0       	rjmp	.+242    	; 0x284e <ADC_u8GetResultSync+0x122>
	{
		if (ADC_u8State == IDLE)
    275c:	80 91 90 02 	lds	r24, 0x0290
    2760:	88 23       	and	r24, r24
    2762:	09 f0       	breq	.+2      	; 0x2766 <ADC_u8GetResultSync+0x3a>
    2764:	6f c0       	rjmp	.+222    	; 0x2844 <ADC_u8GetResultSync+0x118>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 90 02 	sts	0x0290, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
    276c:	a7 e2       	ldi	r26, 0x27	; 39
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e7 e2       	ldi	r30, 0x27	; 39
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	80 7e       	andi	r24, 0xE0	; 224
    2778:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
    277a:	a7 e2       	ldi	r26, 0x27	; 39
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e7 e2       	ldi	r30, 0x27	; 39
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	90 81       	ld	r25, Z
    2784:	8f 81       	ldd	r24, Y+7	; 0x07
    2786:	89 2b       	or	r24, r25
    2788:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
    278a:	a6 e2       	ldi	r26, 0x26	; 38
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e6 e2       	ldi	r30, 0x26	; 38
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 64       	ori	r24, 0x40	; 64
    2796:	8c 93       	st	X, r24
    2798:	0b c0       	rjmp	.+22     	; 0x27b0 <ADC_u8GetResultSync+0x84>

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	ab 81       	ldd	r26, Y+3	; 0x03
    27a0:	bc 81       	ldd	r27, Y+4	; 0x04
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	a1 1d       	adc	r26, r1
    27a6:	b1 1d       	adc	r27, r1
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	ab 83       	std	Y+3, r26	; 0x03
    27ae:	bc 83       	std	Y+4, r27	; 0x04

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
    27b0:	e6 e2       	ldi	r30, 0x26	; 38
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	80 71       	andi	r24, 0x10	; 16
    27bc:	90 70       	andi	r25, 0x00	; 0
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	95 95       	asr	r25
    27c4:	87 95       	ror	r24
    27c6:	95 95       	asr	r25
    27c8:	87 95       	ror	r24
    27ca:	95 95       	asr	r25
    27cc:	87 95       	ror	r24
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	61 f4       	brne	.+24     	; 0x27ea <ADC_u8GetResultSync+0xbe>
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	ab 81       	ldd	r26, Y+3	; 0x03
    27d8:	bc 81       	ldd	r27, Y+4	; 0x04
    27da:	80 35       	cpi	r24, 0x50	; 80
    27dc:	23 ec       	ldi	r18, 0xC3	; 195
    27de:	92 07       	cpc	r25, r18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	a2 07       	cpc	r26, r18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	b2 07       	cpc	r27, r18
    27e8:	c0 f2       	brcs	.-80     	; 0x279a <ADC_u8GetResultSync+0x6e>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == ADC_TIMEOUT)
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	ab 81       	ldd	r26, Y+3	; 0x03
    27f0:	bc 81       	ldd	r27, Y+4	; 0x04
    27f2:	80 35       	cpi	r24, 0x50	; 80
    27f4:	23 ec       	ldi	r18, 0xC3	; 195
    27f6:	92 07       	cpc	r25, r18
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	a2 07       	cpc	r26, r18
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	b2 07       	cpc	r27, r18
    2800:	29 f4       	brne	.+10     	; 0x280c <ADC_u8GetResultSync+0xe0>
			{
				Local_u16ErrorState = TIMEOUT_STATE ;
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	19 c0       	rjmp	.+50     	; 0x283e <ADC_u8GetResultSync+0x112>
			}
			else
			{
				/*Clear the interrupt flag*/
				SET_BIT(ADSAR , ADSAR_ADIF) ;
    280c:	a6 e2       	ldi	r26, 0x26	; 38
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e6 e2       	ldi	r30, 0x26	; 38
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	80 61       	ori	r24, 0x10	; 16
    2818:	8c 93       	st	X, r24

				/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					*Copy_pu16Result = (ADCL|(ADCH << 8))  ;
    281a:	e4 e2       	ldi	r30, 0x24	; 36
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	e5 e2       	ldi	r30, 0x25	; 37
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	98 2f       	mov	r25, r24
    2830:	88 27       	eor	r24, r24
    2832:	82 2b       	or	r24, r18
    2834:	93 2b       	or	r25, r19
    2836:	e8 85       	ldd	r30, Y+8	; 0x08
    2838:	f9 85       	ldd	r31, Y+9	; 0x09
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24

				#endif
			}

			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
    283e:	10 92 90 02 	sts	0x0290, r1
    2842:	09 c0       	rjmp	.+18     	; 0x2856 <ADC_u8GetResultSync+0x12a>
		}
		else
		{
			Local_u16ErrorState = BUSY_STATE ;
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <ADC_u8GetResultSync+0x12a>


	}
	else
	{
		Local_u16ErrorState = NULL_POINTER ;
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u16ErrorState ;
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
}
    285a:	29 96       	adiw	r28, 0x09	; 9
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <ADC_u8StartConversionAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartConversionAsynch (u8 Copy_u8Channel , u16 * Copy_pu16Result , void (*Copy_pvNotificationFunc)(void)) // with interrupt
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <ADC_u8StartConversionAsynch+0x6>
    2872:	00 d0       	rcall	.+0      	; 0x2874 <ADC_u8StartConversionAsynch+0x8>
    2874:	00 d0       	rcall	.+0      	; 0x2876 <ADC_u8StartConversionAsynch+0xa>
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	7c 83       	std	Y+4, r23	; 0x04
    287e:	6b 83       	std	Y+3, r22	; 0x03
    2880:	5e 83       	std	Y+6, r21	; 0x06
    2882:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK ;
    2884:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	d1 f1       	breq	.+116    	; 0x2902 <ADC_u8StartConversionAsynch+0x96>
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	b1 f1       	breq	.+108    	; 0x2902 <ADC_u8StartConversionAsynch+0x96>
	{
		if (ADC_u8State == IDLE)
    2896:	80 91 90 02 	lds	r24, 0x0290
    289a:	88 23       	and	r24, r24
    289c:	79 f5       	brne	.+94     	; 0x28fc <ADC_u8StartConversionAsynch+0x90>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	80 93 90 02 	sts	0x0290, r24

			/*Set ISR State*/
			ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH ;
    28a4:	10 92 91 02 	sts	0x0291, r1

			/*Initialize the global result pointer*/
			ADC_pu16AsynchConversionResult = Copy_pu16Result;
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	90 93 8d 02 	sts	0x028D, r25
    28b0:	80 93 8c 02 	sts	0x028C, r24

			/*Initialize the global notification function pointer*/
			ADC_pvNotificationFunc= Copy_pvNotificationFunc;
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	90 93 8f 02 	sts	0x028F, r25
    28bc:	80 93 8e 02 	sts	0x028E, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
    28c0:	a7 e2       	ldi	r26, 0x27	; 39
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e7 e2       	ldi	r30, 0x27	; 39
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	80 7e       	andi	r24, 0xE0	; 224
    28cc:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
    28ce:	a7 e2       	ldi	r26, 0x27	; 39
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e7 e2       	ldi	r30, 0x27	; 39
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	90 81       	ld	r25, Z
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	89 2b       	or	r24, r25
    28dc:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
    28de:	a6 e2       	ldi	r26, 0x26	; 38
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e6 e2       	ldi	r30, 0x26	; 38
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
    28ec:	a6 e2       	ldi	r26, 0x26	; 38
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e6 e2       	ldi	r30, 0x26	; 38
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	88 60       	ori	r24, 0x08	; 8
    28f8:	8c 93       	st	X, r24
    28fa:	05 c0       	rjmp	.+10     	; 0x2906 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    2906:	89 81       	ldd	r24, Y+1	; 0x01
}
    2908:	26 96       	adiw	r28, 0x06	; 6
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <ADC_u8StartChainAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartChainAsynch (Chain_t * Copy_Chain)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <ADC_u8StartChainAsynch+0x6>
    2920:	0f 92       	push	r0
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	9b 83       	std	Y+3, r25	; 0x03
    2928:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    292a:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result))
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	09 f4       	brne	.+2      	; 0x2936 <ADC_u8StartChainAsynch+0x1c>
    2934:	6b c0       	rjmp	.+214    	; 0x2a0c <ADC_u8StartChainAsynch+0xf2>
    2936:	ea 81       	ldd	r30, Y+2	; 0x02
    2938:	fb 81       	ldd	r31, Y+3	; 0x03
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	09 f4       	brne	.+2      	; 0x2944 <ADC_u8StartChainAsynch+0x2a>
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <ADC_u8StartChainAsynch+0xf2>
    2944:	ea 81       	ldd	r30, Y+2	; 0x02
    2946:	fb 81       	ldd	r31, Y+3	; 0x03
    2948:	85 81       	ldd	r24, Z+5	; 0x05
    294a:	96 81       	ldd	r25, Z+6	; 0x06
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	09 f4       	brne	.+2      	; 0x2952 <ADC_u8StartChainAsynch+0x38>
    2950:	5d c0       	rjmp	.+186    	; 0x2a0c <ADC_u8StartChainAsynch+0xf2>
    2952:	ea 81       	ldd	r30, Y+2	; 0x02
    2954:	fb 81       	ldd	r31, Y+3	; 0x03
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	09 f4       	brne	.+2      	; 0x2960 <ADC_u8StartChainAsynch+0x46>
    295e:	56 c0       	rjmp	.+172    	; 0x2a0c <ADC_u8StartChainAsynch+0xf2>
	{
		if (ADC_u8State == IDLE)
    2960:	80 91 90 02 	lds	r24, 0x0290
    2964:	88 23       	and	r24, r24
    2966:	09 f0       	breq	.+2      	; 0x296a <ADC_u8StartChainAsynch+0x50>
    2968:	4e c0       	rjmp	.+156    	; 0x2a06 <ADC_u8StartChainAsynch+0xec>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	80 93 90 02 	sts	0x0290, r24

			/*Set ISR State*/
			ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH ;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	80 93 91 02 	sts	0x0291, r24

			/*Assign the ADC data globally*/
			ADC_pu16AsynchConversionResult = Copy_Chain->Result ;
    2976:	ea 81       	ldd	r30, Y+2	; 0x02
    2978:	fb 81       	ldd	r31, Y+3	; 0x03
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	90 93 8d 02 	sts	0x028D, r25
    2982:	80 93 8c 02 	sts	0x028C, r24
			ADC_pu8ChainChannel = Copy_Chain->Channel ;
    2986:	ea 81       	ldd	r30, Y+2	; 0x02
    2988:	fb 81       	ldd	r31, Y+3	; 0x03
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	90 93 93 02 	sts	0x0293, r25
    2992:	80 93 92 02 	sts	0x0292, r24
			ADC_u8ChainSize = Copy_Chain->Size ;
    2996:	ea 81       	ldd	r30, Y+2	; 0x02
    2998:	fb 81       	ldd	r31, Y+3	; 0x03
    299a:	84 81       	ldd	r24, Z+4	; 0x04
    299c:	80 93 94 02 	sts	0x0294, r24
			ADC_pvNotificationFunc = Copy_Chain->NotificationFunc ;
    29a0:	ea 81       	ldd	r30, Y+2	; 0x02
    29a2:	fb 81       	ldd	r31, Y+3	; 0x03
    29a4:	85 81       	ldd	r24, Z+5	; 0x05
    29a6:	96 81       	ldd	r25, Z+6	; 0x06
    29a8:	90 93 8f 02 	sts	0x028F, r25
    29ac:	80 93 8e 02 	sts	0x028E, r24

			/*Set Index to first element*/
			ADC_u8Index = 0 ;
    29b0:	10 92 95 02 	sts	0x0295, r1

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
    29b4:	a7 e2       	ldi	r26, 0x27	; 39
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e7 e2       	ldi	r30, 0x27	; 39
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	80 7e       	andi	r24, 0xE0	; 224
    29c0:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
    29c2:	a7 e2       	ldi	r26, 0x27	; 39
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 e2       	ldi	r30, 0x27	; 39
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	40 81       	ld	r20, Z
    29cc:	20 91 92 02 	lds	r18, 0x0292
    29d0:	30 91 93 02 	lds	r19, 0x0293
    29d4:	80 91 95 02 	lds	r24, 0x0295
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	f9 01       	movw	r30, r18
    29de:	e8 0f       	add	r30, r24
    29e0:	f9 1f       	adc	r31, r25
    29e2:	80 81       	ld	r24, Z
    29e4:	84 2b       	or	r24, r20
    29e6:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
    29e8:	a6 e2       	ldi	r26, 0x26	; 38
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e6 e2       	ldi	r30, 0x26	; 38
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	80 64       	ori	r24, 0x40	; 64
    29f4:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
    29f6:	a6 e2       	ldi	r26, 0x26	; 38
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e6 e2       	ldi	r30, 0x26	; 38
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	88 60       	ori	r24, 0x08	; 8
    2a02:	8c 93       	st	X, r24
    2a04:	05 c0       	rjmp	.+10     	; 0x2a10 <ADC_u8StartChainAsynch+0xf6>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <ADC_u8StartChainAsynch+0xf6>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void)
{
    2a1e:	1f 92       	push	r1
    2a20:	0f 92       	push	r0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	0f 92       	push	r0
    2a26:	11 24       	eor	r1, r1
    2a28:	2f 93       	push	r18
    2a2a:	3f 93       	push	r19
    2a2c:	4f 93       	push	r20
    2a2e:	5f 93       	push	r21
    2a30:	6f 93       	push	r22
    2a32:	7f 93       	push	r23
    2a34:	8f 93       	push	r24
    2a36:	9f 93       	push	r25
    2a38:	af 93       	push	r26
    2a3a:	bf 93       	push	r27
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    2a48:	80 91 91 02 	lds	r24, 0x0291
    2a4c:	88 23       	and	r24, r24
    2a4e:	19 f5       	brne	.+70     	; 0x2a96 <__vector_16+0x78>
	{
		/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					* ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
    2a50:	a0 91 8c 02 	lds	r26, 0x028C
    2a54:	b0 91 8d 02 	lds	r27, 0x028D
    2a58:	e4 e2       	ldi	r30, 0x24	; 36
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	e5 e2       	ldi	r30, 0x25	; 37
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	88 27       	eor	r24, r24
    2a70:	82 2b       	or	r24, r18
    2a72:	93 2b       	or	r25, r19
    2a74:	8d 93       	st	X+, r24
    2a76:	9c 93       	st	X, r25
					#error "Wrong ADC_ADJUSTMENT config"

				#endif

		/*ADC is IDLE*/
		ADC_u8State = IDLE ;
    2a78:	10 92 90 02 	sts	0x0290, r1

		/*Call Notification Function*/
		ADC_pvNotificationFunc() ;
    2a7c:	e0 91 8e 02 	lds	r30, 0x028E
    2a80:	f0 91 8f 02 	lds	r31, 0x028F
    2a84:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
    2a86:	a6 e2       	ldi	r26, 0x26	; 38
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e6 e2       	ldi	r30, 0x26	; 38
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	87 7f       	andi	r24, 0xF7	; 247
    2a92:	8c 93       	st	X, r24
    2a94:	50 c0       	rjmp	.+160    	; 0x2b36 <__vector_16+0x118>
	}
	else
	{
		/*Return Conversion Result*/
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			*ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
    2a96:	a0 91 8c 02 	lds	r26, 0x028C
    2a9a:	b0 91 8d 02 	lds	r27, 0x028D
    2a9e:	e4 e2       	ldi	r30, 0x24	; 36
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	e5 e2       	ldi	r30, 0x25	; 37
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	98 2f       	mov	r25, r24
    2ab4:	88 27       	eor	r24, r24
    2ab6:	82 2b       	or	r24, r18
    2ab8:	93 2b       	or	r25, r19
    2aba:	11 96       	adiw	r26, 0x01	; 1
    2abc:	9c 93       	st	X, r25
    2abe:	8e 93       	st	-X, r24
			#error "Wrong ADC_ADJUSTMENT config"

		#endif

		/*Increment Data index of the chain*/
		ADC_u8Index++ ;
    2ac0:	80 91 95 02 	lds	r24, 0x0295
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	80 93 95 02 	sts	0x0295, r24

		if (ADC_u8Index == ADC_u8ChainSize)
    2aca:	90 91 95 02 	lds	r25, 0x0295
    2ace:	80 91 94 02 	lds	r24, 0x0294
    2ad2:	98 17       	cp	r25, r24
    2ad4:	79 f4       	brne	.+30     	; 0x2af4 <__vector_16+0xd6>
		{
			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
    2ad6:	10 92 90 02 	sts	0x0290, r1

			/*Call Notification Function*/
			ADC_pvNotificationFunc() ;
    2ada:	e0 91 8e 02 	lds	r30, 0x028E
    2ade:	f0 91 8f 02 	lds	r31, 0x028F
    2ae2:	09 95       	icall

			/*Disable the Conversion Complete Interrupt*/
			CLR_BIT(ADSAR , ADSAR_ADIE) ;
    2ae4:	a6 e2       	ldi	r26, 0x26	; 38
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e6 e2       	ldi	r30, 0x26	; 38
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	87 7f       	andi	r24, 0xF7	; 247
    2af0:	8c 93       	st	X, r24
    2af2:	21 c0       	rjmp	.+66     	; 0x2b36 <__vector_16+0x118>
		}
		else
		{
			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
    2af4:	a7 e2       	ldi	r26, 0x27	; 39
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e7 e2       	ldi	r30, 0x27	; 39
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	80 7e       	andi	r24, 0xE0	; 224
    2b00:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
    2b02:	a7 e2       	ldi	r26, 0x27	; 39
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e7 e2       	ldi	r30, 0x27	; 39
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	40 81       	ld	r20, Z
    2b0c:	20 91 92 02 	lds	r18, 0x0292
    2b10:	30 91 93 02 	lds	r19, 0x0293
    2b14:	80 91 95 02 	lds	r24, 0x0295
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	f9 01       	movw	r30, r18
    2b1e:	e8 0f       	add	r30, r24
    2b20:	f9 1f       	adc	r31, r25
    2b22:	80 81       	ld	r24, Z
    2b24:	84 2b       	or	r24, r20
    2b26:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
    2b28:	a6 e2       	ldi	r26, 0x26	; 38
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e6 e2       	ldi	r30, 0x26	; 38
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 64       	ori	r24, 0x40	; 64
    2b34:	8c 93       	st	X, r24
		}
	}
}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	ff 91       	pop	r31
    2b3c:	ef 91       	pop	r30
    2b3e:	bf 91       	pop	r27
    2b40:	af 91       	pop	r26
    2b42:	9f 91       	pop	r25
    2b44:	8f 91       	pop	r24
    2b46:	7f 91       	pop	r23
    2b48:	6f 91       	pop	r22
    2b4a:	5f 91       	pop	r21
    2b4c:	4f 91       	pop	r20
    2b4e:	3f 91       	pop	r19
    2b50:	2f 91       	pop	r18
    2b52:	0f 90       	pop	r0
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	0f 90       	pop	r0
    2b58:	1f 90       	pop	r1
    2b5a:	18 95       	reti

00002b5c <DIO_vSetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"

/*>>>>>>>>>>>>>>>>>>>>>>>>> "PINS" <<<<<<<<<<<<<<<<<<<<<<<<<<*/
void DIO_vSetPinDirection (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_Direction)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	27 97       	sbiw	r28, 0x07	; 7
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	6a 83       	std	Y+2, r22	; 0x02
    2b74:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_Direction == DIO_PIN_OUTPUT)
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <DIO_vSetPinDirection+0x22>
    2b7c:	6f c0       	rjmp	.+222    	; 0x2c5c <DIO_vSetPinDirection+0x100>
	{
		switch (Copy_u8PORT)
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	3f 83       	std	Y+7, r19	; 0x07
    2b86:	2e 83       	std	Y+6, r18	; 0x06
    2b88:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	91 05       	cpc	r25, r1
    2b90:	49 f1       	breq	.+82     	; 0x2be4 <DIO_vSetPinDirection+0x88>
    2b92:	2e 81       	ldd	r18, Y+6	; 0x06
    2b94:	3f 81       	ldd	r19, Y+7	; 0x07
    2b96:	22 30       	cpi	r18, 0x02	; 2
    2b98:	31 05       	cpc	r19, r1
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <DIO_vSetPinDirection+0x4a>
    2b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <DIO_vSetPinDirection+0x60>
    2ba4:	d2 c0       	rjmp	.+420    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
    2ba6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ba8:	3f 81       	ldd	r19, Y+7	; 0x07
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	71 f1       	breq	.+92     	; 0x2c0c <DIO_vSetPinDirection+0xb0>
    2bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	e9 f1       	breq	.+122    	; 0x2c34 <DIO_vSetPinDirection+0xd8>
    2bba:	c7 c0       	rjmp	.+398    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		{
		case DIO_PORTA : SET_BIT(DDRA,Copy_u8PIN);break;
    2bbc:	aa e3       	ldi	r26, 0x3A	; 58
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ea e3       	ldi	r30, 0x3A	; 58
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	48 2f       	mov	r20, r24
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	02 2e       	mov	r0, r18
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_vSetPinDirection+0x7e>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	0a 94       	dec	r0
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <DIO_vSetPinDirection+0x7a>
    2bde:	84 2b       	or	r24, r20
    2be0:	8c 93       	st	X, r24
    2be2:	b3 c0       	rjmp	.+358    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTB : SET_BIT(DDRB,Copy_u8PIN);break;
    2be4:	a7 e3       	ldi	r26, 0x37	; 55
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e7 e3       	ldi	r30, 0x37	; 55
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	48 2f       	mov	r20, r24
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	02 2e       	mov	r0, r18
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <DIO_vSetPinDirection+0xa6>
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	0a 94       	dec	r0
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <DIO_vSetPinDirection+0xa2>
    2c06:	84 2b       	or	r24, r20
    2c08:	8c 93       	st	X, r24
    2c0a:	9f c0       	rjmp	.+318    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTC : SET_BIT(DDRC,Copy_u8PIN);break;
    2c0c:	a4 e3       	ldi	r26, 0x34	; 52
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e4 e3       	ldi	r30, 0x34	; 52
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	48 2f       	mov	r20, r24
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	02 2e       	mov	r0, r18
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <DIO_vSetPinDirection+0xce>
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	0a 94       	dec	r0
    2c2c:	e2 f7       	brpl	.-8      	; 0x2c26 <DIO_vSetPinDirection+0xca>
    2c2e:	84 2b       	or	r24, r20
    2c30:	8c 93       	st	X, r24
    2c32:	8b c0       	rjmp	.+278    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTD : SET_BIT(DDRD,Copy_u8PIN);break;
    2c34:	a1 e3       	ldi	r26, 0x31	; 49
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e1 e3       	ldi	r30, 0x31	; 49
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	48 2f       	mov	r20, r24
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	02 2e       	mov	r0, r18
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <DIO_vSetPinDirection+0xf6>
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	0a 94       	dec	r0
    2c54:	e2 f7       	brpl	.-8      	; 0x2c4e <DIO_vSetPinDirection+0xf2>
    2c56:	84 2b       	or	r24, r20
    2c58:	8c 93       	st	X, r24
    2c5a:	77 c0       	rjmp	.+238    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		}
	}
	else if (Copy_Direction == DIO_PIN_INPUT)
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <DIO_vSetPinDirection+0x108>
    2c62:	73 c0       	rjmp	.+230    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
	{
		switch (Copy_u8PORT)
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	3d 83       	std	Y+5, r19	; 0x05
    2c6c:	2c 83       	std	Y+4, r18	; 0x04
    2c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c70:	9d 81       	ldd	r25, Y+5	; 0x05
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	59 f1       	breq	.+86     	; 0x2cce <DIO_vSetPinDirection+0x172>
    2c78:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c7c:	22 30       	cpi	r18, 0x02	; 2
    2c7e:	31 05       	cpc	r19, r1
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <DIO_vSetPinDirection+0x130>
    2c82:	8c 81       	ldd	r24, Y+4	; 0x04
    2c84:	9d 81       	ldd	r25, Y+5	; 0x05
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	69 f0       	breq	.+26     	; 0x2ca4 <DIO_vSetPinDirection+0x148>
    2c8a:	5f c0       	rjmp	.+190    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
    2c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c90:	22 30       	cpi	r18, 0x02	; 2
    2c92:	31 05       	cpc	r19, r1
    2c94:	89 f1       	breq	.+98     	; 0x2cf8 <DIO_vSetPinDirection+0x19c>
    2c96:	8c 81       	ldd	r24, Y+4	; 0x04
    2c98:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9a:	83 30       	cpi	r24, 0x03	; 3
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <DIO_vSetPinDirection+0x146>
    2ca0:	40 c0       	rjmp	.+128    	; 0x2d22 <DIO_vSetPinDirection+0x1c6>
    2ca2:	53 c0       	rjmp	.+166    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		{
		case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PIN);break;
    2ca4:	aa e3       	ldi	r26, 0x3A	; 58
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	ea e3       	ldi	r30, 0x3A	; 58
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	48 2f       	mov	r20, r24
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 2e       	mov	r0, r18
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <DIO_vSetPinDirection+0x166>
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	0a 94       	dec	r0
    2cc4:	e2 f7       	brpl	.-8      	; 0x2cbe <DIO_vSetPinDirection+0x162>
    2cc6:	80 95       	com	r24
    2cc8:	84 23       	and	r24, r20
    2cca:	8c 93       	st	X, r24
    2ccc:	3e c0       	rjmp	.+124    	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PIN);break;
    2cce:	a7 e3       	ldi	r26, 0x37	; 55
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e7 e3       	ldi	r30, 0x37	; 55
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	48 2f       	mov	r20, r24
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	02 2e       	mov	r0, r18
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <DIO_vSetPinDirection+0x190>
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	0a 94       	dec	r0
    2cee:	e2 f7       	brpl	.-8      	; 0x2ce8 <DIO_vSetPinDirection+0x18c>
    2cf0:	80 95       	com	r24
    2cf2:	84 23       	and	r24, r20
    2cf4:	8c 93       	st	X, r24
    2cf6:	29 c0       	rjmp	.+82     	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PIN);break;
    2cf8:	a4 e3       	ldi	r26, 0x34	; 52
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e4 e3       	ldi	r30, 0x34	; 52
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	48 2f       	mov	r20, r24
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	02 2e       	mov	r0, r18
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <DIO_vSetPinDirection+0x1ba>
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	0a 94       	dec	r0
    2d18:	e2 f7       	brpl	.-8      	; 0x2d12 <DIO_vSetPinDirection+0x1b6>
    2d1a:	80 95       	com	r24
    2d1c:	84 23       	and	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <DIO_vSetPinDirection+0x1ee>
		case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PIN);break;
    2d22:	a1 e3       	ldi	r26, 0x31	; 49
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e1 e3       	ldi	r30, 0x31	; 49
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 2e       	mov	r0, r18
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_vSetPinDirection+0x1e4>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DIO_vSetPinDirection+0x1e0>
    2d44:	80 95       	com	r24
    2d46:	84 23       	and	r24, r20
    2d48:	8c 93       	st	X, r24
		}
	}	
}
    2d4a:	27 96       	adiw	r28, 0x07	; 7
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <DIO_vSetPinValue>:

void DIO_vSetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	27 97       	sbiw	r28, 0x07	; 7
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	6a 83       	std	Y+2, r22	; 0x02
    2d74:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_PIN_HIGH)
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <DIO_vSetPinValue+0x22>
    2d7c:	6f c0       	rjmp	.+222    	; 0x2e5c <DIO_vSetPinValue+0x100>
	{
		switch (Copy_u8PORT)
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	3f 83       	std	Y+7, r19	; 0x07
    2d86:	2e 83       	std	Y+6, r18	; 0x06
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	91 05       	cpc	r25, r1
    2d90:	49 f1       	breq	.+82     	; 0x2de4 <DIO_vSetPinValue+0x88>
    2d92:	2e 81       	ldd	r18, Y+6	; 0x06
    2d94:	3f 81       	ldd	r19, Y+7	; 0x07
    2d96:	22 30       	cpi	r18, 0x02	; 2
    2d98:	31 05       	cpc	r19, r1
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <DIO_vSetPinValue+0x4a>
    2d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	61 f0       	breq	.+24     	; 0x2dbc <DIO_vSetPinValue+0x60>
    2da4:	d2 c0       	rjmp	.+420    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
    2da6:	2e 81       	ldd	r18, Y+6	; 0x06
    2da8:	3f 81       	ldd	r19, Y+7	; 0x07
    2daa:	22 30       	cpi	r18, 0x02	; 2
    2dac:	31 05       	cpc	r19, r1
    2dae:	71 f1       	breq	.+92     	; 0x2e0c <DIO_vSetPinValue+0xb0>
    2db0:	8e 81       	ldd	r24, Y+6	; 0x06
    2db2:	9f 81       	ldd	r25, Y+7	; 0x07
    2db4:	83 30       	cpi	r24, 0x03	; 3
    2db6:	91 05       	cpc	r25, r1
    2db8:	e9 f1       	breq	.+122    	; 0x2e34 <DIO_vSetPinValue+0xd8>
    2dba:	c7 c0       	rjmp	.+398    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		{
		case DIO_PORTA : SET_BIT(PORTA,Copy_u8PIN);break;
    2dbc:	ab e3       	ldi	r26, 0x3B	; 59
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	eb e3       	ldi	r30, 0x3B	; 59
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <DIO_vSetPinValue+0x7e>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <DIO_vSetPinValue+0x7a>
    2dde:	84 2b       	or	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	b3 c0       	rjmp	.+358    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTB : SET_BIT(PORTB,Copy_u8PIN);break;
    2de4:	a8 e3       	ldi	r26, 0x38	; 56
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e8 e3       	ldi	r30, 0x38	; 56
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	48 2f       	mov	r20, r24
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	02 2e       	mov	r0, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_vSetPinValue+0xa6>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	0a 94       	dec	r0
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_vSetPinValue+0xa2>
    2e06:	84 2b       	or	r24, r20
    2e08:	8c 93       	st	X, r24
    2e0a:	9f c0       	rjmp	.+318    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTC : SET_BIT(PORTC,Copy_u8PIN);break;
    2e0c:	a5 e3       	ldi	r26, 0x35	; 53
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e5 e3       	ldi	r30, 0x35	; 53
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	48 2f       	mov	r20, r24
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 2e       	mov	r0, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <DIO_vSetPinValue+0xce>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <DIO_vSetPinValue+0xca>
    2e2e:	84 2b       	or	r24, r20
    2e30:	8c 93       	st	X, r24
    2e32:	8b c0       	rjmp	.+278    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTD : SET_BIT(PORTD,Copy_u8PIN);break;
    2e34:	a2 e3       	ldi	r26, 0x32	; 50
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e2 e3       	ldi	r30, 0x32	; 50
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	48 2f       	mov	r20, r24
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	02 2e       	mov	r0, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_vSetPinValue+0xf6>
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	0a 94       	dec	r0
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_vSetPinValue+0xf2>
    2e56:	84 2b       	or	r24, r20
    2e58:	8c 93       	st	X, r24
    2e5a:	77 c0       	rjmp	.+238    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_PIN_LOW)
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	88 23       	and	r24, r24
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <DIO_vSetPinValue+0x108>
    2e62:	73 c0       	rjmp	.+230    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
	{
		switch (Copy_u8PORT)
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	3d 83       	std	Y+5, r19	; 0x05
    2e6c:	2c 83       	std	Y+4, r18	; 0x04
    2e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e70:	9d 81       	ldd	r25, Y+5	; 0x05
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	91 05       	cpc	r25, r1
    2e76:	59 f1       	breq	.+86     	; 0x2ece <DIO_vSetPinValue+0x172>
    2e78:	2c 81       	ldd	r18, Y+4	; 0x04
    2e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e7c:	22 30       	cpi	r18, 0x02	; 2
    2e7e:	31 05       	cpc	r19, r1
    2e80:	2c f4       	brge	.+10     	; 0x2e8c <DIO_vSetPinValue+0x130>
    2e82:	8c 81       	ldd	r24, Y+4	; 0x04
    2e84:	9d 81       	ldd	r25, Y+5	; 0x05
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f0       	breq	.+26     	; 0x2ea4 <DIO_vSetPinValue+0x148>
    2e8a:	5f c0       	rjmp	.+190    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
    2e8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e90:	22 30       	cpi	r18, 0x02	; 2
    2e92:	31 05       	cpc	r19, r1
    2e94:	89 f1       	breq	.+98     	; 0x2ef8 <DIO_vSetPinValue+0x19c>
    2e96:	8c 81       	ldd	r24, Y+4	; 0x04
    2e98:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9a:	83 30       	cpi	r24, 0x03	; 3
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <DIO_vSetPinValue+0x146>
    2ea0:	40 c0       	rjmp	.+128    	; 0x2f22 <DIO_vSetPinValue+0x1c6>
    2ea2:	53 c0       	rjmp	.+166    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		{
		case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PIN);break;
    2ea4:	ab e3       	ldi	r26, 0x3B	; 59
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	eb e3       	ldi	r30, 0x3B	; 59
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	48 2f       	mov	r20, r24
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	02 2e       	mov	r0, r18
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <DIO_vSetPinValue+0x166>
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	0a 94       	dec	r0
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <DIO_vSetPinValue+0x162>
    2ec6:	80 95       	com	r24
    2ec8:	84 23       	and	r24, r20
    2eca:	8c 93       	st	X, r24
    2ecc:	3e c0       	rjmp	.+124    	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PIN);break;
    2ece:	a8 e3       	ldi	r26, 0x38	; 56
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e8 e3       	ldi	r30, 0x38	; 56
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	48 2f       	mov	r20, r24
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	02 2e       	mov	r0, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <DIO_vSetPinValue+0x190>
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	0a 94       	dec	r0
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <DIO_vSetPinValue+0x18c>
    2ef0:	80 95       	com	r24
    2ef2:	84 23       	and	r24, r20
    2ef4:	8c 93       	st	X, r24
    2ef6:	29 c0       	rjmp	.+82     	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PIN);break;
    2ef8:	a5 e3       	ldi	r26, 0x35	; 53
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e5 e3       	ldi	r30, 0x35	; 53
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	48 2f       	mov	r20, r24
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 2e       	mov	r0, r18
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <DIO_vSetPinValue+0x1ba>
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	0a 94       	dec	r0
    2f18:	e2 f7       	brpl	.-8      	; 0x2f12 <DIO_vSetPinValue+0x1b6>
    2f1a:	80 95       	com	r24
    2f1c:	84 23       	and	r24, r20
    2f1e:	8c 93       	st	X, r24
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <DIO_vSetPinValue+0x1ee>
		case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PIN);break;
    2f22:	a2 e3       	ldi	r26, 0x32	; 50
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e2 e3       	ldi	r30, 0x32	; 50
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	48 2f       	mov	r20, r24
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <DIO_vSetPinValue+0x1e4>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <DIO_vSetPinValue+0x1e0>
    2f44:	80 95       	com	r24
    2f46:	84 23       	and	r24, r20
    2f48:	8c 93       	st	X, r24
		}
	}	
}
    2f4a:	27 96       	adiw	r28, 0x07	; 7
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <DIO_vTOGPinValue>:

void DIO_vTOGPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN )
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <DIO_vTOGPinValue+0x6>
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <DIO_vTOGPinValue+0x8>
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	3c 83       	std	Y+4, r19	; 0x04
    2f74:	2b 83       	std	Y+3, r18	; 0x03
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	49 f1       	breq	.+82     	; 0x2fd2 <DIO_vTOGPinValue+0x76>
    2f80:	2b 81       	ldd	r18, Y+3	; 0x03
    2f82:	3c 81       	ldd	r19, Y+4	; 0x04
    2f84:	22 30       	cpi	r18, 0x02	; 2
    2f86:	31 05       	cpc	r19, r1
    2f88:	2c f4       	brge	.+10     	; 0x2f94 <DIO_vTOGPinValue+0x38>
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	61 f0       	breq	.+24     	; 0x2faa <DIO_vTOGPinValue+0x4e>
    2f92:	5a c0       	rjmp	.+180    	; 0x3048 <DIO_vTOGPinValue+0xec>
    2f94:	2b 81       	ldd	r18, Y+3	; 0x03
    2f96:	3c 81       	ldd	r19, Y+4	; 0x04
    2f98:	22 30       	cpi	r18, 0x02	; 2
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	71 f1       	breq	.+92     	; 0x2ffa <DIO_vTOGPinValue+0x9e>
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	e9 f1       	breq	.+122    	; 0x3022 <DIO_vTOGPinValue+0xc6>
    2fa8:	4f c0       	rjmp	.+158    	; 0x3048 <DIO_vTOGPinValue+0xec>
		{
		case DIO_PORTA : TOG_BIT(PORTA,Copy_u8PIN);break;
    2faa:	ab e3       	ldi	r26, 0x3B	; 59
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	eb e3       	ldi	r30, 0x3B	; 59
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	48 2f       	mov	r20, r24
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 2e       	mov	r0, r18
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <DIO_vTOGPinValue+0x6c>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	0a 94       	dec	r0
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <DIO_vTOGPinValue+0x68>
    2fcc:	84 27       	eor	r24, r20
    2fce:	8c 93       	st	X, r24
    2fd0:	3b c0       	rjmp	.+118    	; 0x3048 <DIO_vTOGPinValue+0xec>
		case DIO_PORTB : TOG_BIT(PORTB,Copy_u8PIN);break;
    2fd2:	a8 e3       	ldi	r26, 0x38	; 56
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e8 e3       	ldi	r30, 0x38	; 56
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	48 2f       	mov	r20, r24
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	02 2e       	mov	r0, r18
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <DIO_vTOGPinValue+0x94>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	0a 94       	dec	r0
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <DIO_vTOGPinValue+0x90>
    2ff4:	84 27       	eor	r24, r20
    2ff6:	8c 93       	st	X, r24
    2ff8:	27 c0       	rjmp	.+78     	; 0x3048 <DIO_vTOGPinValue+0xec>
		case DIO_PORTC : TOG_BIT(PORTC,Copy_u8PIN);break;
    2ffa:	a5 e3       	ldi	r26, 0x35	; 53
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e5 e3       	ldi	r30, 0x35	; 53
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	48 2f       	mov	r20, r24
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 2e       	mov	r0, r18
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <DIO_vTOGPinValue+0xbc>
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	0a 94       	dec	r0
    301a:	e2 f7       	brpl	.-8      	; 0x3014 <DIO_vTOGPinValue+0xb8>
    301c:	84 27       	eor	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	13 c0       	rjmp	.+38     	; 0x3048 <DIO_vTOGPinValue+0xec>
		case DIO_PORTD : TOG_BIT(PORTD,Copy_u8PIN);break;
    3022:	a2 e3       	ldi	r26, 0x32	; 50
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e2 e3       	ldi	r30, 0x32	; 50
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	48 2f       	mov	r20, r24
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 2e       	mov	r0, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <DIO_vTOGPinValue+0xe4>
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	0a 94       	dec	r0
    3042:	e2 f7       	brpl	.-8      	; 0x303c <DIO_vTOGPinValue+0xe0>
    3044:	84 27       	eor	r24, r20
    3046:	8c 93       	st	X, r24
		}
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <DIO_u8GetPinValue+0x6>
    305c:	00 d0       	rcall	.+0      	; 0x305e <DIO_u8GetPinValue+0x8>
    305e:	0f 92       	push	r0
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	8a 83       	std	Y+2, r24	; 0x02
    3066:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Sstatues = 0;
    3068:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PORT)
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	3d 83       	std	Y+5, r19	; 0x05
    3072:	2c 83       	std	Y+4, r18	; 0x04
    3074:	4c 81       	ldd	r20, Y+4	; 0x04
    3076:	5d 81       	ldd	r21, Y+5	; 0x05
    3078:	41 30       	cpi	r20, 0x01	; 1
    307a:	51 05       	cpc	r21, r1
    307c:	b1 f1       	breq	.+108    	; 0x30ea <DIO_u8GetPinValue+0x94>
    307e:	8c 81       	ldd	r24, Y+4	; 0x04
    3080:	9d 81       	ldd	r25, Y+5	; 0x05
    3082:	82 30       	cpi	r24, 0x02	; 2
    3084:	91 05       	cpc	r25, r1
    3086:	34 f4       	brge	.+12     	; 0x3094 <DIO_u8GetPinValue+0x3e>
    3088:	2c 81       	ldd	r18, Y+4	; 0x04
    308a:	3d 81       	ldd	r19, Y+5	; 0x05
    308c:	21 15       	cp	r18, r1
    308e:	31 05       	cpc	r19, r1
    3090:	71 f0       	breq	.+28     	; 0x30ae <DIO_u8GetPinValue+0x58>
    3092:	84 c0       	rjmp	.+264    	; 0x319c <DIO_u8GetPinValue+0x146>
    3094:	4c 81       	ldd	r20, Y+4	; 0x04
    3096:	5d 81       	ldd	r21, Y+5	; 0x05
    3098:	42 30       	cpi	r20, 0x02	; 2
    309a:	51 05       	cpc	r21, r1
    309c:	09 f4       	brne	.+2      	; 0x30a0 <DIO_u8GetPinValue+0x4a>
    309e:	43 c0       	rjmp	.+134    	; 0x3126 <DIO_u8GetPinValue+0xd0>
    30a0:	8c 81       	ldd	r24, Y+4	; 0x04
    30a2:	9d 81       	ldd	r25, Y+5	; 0x05
    30a4:	83 30       	cpi	r24, 0x03	; 3
    30a6:	91 05       	cpc	r25, r1
    30a8:	09 f4       	brne	.+2      	; 0x30ac <DIO_u8GetPinValue+0x56>
    30aa:	5b c0       	rjmp	.+182    	; 0x3162 <DIO_u8GetPinValue+0x10c>
    30ac:	77 c0       	rjmp	.+238    	; 0x319c <DIO_u8GetPinValue+0x146>
		{
		case DIO_PORTA : LOC_u8Sstatues = GET_BIT(PINA,Copy_u8PIN);break;
    30ae:	e9 e3       	ldi	r30, 0x39	; 57
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	48 2f       	mov	r20, r24
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <DIO_u8GetPinValue+0x72>
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	2a 95       	dec	r18
    30ca:	e2 f7       	brpl	.-8      	; 0x30c4 <DIO_u8GetPinValue+0x6e>
    30cc:	9a 01       	movw	r18, r20
    30ce:	28 23       	and	r18, r24
    30d0:	39 23       	and	r19, r25
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a9 01       	movw	r20, r18
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <DIO_u8GetPinValue+0x8a>
    30dc:	55 95       	asr	r21
    30de:	47 95       	ror	r20
    30e0:	8a 95       	dec	r24
    30e2:	e2 f7       	brpl	.-8      	; 0x30dc <DIO_u8GetPinValue+0x86>
    30e4:	ca 01       	movw	r24, r20
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	59 c0       	rjmp	.+178    	; 0x319c <DIO_u8GetPinValue+0x146>
		case DIO_PORTB : LOC_u8Sstatues = GET_BIT(PINB,Copy_u8PIN);break;
    30ea:	e6 e3       	ldi	r30, 0x36	; 54
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	48 2f       	mov	r20, r24
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <DIO_u8GetPinValue+0xae>
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	2a 95       	dec	r18
    3106:	e2 f7       	brpl	.-8      	; 0x3100 <DIO_u8GetPinValue+0xaa>
    3108:	9a 01       	movw	r18, r20
    310a:	28 23       	and	r18, r24
    310c:	39 23       	and	r19, r25
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a9 01       	movw	r20, r18
    3116:	02 c0       	rjmp	.+4      	; 0x311c <DIO_u8GetPinValue+0xc6>
    3118:	55 95       	asr	r21
    311a:	47 95       	ror	r20
    311c:	8a 95       	dec	r24
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <DIO_u8GetPinValue+0xc2>
    3120:	ca 01       	movw	r24, r20
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	3b c0       	rjmp	.+118    	; 0x319c <DIO_u8GetPinValue+0x146>
		case DIO_PORTC : LOC_u8Sstatues = GET_BIT(PINC,Copy_u8PIN);break;
    3126:	e3 e3       	ldi	r30, 0x33	; 51
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	48 2f       	mov	r20, r24
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <DIO_u8GetPinValue+0xea>
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	2a 95       	dec	r18
    3142:	e2 f7       	brpl	.-8      	; 0x313c <DIO_u8GetPinValue+0xe6>
    3144:	9a 01       	movw	r18, r20
    3146:	28 23       	and	r18, r24
    3148:	39 23       	and	r19, r25
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	88 2f       	mov	r24, r24
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a9 01       	movw	r20, r18
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <DIO_u8GetPinValue+0x102>
    3154:	55 95       	asr	r21
    3156:	47 95       	ror	r20
    3158:	8a 95       	dec	r24
    315a:	e2 f7       	brpl	.-8      	; 0x3154 <DIO_u8GetPinValue+0xfe>
    315c:	ca 01       	movw	r24, r20
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	1d c0       	rjmp	.+58     	; 0x319c <DIO_u8GetPinValue+0x146>
		case DIO_PORTD : LOC_u8Sstatues = GET_BIT(PIND,Copy_u8PIN);break;
    3162:	e0 e3       	ldi	r30, 0x30	; 48
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	48 2f       	mov	r20, r24
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <DIO_u8GetPinValue+0x126>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	2a 95       	dec	r18
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <DIO_u8GetPinValue+0x122>
    3180:	9a 01       	movw	r18, r20
    3182:	28 23       	and	r18, r24
    3184:	39 23       	and	r19, r25
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	a9 01       	movw	r20, r18
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <DIO_u8GetPinValue+0x13e>
    3190:	55 95       	asr	r21
    3192:	47 95       	ror	r20
    3194:	8a 95       	dec	r24
    3196:	e2 f7       	brpl	.-8      	; 0x3190 <DIO_u8GetPinValue+0x13a>
    3198:	ca 01       	movw	r24, r20
    319a:	89 83       	std	Y+1, r24	; 0x01
		}
	return	LOC_u8Sstatues;
    319c:	89 81       	ldd	r24, Y+1	; 0x01
}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <DIO_vSetPortDirection>:
/*>>>>>>>>>>>>>>>>>>>>>>>>> "PORTS" <<<<<<<<<<<<<<<<<<<<<<<<<<*/
void DIO_vSetPortDirection (u8 Copy_u8PORT , u8 Copy_Direction)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	00 d0       	rcall	.+0      	; 0x31b4 <DIO_vSetPortDirection+0x6>
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <DIO_vSetPortDirection+0x8>
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8PORT)
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	3c 83       	std	Y+4, r19	; 0x04
    31c6:	2b 83       	std	Y+3, r18	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	91 05       	cpc	r25, r1
    31d0:	d1 f0       	breq	.+52     	; 0x3206 <DIO_vSetPortDirection+0x58>
    31d2:	2b 81       	ldd	r18, Y+3	; 0x03
    31d4:	3c 81       	ldd	r19, Y+4	; 0x04
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	31 05       	cpc	r19, r1
    31da:	2c f4       	brge	.+10     	; 0x31e6 <DIO_vSetPortDirection+0x38>
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	61 f0       	breq	.+24     	; 0x31fc <DIO_vSetPortDirection+0x4e>
    31e4:	1e c0       	rjmp	.+60     	; 0x3222 <DIO_vSetPortDirection+0x74>
    31e6:	2b 81       	ldd	r18, Y+3	; 0x03
    31e8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ea:	22 30       	cpi	r18, 0x02	; 2
    31ec:	31 05       	cpc	r19, r1
    31ee:	81 f0       	breq	.+32     	; 0x3210 <DIO_vSetPortDirection+0x62>
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	83 30       	cpi	r24, 0x03	; 3
    31f6:	91 05       	cpc	r25, r1
    31f8:	81 f0       	breq	.+32     	; 0x321a <DIO_vSetPortDirection+0x6c>
    31fa:	13 c0       	rjmp	.+38     	; 0x3222 <DIO_vSetPortDirection+0x74>
		{
		case     DIO_PORTA: DDRA = Copy_Direction; break;
    31fc:	ea e3       	ldi	r30, 0x3A	; 58
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	80 83       	st	Z, r24
    3204:	0e c0       	rjmp	.+28     	; 0x3222 <DIO_vSetPortDirection+0x74>
		case     DIO_PORTB: DDRB = Copy_Direction; break;
    3206:	e7 e3       	ldi	r30, 0x37	; 55
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	80 83       	st	Z, r24
    320e:	09 c0       	rjmp	.+18     	; 0x3222 <DIO_vSetPortDirection+0x74>
		case     DIO_PORTC: DDRC = Copy_Direction; break;
    3210:	e4 e3       	ldi	r30, 0x34	; 52
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	80 83       	st	Z, r24
    3218:	04 c0       	rjmp	.+8      	; 0x3222 <DIO_vSetPortDirection+0x74>
		case     DIO_PORTD: DDRD = Copy_Direction; break;
    321a:	e1 e3       	ldi	r30, 0x31	; 49
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	80 83       	st	Z, r24
		}
}
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <DIO_vSetPortValue>:

void DIO_vSetPortValue (u8 Copy_u8PORT , u8 Copy_u8Value)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	00 d0       	rcall	.+0      	; 0x3236 <DIO_vSetPortValue+0x6>
    3236:	00 d0       	rcall	.+0      	; 0x3238 <DIO_vSetPortValue+0x8>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	6a 83       	std	Y+2, r22	; 0x02
	 switch (Copy_u8PORT)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	3c 83       	std	Y+4, r19	; 0x04
    3248:	2b 83       	std	Y+3, r18	; 0x03
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	9c 81       	ldd	r25, Y+4	; 0x04
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	91 05       	cpc	r25, r1
    3252:	d1 f0       	breq	.+52     	; 0x3288 <DIO_vSetPortValue+0x58>
    3254:	2b 81       	ldd	r18, Y+3	; 0x03
    3256:	3c 81       	ldd	r19, Y+4	; 0x04
    3258:	22 30       	cpi	r18, 0x02	; 2
    325a:	31 05       	cpc	r19, r1
    325c:	2c f4       	brge	.+10     	; 0x3268 <DIO_vSetPortValue+0x38>
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	61 f0       	breq	.+24     	; 0x327e <DIO_vSetPortValue+0x4e>
    3266:	1e c0       	rjmp	.+60     	; 0x32a4 <DIO_vSetPortValue+0x74>
    3268:	2b 81       	ldd	r18, Y+3	; 0x03
    326a:	3c 81       	ldd	r19, Y+4	; 0x04
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	31 05       	cpc	r19, r1
    3270:	81 f0       	breq	.+32     	; 0x3292 <DIO_vSetPortValue+0x62>
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	83 30       	cpi	r24, 0x03	; 3
    3278:	91 05       	cpc	r25, r1
    327a:	81 f0       	breq	.+32     	; 0x329c <DIO_vSetPortValue+0x6c>
    327c:	13 c0       	rjmp	.+38     	; 0x32a4 <DIO_vSetPortValue+0x74>
		{
		case     DIO_PORTA: PORTA = Copy_u8Value; break;
    327e:	eb e3       	ldi	r30, 0x3B	; 59
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	80 83       	st	Z, r24
    3286:	0e c0       	rjmp	.+28     	; 0x32a4 <DIO_vSetPortValue+0x74>
		case     DIO_PORTB: PORTB = Copy_u8Value; break;
    3288:	e8 e3       	ldi	r30, 0x38	; 56
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	80 83       	st	Z, r24
    3290:	09 c0       	rjmp	.+18     	; 0x32a4 <DIO_vSetPortValue+0x74>
		case     DIO_PORTC: PORTC = Copy_u8Value; break;
    3292:	e5 e3       	ldi	r30, 0x35	; 53
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	80 83       	st	Z, r24
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <DIO_vSetPortValue+0x74>
		case     DIO_PORTD: PORTD = Copy_u8Value; break;
    329c:	e2 e3       	ldi	r30, 0x32	; 50
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	80 83       	st	Z, r24
		}
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <DIO_vTOGPortValue>:

void DIO_vTOGPortValue (u8 Copy_u8PORT)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <DIO_vTOGPortValue+0x6>
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	3b 83       	std	Y+3, r19	; 0x03
    32c8:	2a 83       	std	Y+2, r18	; 0x02
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	81 30       	cpi	r24, 0x01	; 1
    32d0:	91 05       	cpc	r25, r1
    32d2:	e9 f0       	breq	.+58     	; 0x330e <DIO_vTOGPortValue+0x5c>
    32d4:	2a 81       	ldd	r18, Y+2	; 0x02
    32d6:	3b 81       	ldd	r19, Y+3	; 0x03
    32d8:	22 30       	cpi	r18, 0x02	; 2
    32da:	31 05       	cpc	r19, r1
    32dc:	2c f4       	brge	.+10     	; 0x32e8 <DIO_vTOGPortValue+0x36>
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	61 f0       	breq	.+24     	; 0x32fe <DIO_vTOGPortValue+0x4c>
    32e6:	2a c0       	rjmp	.+84     	; 0x333c <DIO_vTOGPortValue+0x8a>
    32e8:	2a 81       	ldd	r18, Y+2	; 0x02
    32ea:	3b 81       	ldd	r19, Y+3	; 0x03
    32ec:	22 30       	cpi	r18, 0x02	; 2
    32ee:	31 05       	cpc	r19, r1
    32f0:	b1 f0       	breq	.+44     	; 0x331e <DIO_vTOGPortValue+0x6c>
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	83 30       	cpi	r24, 0x03	; 3
    32f8:	91 05       	cpc	r25, r1
    32fa:	c9 f0       	breq	.+50     	; 0x332e <DIO_vTOGPortValue+0x7c>
    32fc:	1f c0       	rjmp	.+62     	; 0x333c <DIO_vTOGPortValue+0x8a>
		{
		case     DIO_PORTA: PORTA = ~PORTA; break;
    32fe:	ab e3       	ldi	r26, 0x3B	; 59
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	eb e3       	ldi	r30, 0x3B	; 59
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	80 95       	com	r24
    330a:	8c 93       	st	X, r24
    330c:	17 c0       	rjmp	.+46     	; 0x333c <DIO_vTOGPortValue+0x8a>
		case     DIO_PORTB: PORTB = ~PORTB; break;
    330e:	a8 e3       	ldi	r26, 0x38	; 56
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e8 e3       	ldi	r30, 0x38	; 56
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	80 95       	com	r24
    331a:	8c 93       	st	X, r24
    331c:	0f c0       	rjmp	.+30     	; 0x333c <DIO_vTOGPortValue+0x8a>
		case     DIO_PORTC: PORTC = ~PORTC; break;
    331e:	a5 e3       	ldi	r26, 0x35	; 53
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e5 e3       	ldi	r30, 0x35	; 53
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	80 95       	com	r24
    332a:	8c 93       	st	X, r24
    332c:	07 c0       	rjmp	.+14     	; 0x333c <DIO_vTOGPortValue+0x8a>
		case     DIO_PORTD: PORTD = ~PORTD; break;
    332e:	a2 e3       	ldi	r26, 0x32	; 50
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e2 e3       	ldi	r30, 0x32	; 50
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	80 95       	com	r24
    333a:	8c 93       	st	X, r24
		}
}
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <DIO_vGetPortValue>:

u8 DIO_vGetPortValue (u8 Copy_u8PORT)
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <DIO_vGetPortValue+0x6>
    334e:	00 d0       	rcall	.+0      	; 0x3350 <DIO_vGetPortValue+0x8>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Sstatues = 0;
    3356:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PORT)
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	28 2f       	mov	r18, r24
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	3c 83       	std	Y+4, r19	; 0x04
    3360:	2b 83       	std	Y+3, r18	; 0x03
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	81 30       	cpi	r24, 0x01	; 1
    3368:	91 05       	cpc	r25, r1
    336a:	d1 f0       	breq	.+52     	; 0x33a0 <DIO_vGetPortValue+0x58>
    336c:	2b 81       	ldd	r18, Y+3	; 0x03
    336e:	3c 81       	ldd	r19, Y+4	; 0x04
    3370:	22 30       	cpi	r18, 0x02	; 2
    3372:	31 05       	cpc	r19, r1
    3374:	2c f4       	brge	.+10     	; 0x3380 <DIO_vGetPortValue+0x38>
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	61 f0       	breq	.+24     	; 0x3396 <DIO_vGetPortValue+0x4e>
    337e:	1e c0       	rjmp	.+60     	; 0x33bc <DIO_vGetPortValue+0x74>
    3380:	2b 81       	ldd	r18, Y+3	; 0x03
    3382:	3c 81       	ldd	r19, Y+4	; 0x04
    3384:	22 30       	cpi	r18, 0x02	; 2
    3386:	31 05       	cpc	r19, r1
    3388:	81 f0       	breq	.+32     	; 0x33aa <DIO_vGetPortValue+0x62>
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	83 30       	cpi	r24, 0x03	; 3
    3390:	91 05       	cpc	r25, r1
    3392:	81 f0       	breq	.+32     	; 0x33b4 <DIO_vGetPortValue+0x6c>
    3394:	13 c0       	rjmp	.+38     	; 0x33bc <DIO_vGetPortValue+0x74>
		{
		case DIO_PORTA : LOC_u8Sstatues = PINA ;break;
    3396:	e9 e3       	ldi	r30, 0x39	; 57
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	0e c0       	rjmp	.+28     	; 0x33bc <DIO_vGetPortValue+0x74>
		case DIO_PORTB : LOC_u8Sstatues = PINB ;break;
    33a0:	e6 e3       	ldi	r30, 0x36	; 54
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	09 c0       	rjmp	.+18     	; 0x33bc <DIO_vGetPortValue+0x74>
		case DIO_PORTC : LOC_u8Sstatues = PINC ;break;
    33aa:	e3 e3       	ldi	r30, 0x33	; 51
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <DIO_vGetPortValue+0x74>
		case DIO_PORTD : LOC_u8Sstatues = PIND ;break;
    33b4:	e0 e3       	ldi	r30, 0x30	; 48
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	89 83       	std	Y+1, r24	; 0x01
		}
	return	LOC_u8Sstatues;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <DIO_voidWriteHighNibbles>:

/*>>>>>>>>>>>>>>>>>>>>>>>>> "HALF_PORT" <<<<<<<<<<<<<<<<<<<<<<<<<<*/

void DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <DIO_voidWriteHighNibbles+0x6>
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <DIO_voidWriteHighNibbles+0x8>
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8value= (Copy_u8value<<4) ;
    33dc:	8a 81       	ldd	r24, Y+2	; 0x02
    33de:	82 95       	swap	r24
    33e0:	80 7f       	andi	r24, 0xF0	; 240
    33e2:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8PORT)
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	3c 83       	std	Y+4, r19	; 0x04
    33ec:	2b 83       	std	Y+3, r18	; 0x03
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	91 05       	cpc	r25, r1
    33f6:	29 f1       	breq	.+74     	; 0x3442 <DIO_voidWriteHighNibbles+0x76>
    33f8:	2b 81       	ldd	r18, Y+3	; 0x03
    33fa:	3c 81       	ldd	r19, Y+4	; 0x04
    33fc:	22 30       	cpi	r18, 0x02	; 2
    33fe:	31 05       	cpc	r19, r1
    3400:	2c f4       	brge	.+10     	; 0x340c <DIO_voidWriteHighNibbles+0x40>
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	61 f0       	breq	.+24     	; 0x3422 <DIO_voidWriteHighNibbles+0x56>
    340a:	4a c0       	rjmp	.+148    	; 0x34a0 <DIO_voidWriteHighNibbles+0xd4>
    340c:	2b 81       	ldd	r18, Y+3	; 0x03
    340e:	3c 81       	ldd	r19, Y+4	; 0x04
    3410:	22 30       	cpi	r18, 0x02	; 2
    3412:	31 05       	cpc	r19, r1
    3414:	31 f1       	breq	.+76     	; 0x3462 <DIO_voidWriteHighNibbles+0x96>
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	83 30       	cpi	r24, 0x03	; 3
    341c:	91 05       	cpc	r25, r1
    341e:	89 f1       	breq	.+98     	; 0x3482 <DIO_voidWriteHighNibbles+0xb6>
    3420:	3f c0       	rjmp	.+126    	; 0x34a0 <DIO_voidWriteHighNibbles+0xd4>
		{
		case DIO_PORTA:
			PORTA&=0x0f;                   // make sure the high bits = 0000
    3422:	ab e3       	ldi	r26, 0x3B	; 59
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	eb e3       	ldi	r30, 0x3B	; 59
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	8f 70       	andi	r24, 0x0F	; 15
    342e:	8c 93       	st	X, r24
			PORTA|=Copy_u8value;		  //Set only the high nibble of the port A by the given value
    3430:	ab e3       	ldi	r26, 0x3B	; 59
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	eb e3       	ldi	r30, 0x3B	; 59
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	90 81       	ld	r25, Z
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	89 2b       	or	r24, r25
    343e:	8c 93       	st	X, r24
    3440:	2f c0       	rjmp	.+94     	; 0x34a0 <DIO_voidWriteHighNibbles+0xd4>
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                  //Set only the high nibble of the port B by the given value
    3442:	a8 e3       	ldi	r26, 0x38	; 56
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e8 e3       	ldi	r30, 0x38	; 56
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	8f 70       	andi	r24, 0x0F	; 15
    344e:	8c 93       	st	X, r24
			PORTB|=Copy_u8value;
    3450:	a8 e3       	ldi	r26, 0x38	; 56
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e8 e3       	ldi	r30, 0x38	; 56
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	90 81       	ld	r25, Z
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	89 2b       	or	r24, r25
    345e:	8c 93       	st	X, r24
    3460:	1f c0       	rjmp	.+62     	; 0x34a0 <DIO_voidWriteHighNibbles+0xd4>
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
    3462:	a5 e3       	ldi	r26, 0x35	; 53
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e5 e3       	ldi	r30, 0x35	; 53
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	8f 70       	andi	r24, 0x0F	; 15
    346e:	8c 93       	st	X, r24
			PORTC|=Copy_u8value;
    3470:	a5 e3       	ldi	r26, 0x35	; 53
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e5 e3       	ldi	r30, 0x35	; 53
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	90 81       	ld	r25, Z
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	89 2b       	or	r24, r25
    347e:	8c 93       	st	X, r24
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <DIO_voidWriteHighNibbles+0xd4>
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
    3482:	a2 e3       	ldi	r26, 0x32	; 50
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e2 e3       	ldi	r30, 0x32	; 50
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	8f 70       	andi	r24, 0x0F	; 15
    348e:	8c 93       	st	X, r24
			PORTD|=Copy_u8value;
    3490:	a2 e3       	ldi	r26, 0x32	; 50
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	e2 e3       	ldi	r30, 0x32	; 50
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	90 81       	ld	r25, Z
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	89 2b       	or	r24, r25
    349e:	8c 93       	st	X, r24
			break ;
		default: break ;
		}
}
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <DIO_voidWriteLowNibbles>:

void DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <DIO_voidWriteLowNibbles+0x6>
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <DIO_voidWriteLowNibbles+0x8>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8value&=0x0f;
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	8f 70       	andi	r24, 0x0F	; 15
    34c2:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8PORT)
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	3c 83       	std	Y+4, r19	; 0x04
    34cc:	2b 83       	std	Y+3, r18	; 0x03
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	9c 81       	ldd	r25, Y+4	; 0x04
    34d2:	81 30       	cpi	r24, 0x01	; 1
    34d4:	91 05       	cpc	r25, r1
    34d6:	29 f1       	breq	.+74     	; 0x3522 <DIO_voidWriteLowNibbles+0x74>
    34d8:	2b 81       	ldd	r18, Y+3	; 0x03
    34da:	3c 81       	ldd	r19, Y+4	; 0x04
    34dc:	22 30       	cpi	r18, 0x02	; 2
    34de:	31 05       	cpc	r19, r1
    34e0:	2c f4       	brge	.+10     	; 0x34ec <DIO_voidWriteLowNibbles+0x3e>
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	9c 81       	ldd	r25, Y+4	; 0x04
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	61 f0       	breq	.+24     	; 0x3502 <DIO_voidWriteLowNibbles+0x54>
    34ea:	4a c0       	rjmp	.+148    	; 0x3580 <DIO_voidWriteLowNibbles+0xd2>
    34ec:	2b 81       	ldd	r18, Y+3	; 0x03
    34ee:	3c 81       	ldd	r19, Y+4	; 0x04
    34f0:	22 30       	cpi	r18, 0x02	; 2
    34f2:	31 05       	cpc	r19, r1
    34f4:	31 f1       	breq	.+76     	; 0x3542 <DIO_voidWriteLowNibbles+0x94>
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	83 30       	cpi	r24, 0x03	; 3
    34fc:	91 05       	cpc	r25, r1
    34fe:	89 f1       	breq	.+98     	; 0x3562 <DIO_voidWriteLowNibbles+0xb4>
    3500:	3f c0       	rjmp	.+126    	; 0x3580 <DIO_voidWriteLowNibbles+0xd2>
		{
		case DIO_PORTA:
			PORTA&=0xf0;                   // make sure the high bits = 0000
    3502:	ab e3       	ldi	r26, 0x3B	; 59
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	eb e3       	ldi	r30, 0x3B	; 59
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 7f       	andi	r24, 0xF0	; 240
    350e:	8c 93       	st	X, r24
			PORTA|=Copy_u8value;		  //Set only the high nibble of the port A by the given value
    3510:	ab e3       	ldi	r26, 0x3B	; 59
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	eb e3       	ldi	r30, 0x3B	; 59
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	90 81       	ld	r25, Z
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	89 2b       	or	r24, r25
    351e:	8c 93       	st	X, r24
    3520:	2f c0       	rjmp	.+94     	; 0x3580 <DIO_voidWriteLowNibbles+0xd2>
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                  //Set only the high nibble of the port B by the given value
    3522:	a8 e3       	ldi	r26, 0x38	; 56
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e8 e3       	ldi	r30, 0x38	; 56
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	80 7f       	andi	r24, 0xF0	; 240
    352e:	8c 93       	st	X, r24
			PORTB|=Copy_u8value;
    3530:	a8 e3       	ldi	r26, 0x38	; 56
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	e8 e3       	ldi	r30, 0x38	; 56
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	90 81       	ld	r25, Z
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	89 2b       	or	r24, r25
    353e:	8c 93       	st	X, r24
    3540:	1f c0       	rjmp	.+62     	; 0x3580 <DIO_voidWriteLowNibbles+0xd2>
			break ;
		case DIO_PORTC:
			PORTC&=0xf0;                 //Set only the high nibble of the port C by the given value
    3542:	a5 e3       	ldi	r26, 0x35	; 53
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e5 e3       	ldi	r30, 0x35	; 53
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	80 7f       	andi	r24, 0xF0	; 240
    354e:	8c 93       	st	X, r24
			PORTC|=Copy_u8value;
    3550:	a5 e3       	ldi	r26, 0x35	; 53
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e5 e3       	ldi	r30, 0x35	; 53
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	90 81       	ld	r25, Z
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	89 2b       	or	r24, r25
    355e:	8c 93       	st	X, r24
    3560:	0f c0       	rjmp	.+30     	; 0x3580 <DIO_voidWriteLowNibbles+0xd2>
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the high nibble of the port D by the given value
    3562:	a2 e3       	ldi	r26, 0x32	; 50
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e2 e3       	ldi	r30, 0x32	; 50
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	80 7f       	andi	r24, 0xF0	; 240
    356e:	8c 93       	st	X, r24
			PORTD|=Copy_u8value;
    3570:	a2 e3       	ldi	r26, 0x32	; 50
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e2 e3       	ldi	r30, 0x32	; 50
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	90 81       	ld	r25, Z
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	89 2b       	or	r24, r25
    357e:	8c 93       	st	X, r24
			break ;
		default: break ;
		}
}
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <DIO_vConnectPullup>:


void DIO_vConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup){
    358e:	df 93       	push	r29
    3590:	cf 93       	push	r28
    3592:	00 d0       	rcall	.+0      	; 0x3594 <DIO_vConnectPullup+0x6>
    3594:	00 d0       	rcall	.+0      	; 0x3596 <DIO_vConnectPullup+0x8>
    3596:	0f 92       	push	r0
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	6a 83       	std	Y+2, r22	; 0x02
    35a0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PORT)
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	3d 83       	std	Y+5, r19	; 0x05
    35aa:	2c 83       	std	Y+4, r18	; 0x04
    35ac:	8c 81       	ldd	r24, Y+4	; 0x04
    35ae:	9d 81       	ldd	r25, Y+5	; 0x05
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	91 05       	cpc	r25, r1
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <DIO_vConnectPullup+0x2a>
    35b6:	5d c0       	rjmp	.+186    	; 0x3672 <DIO_vConnectPullup+0xe4>
    35b8:	2c 81       	ldd	r18, Y+4	; 0x04
    35ba:	3d 81       	ldd	r19, Y+5	; 0x05
    35bc:	22 30       	cpi	r18, 0x02	; 2
    35be:	31 05       	cpc	r19, r1
    35c0:	2c f4       	brge	.+10     	; 0x35cc <DIO_vConnectPullup+0x3e>
    35c2:	8c 81       	ldd	r24, Y+4	; 0x04
    35c4:	9d 81       	ldd	r25, Y+5	; 0x05
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	71 f0       	breq	.+28     	; 0x35e6 <DIO_vConnectPullup+0x58>
    35ca:	24 c1       	rjmp	.+584    	; 0x3814 <DIO_vConnectPullup+0x286>
    35cc:	2c 81       	ldd	r18, Y+4	; 0x04
    35ce:	3d 81       	ldd	r19, Y+5	; 0x05
    35d0:	22 30       	cpi	r18, 0x02	; 2
    35d2:	31 05       	cpc	r19, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <DIO_vConnectPullup+0x4a>
    35d6:	93 c0       	rjmp	.+294    	; 0x36fe <DIO_vConnectPullup+0x170>
    35d8:	8c 81       	ldd	r24, Y+4	; 0x04
    35da:	9d 81       	ldd	r25, Y+5	; 0x05
    35dc:	83 30       	cpi	r24, 0x03	; 3
    35de:	91 05       	cpc	r25, r1
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <DIO_vConnectPullup+0x56>
    35e2:	d3 c0       	rjmp	.+422    	; 0x378a <DIO_vConnectPullup+0x1fc>
    35e4:	17 c1       	rjmp	.+558    	; 0x3814 <DIO_vConnectPullup+0x286>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	81 30       	cpi	r24, 0x01	; 1
    35ea:	71 f5       	brne	.+92     	; 0x3648 <DIO_vConnectPullup+0xba>
			{
				CLR_BIT(SFIOR,PUD);
    35ec:	a0 e5       	ldi	r26, 0x50	; 80
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e0 e5       	ldi	r30, 0x50	; 80
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	8b 7f       	andi	r24, 0xFB	; 251
    35f8:	8c 93       	st	X, r24
				CLR_BIT(DDRA,Copy_u8PIN);
    35fa:	aa e3       	ldi	r26, 0x3A	; 58
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	ea e3       	ldi	r30, 0x3A	; 58
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	48 2f       	mov	r20, r24
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	28 2f       	mov	r18, r24
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	02 c0       	rjmp	.+4      	; 0x3616 <DIO_vConnectPullup+0x88>
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	2a 95       	dec	r18
    3618:	e2 f7       	brpl	.-8      	; 0x3612 <DIO_vConnectPullup+0x84>
    361a:	80 95       	com	r24
    361c:	84 23       	and	r24, r20
    361e:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_u8PIN);
    3620:	ab e3       	ldi	r26, 0x3B	; 59
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	eb e3       	ldi	r30, 0x3B	; 59
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	48 2f       	mov	r20, r24
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	28 2f       	mov	r18, r24
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	02 2e       	mov	r0, r18
    3638:	02 c0       	rjmp	.+4      	; 0x363e <DIO_vConnectPullup+0xb0>
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	0a 94       	dec	r0
    3640:	e2 f7       	brpl	.-8      	; 0x363a <DIO_vConnectPullup+0xac>
    3642:	84 2b       	or	r24, r20
    3644:	8c 93       	st	X, r24
    3646:	e6 c0       	rjmp	.+460    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			else
			{
				CLR_BIT(PORTA,Copy_u8PIN);
    3648:	ab e3       	ldi	r26, 0x3B	; 59
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	eb e3       	ldi	r30, 0x3B	; 59
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	48 2f       	mov	r20, r24
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	28 2f       	mov	r18, r24
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	02 2e       	mov	r0, r18
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <DIO_vConnectPullup+0xd8>
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	0a 94       	dec	r0
    3668:	e2 f7       	brpl	.-8      	; 0x3662 <DIO_vConnectPullup+0xd4>
    366a:	80 95       	com	r24
    366c:	84 23       	and	r24, r20
    366e:	8c 93       	st	X, r24
    3670:	d1 c0       	rjmp	.+418    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	71 f5       	brne	.+92     	; 0x36d4 <DIO_vConnectPullup+0x146>
			{
				CLR_BIT(SFIOR,PUD);
    3678:	a0 e5       	ldi	r26, 0x50	; 80
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e0 e5       	ldi	r30, 0x50	; 80
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	8b 7f       	andi	r24, 0xFB	; 251
    3684:	8c 93       	st	X, r24
				CLR_BIT(DDRB,Copy_u8PIN);
    3686:	a7 e3       	ldi	r26, 0x37	; 55
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e7 e3       	ldi	r30, 0x37	; 55
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	48 2f       	mov	r20, r24
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <DIO_vConnectPullup+0x114>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	2a 95       	dec	r18
    36a4:	e2 f7       	brpl	.-8      	; 0x369e <DIO_vConnectPullup+0x110>
    36a6:	80 95       	com	r24
    36a8:	84 23       	and	r24, r20
    36aa:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_u8PIN);
    36ac:	a8 e3       	ldi	r26, 0x38	; 56
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e8 e3       	ldi	r30, 0x38	; 56
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	48 2f       	mov	r20, r24
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	02 2e       	mov	r0, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_vConnectPullup+0x13c>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	0a 94       	dec	r0
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_vConnectPullup+0x138>
    36ce:	84 2b       	or	r24, r20
    36d0:	8c 93       	st	X, r24
    36d2:	a0 c0       	rjmp	.+320    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			else
			{
				CLR_BIT(PORTB,Copy_u8PIN);
    36d4:	a8 e3       	ldi	r26, 0x38	; 56
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e8 e3       	ldi	r30, 0x38	; 56
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	48 2f       	mov	r20, r24
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 2e       	mov	r0, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <DIO_vConnectPullup+0x164>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <DIO_vConnectPullup+0x160>
    36f6:	80 95       	com	r24
    36f8:	84 23       	and	r24, r20
    36fa:	8c 93       	st	X, r24
    36fc:	8b c0       	rjmp	.+278    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	81 30       	cpi	r24, 0x01	; 1
    3702:	71 f5       	brne	.+92     	; 0x3760 <DIO_vConnectPullup+0x1d2>
			{
				CLR_BIT(SFIOR,PUD);
    3704:	a0 e5       	ldi	r26, 0x50	; 80
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e0 e5       	ldi	r30, 0x50	; 80
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	8b 7f       	andi	r24, 0xFB	; 251
    3710:	8c 93       	st	X, r24
				CLR_BIT(DDRC,Copy_u8PIN);
    3712:	a4 e3       	ldi	r26, 0x34	; 52
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e4 e3       	ldi	r30, 0x34	; 52
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	48 2f       	mov	r20, r24
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	02 c0       	rjmp	.+4      	; 0x372e <DIO_vConnectPullup+0x1a0>
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	2a 95       	dec	r18
    3730:	e2 f7       	brpl	.-8      	; 0x372a <DIO_vConnectPullup+0x19c>
    3732:	80 95       	com	r24
    3734:	84 23       	and	r24, r20
    3736:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_u8PIN);
    3738:	a5 e3       	ldi	r26, 0x35	; 53
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e5 e3       	ldi	r30, 0x35	; 53
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	48 2f       	mov	r20, r24
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	02 2e       	mov	r0, r18
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <DIO_vConnectPullup+0x1c8>
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	0a 94       	dec	r0
    3758:	e2 f7       	brpl	.-8      	; 0x3752 <DIO_vConnectPullup+0x1c4>
    375a:	84 2b       	or	r24, r20
    375c:	8c 93       	st	X, r24
    375e:	5a c0       	rjmp	.+180    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			else
			{
				CLR_BIT(PORTC,Copy_u8PIN);
    3760:	a5 e3       	ldi	r26, 0x35	; 53
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e5 e3       	ldi	r30, 0x35	; 53
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	48 2f       	mov	r20, r24
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	02 2e       	mov	r0, r18
    3778:	02 c0       	rjmp	.+4      	; 0x377e <DIO_vConnectPullup+0x1f0>
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	0a 94       	dec	r0
    3780:	e2 f7       	brpl	.-8      	; 0x377a <DIO_vConnectPullup+0x1ec>
    3782:	80 95       	com	r24
    3784:	84 23       	and	r24, r20
    3786:	8c 93       	st	X, r24
    3788:	45 c0       	rjmp	.+138    	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	81 30       	cpi	r24, 0x01	; 1
    378e:	71 f5       	brne	.+92     	; 0x37ec <DIO_vConnectPullup+0x25e>
			{
				CLR_BIT(SFIOR,PUD);
    3790:	a0 e5       	ldi	r26, 0x50	; 80
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	e0 e5       	ldi	r30, 0x50	; 80
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	8b 7f       	andi	r24, 0xFB	; 251
    379c:	8c 93       	st	X, r24
				CLR_BIT(DDRD,Copy_u8PIN);
    379e:	a1 e3       	ldi	r26, 0x31	; 49
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	e1 e3       	ldi	r30, 0x31	; 49
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	48 2f       	mov	r20, r24
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <DIO_vConnectPullup+0x22c>
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	2a 95       	dec	r18
    37bc:	e2 f7       	brpl	.-8      	; 0x37b6 <DIO_vConnectPullup+0x228>
    37be:	80 95       	com	r24
    37c0:	84 23       	and	r24, r20
    37c2:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_u8PIN);
    37c4:	a2 e3       	ldi	r26, 0x32	; 50
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e2 e3       	ldi	r30, 0x32	; 50
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	48 2f       	mov	r20, r24
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	02 2e       	mov	r0, r18
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <DIO_vConnectPullup+0x254>
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	0a 94       	dec	r0
    37e4:	e2 f7       	brpl	.-8      	; 0x37de <DIO_vConnectPullup+0x250>
    37e6:	84 2b       	or	r24, r20
    37e8:	8c 93       	st	X, r24
    37ea:	14 c0       	rjmp	.+40     	; 0x3814 <DIO_vConnectPullup+0x286>
			}
			else
			{
				CLR_BIT(PORTD,Copy_u8PIN);
    37ec:	a2 e3       	ldi	r26, 0x32	; 50
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	e2 e3       	ldi	r30, 0x32	; 50
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	48 2f       	mov	r20, r24
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	28 2f       	mov	r18, r24
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	02 2e       	mov	r0, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <DIO_vConnectPullup+0x27c>
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	0a 94       	dec	r0
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <DIO_vConnectPullup+0x278>
    380e:	80 95       	com	r24
    3810:	84 23       	and	r24, r20
    3812:	8c 93       	st	X, r24
			}
			break;
		}
}
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	cf 91       	pop	r28
    3820:	df 91       	pop	r29
    3822:	08 95       	ret

00003824 <EEROM_VoidSendDataToAddress>:
#include "EEROM_interface.h"
#include "EEROM_config.h"
#include "EEROM_private.h"

void EEROM_VoidSendDataToAddress ( u16 COPY_AddressReg , u8 COPY_Data )
{
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	00 d0       	rcall	.+0      	; 0x382a <EEROM_VoidSendDataToAddress+0x6>
    382a:	0f 92       	push	r0
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	9a 83       	std	Y+2, r25	; 0x02
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	6b 83       	std	Y+3, r22	; 0x03
	//EEAR = COPY_AddressReg;


		EEARL=(u8)COPY_AddressReg;
    3836:	ee e3       	ldi	r30, 0x3E	; 62
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	80 83       	st	Z, r24
		EEARH=(u8)(COPY_AddressReg>>8);
    383e:	ef e3       	ldi	r30, 0x3F	; 63
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	89 2f       	mov	r24, r25
    3848:	99 27       	eor	r25, r25
    384a:	80 83       	st	Z, r24


	EEDR = COPY_Data;
    384c:	ed e3       	ldi	r30, 0x3D	; 61
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	80 83       	st	Z, r24
	
	SET_BIT(EECR,EEMWE);
    3854:	ac e3       	ldi	r26, 0x3C	; 60
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	ec e3       	ldi	r30, 0x3C	; 60
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	84 60       	ori	r24, 0x04	; 4
    3860:	8c 93       	st	X, r24
	SET_BIT(EECR,EEWE);
    3862:	ac e3       	ldi	r26, 0x3C	; 60
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	ec e3       	ldi	r30, 0x3C	; 60
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	82 60       	ori	r24, 0x02	; 2
    386e:	8c 93       	st	X, r24

	while(GET_BIT(EECR,EEWE)==1);
    3870:	ec e3       	ldi	r30, 0x3C	; 60
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	88 2f       	mov	r24, r24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	82 70       	andi	r24, 0x02	; 2
    387c:	90 70       	andi	r25, 0x00	; 0
    387e:	95 95       	asr	r25
    3880:	87 95       	ror	r24
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	91 05       	cpc	r25, r1
    3886:	a1 f3       	breq	.-24     	; 0x3870 <EEROM_VoidSendDataToAddress+0x4c>
}
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <EEROM_VoidReadDataFromAddress>:

u8 EEROM_VoidReadDataFromAddress ( const u16 COPY_AddressReg )
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	00 d0       	rcall	.+0      	; 0x389a <EEROM_VoidReadDataFromAddress+0x6>
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	9a 83       	std	Y+2, r25	; 0x02
    38a0:	89 83       	std	Y+1, r24	; 0x01
	/*EEAR = COPY_AddressReg;*/

		EEARL=(u8)COPY_AddressReg;
    38a2:	ee e3       	ldi	r30, 0x3E	; 62
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	80 83       	st	Z, r24
		EEARH=(u8)(COPY_AddressReg>>8);
    38aa:	ef e3       	ldi	r30, 0x3F	; 63
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	89 2f       	mov	r24, r25
    38b4:	99 27       	eor	r25, r25
    38b6:	80 83       	st	Z, r24

	SET_BIT(EECR,EERE);
    38b8:	ac e3       	ldi	r26, 0x3C	; 60
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	ec e3       	ldi	r30, 0x3C	; 60
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	81 60       	ori	r24, 0x01	; 1
    38c4:	8c 93       	st	X, r24

	return EEDR;
    38c6:	ed e3       	ldi	r30, 0x3D	; 61
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <KPD_Init>:

#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"

void KPD_Init(void){
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62

	/*                    connect pull up for the pins of the rows                             */

	DIO_vConnectPullup        ( KPD_PORT , KPD_R0 , DIO_PIN_HIGH );
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 c7 1a 	call	0x358e	; 0x358e <DIO_vConnectPullup>
	DIO_vConnectPullup        ( KPD_PORT , KPD_R1 , DIO_PIN_HIGH );
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	61 e0       	ldi	r22, 0x01	; 1
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 c7 1a 	call	0x358e	; 0x358e <DIO_vConnectPullup>
	DIO_vConnectPullup        ( KPD_PORT , KPD_R2 , DIO_PIN_HIGH );
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	62 e0       	ldi	r22, 0x02	; 2
    38f6:	41 e0       	ldi	r20, 0x01	; 1
    38f8:	0e 94 c7 1a 	call	0x358e	; 0x358e <DIO_vConnectPullup>
	DIO_vConnectPullup        ( KPD_PORT , KPD_R3 , DIO_PIN_HIGH );
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	63 e0       	ldi	r22, 0x03	; 3
    3900:	41 e0       	ldi	r20, 0x01	; 1
    3902:	0e 94 c7 1a 	call	0x358e	; 0x358e <DIO_vConnectPullup>




	DIO_vSetPinDirection( KPD_PORT , KPD_C0 , DIO_PIN_OUTPUT );
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	64 e0       	ldi	r22, 0x04	; 4
    390a:	41 e0       	ldi	r20, 0x01	; 1
    390c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection( KPD_PORT , KPD_C1 , DIO_PIN_OUTPUT );
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	65 e0       	ldi	r22, 0x05	; 5
    3914:	41 e0       	ldi	r20, 0x01	; 1
    3916:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection( KPD_PORT , KPD_C2 , DIO_PIN_OUTPUT );
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	66 e0       	ldi	r22, 0x06	; 6
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection( KPD_PORT , KPD_C3 , DIO_PIN_OUTPUT );
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	67 e0       	ldi	r22, 0x07	; 7
    3928:	41 e0       	ldi	r20, 0x01	; 1
    392a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>

	DIO_vSetPinValue    ( KPD_PORT , KPD_C0 , DIO_PIN_HIGH );
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	64 e0       	ldi	r22, 0x04	; 4
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
	DIO_vSetPinValue    ( KPD_PORT , KPD_C1 , DIO_PIN_HIGH );
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	65 e0       	ldi	r22, 0x05	; 5
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
	DIO_vSetPinValue    ( KPD_PORT , KPD_C2 , DIO_PIN_HIGH );
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	66 e0       	ldi	r22, 0x06	; 6
    3946:	41 e0       	ldi	r20, 0x01	; 1
    3948:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
	DIO_vSetPinValue    ( KPD_PORT , KPD_C3 , DIO_PIN_HIGH );
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	67 e0       	ldi	r22, 0x07	; 7
    3950:	41 e0       	ldi	r20, 0x01	; 1
    3952:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>

}
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <KPD_u8GetPressed>:
/*
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8   KPD_u8GetPressed( void ){
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	62 97       	sbiw	r28, 0x12	; 18
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61

	u8 LOC_u8ReturnData = NOTPRESSED ;
    3970:	8f ef       	ldi	r24, 0xFF	; 255
    3972:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
    3974:	84 e0       	ldi	r24, 0x04	; 4
    3976:	8f 87       	std	Y+15, r24	; 0x0f
    3978:	bd c0       	rjmp	.+378    	; 0x3af4 <KPD_u8GetPressed+0x198>

		DIO_vSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	6f 85       	ldd	r22, Y+15	; 0x0f
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){
    3984:	18 8a       	std	Y+16, r1	; 0x10
    3986:	aa c0       	rjmp	.+340    	; 0x3adc <KPD_u8GetPressed+0x180>

			LOC_u8GetPressed =	DIO_u8GetPinValue( KPD_PORT , LOC_u8Row  ); // retun the row value
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	68 89       	ldd	r22, Y+16	; 0x10
    398c:	0e 94 2b 18 	call	0x3056	; 0x3056 <DIO_u8GetPinValue>
    3990:	89 8b       	std	Y+17, r24	; 0x11
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    3992:	89 89       	ldd	r24, Y+17	; 0x11
    3994:	88 23       	and	r24, r24
    3996:	09 f0       	breq	.+2      	; 0x399a <KPD_u8GetPressed+0x3e>
    3998:	9e c0       	rjmp	.+316    	; 0x3ad6 <KPD_u8GetPressed+0x17a>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	a8 e4       	ldi	r26, 0x48	; 72
    39a0:	b2 e4       	ldi	r27, 0x42	; 66
    39a2:	8b 87       	std	Y+11, r24	; 0x0b
    39a4:	9c 87       	std	Y+12, r25	; 0x0c
    39a6:	ad 87       	std	Y+13, r26	; 0x0d
    39a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	4a ef       	ldi	r20, 0xFA	; 250
    39b8:	54 e4       	ldi	r21, 0x44	; 68
    39ba:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	8f 83       	std	Y+7, r24	; 0x07
    39c4:	98 87       	std	Y+8, r25	; 0x08
    39c6:	a9 87       	std	Y+9, r26	; 0x09
    39c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ca:	6f 81       	ldd	r22, Y+7	; 0x07
    39cc:	78 85       	ldd	r23, Y+8	; 0x08
    39ce:	89 85       	ldd	r24, Y+9	; 0x09
    39d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e8       	ldi	r20, 0x80	; 128
    39d8:	5f e3       	ldi	r21, 0x3F	; 63
    39da:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    39de:	88 23       	and	r24, r24
    39e0:	2c f4       	brge	.+10     	; 0x39ec <KPD_u8GetPressed+0x90>
		__ticks = 1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
    39ea:	3f c0       	rjmp	.+126    	; 0x3a6a <KPD_u8GetPressed+0x10e>
	else if (__tmp > 65535)
    39ec:	6f 81       	ldd	r22, Y+7	; 0x07
    39ee:	78 85       	ldd	r23, Y+8	; 0x08
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	3f ef       	ldi	r19, 0xFF	; 255
    39f8:	4f e7       	ldi	r20, 0x7F	; 127
    39fa:	57 e4       	ldi	r21, 0x47	; 71
    39fc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3a00:	18 16       	cp	r1, r24
    3a02:	4c f5       	brge	.+82     	; 0x3a56 <KPD_u8GetPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e2       	ldi	r20, 0x20	; 32
    3a12:	51 e4       	ldi	r21, 0x41	; 65
    3a14:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	9e 83       	std	Y+6, r25	; 0x06
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
    3a2c:	0f c0       	rjmp	.+30     	; 0x3a4c <KPD_u8GetPressed+0xf0>
    3a2e:	88 ec       	ldi	r24, 0xC8	; 200
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9c 83       	std	Y+4, r25	; 0x04
    3a34:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <KPD_u8GetPressed+0xde>
    3a3e:	9c 83       	std	Y+4, r25	; 0x04
    3a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a42:	8d 81       	ldd	r24, Y+5	; 0x05
    3a44:	9e 81       	ldd	r25, Y+6	; 0x06
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	9e 83       	std	Y+6, r25	; 0x06
    3a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	69 f7       	brne	.-38     	; 0x3a2e <KPD_u8GetPressed+0xd2>
    3a54:	14 c0       	rjmp	.+40     	; 0x3a7e <KPD_u8GetPressed+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a56:	6f 81       	ldd	r22, Y+7	; 0x07
    3a58:	78 85       	ldd	r23, Y+8	; 0x08
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9e 83       	std	Y+6, r25	; 0x06
    3a68:	8d 83       	std	Y+5, r24	; 0x05
    3a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6e:	9a 83       	std	Y+2, r25	; 0x02
    3a70:	89 83       	std	Y+1, r24	; 0x01
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <KPD_u8GetPressed+0x11a>
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	89 83       	std	Y+1, r24	; 0x01
			{

				_delay_ms(50);   // delay for bouncing

				LOC_u8GetPressed =  DIO_u8GetPinValue( KPD_PORT , LOC_u8Row  );   // to make sure that the button is pressed & check again
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	68 89       	ldd	r22, Y+16	; 0x10
    3a82:	0e 94 2b 18 	call	0x3056	; 0x3056 <DIO_u8GetPinValue>
    3a86:	89 8b       	std	Y+17, r24	; 0x11

				if( LOC_u8GetPressed == 0 )
    3a88:	89 89       	ldd	r24, Y+17	; 0x11
    3a8a:	88 23       	and	r24, r24
    3a8c:	a9 f4       	brne	.+42     	; 0x3ab8 <KPD_u8GetPressed+0x15c>
					the button will khnow by the row and the column (ASCII Code)
					==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
					==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
					*/

					LOC_u8ReturnData = KPD_u8Buttons[ LOC_u8Row - KPD_ROW_INIT ][ LOC_u8Col - KPD_COL_INIT ];
    3a8e:	88 89       	ldd	r24, Y+16	; 0x10
    3a90:	48 2f       	mov	r20, r24
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a96:	88 2f       	mov	r24, r24
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	9c 01       	movw	r18, r24
    3a9c:	24 50       	subi	r18, 0x04	; 4
    3a9e:	30 40       	sbci	r19, 0x00	; 0
    3aa0:	ca 01       	movw	r24, r20
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	82 0f       	add	r24, r18
    3aac:	93 1f       	adc	r25, r19
    3aae:	fc 01       	movw	r30, r24
    3ab0:	e0 5d       	subi	r30, 0xD0	; 208
    3ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ab4:	80 81       	ld	r24, Z
    3ab6:	8a 8b       	std	Y+18, r24	; 0x12

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				LOC_u8GetPressed = DIO_u8GetPinValue( KPD_PORT , LOC_u8Row  );
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	68 89       	ldd	r22, Y+16	; 0x10
    3abc:	0e 94 2b 18 	call	0x3056	; 0x3056 <DIO_u8GetPinValue>
    3ac0:	89 8b       	std	Y+17, r24	; 0x11
    3ac2:	05 c0       	rjmp	.+10     	; 0x3ace <KPD_u8GetPressed+0x172>
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
				{

					LOC_u8GetPressed = DIO_u8GetPinValue( KPD_PORT , LOC_u8Row );
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	68 89       	ldd	r22, Y+16	; 0x10
    3ac8:	0e 94 2b 18 	call	0x3056	; 0x3056 <DIO_u8GetPinValue>
    3acc:	89 8b       	std	Y+17, r24	; 0x11

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				LOC_u8GetPressed = DIO_u8GetPinValue( KPD_PORT , LOC_u8Row  );
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    3ace:	89 89       	ldd	r24, Y+17	; 0x11
    3ad0:	88 23       	and	r24, r24
    3ad2:	c1 f3       	breq	.-16     	; 0x3ac4 <KPD_u8GetPressed+0x168>
    3ad4:	07 c0       	rjmp	.+14     	; 0x3ae4 <KPD_u8GetPressed+0x188>

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){

		DIO_vSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){
    3ad6:	88 89       	ldd	r24, Y+16	; 0x10
    3ad8:	8f 5f       	subi	r24, 0xFF	; 255
    3ada:	88 8b       	std	Y+16, r24	; 0x10
    3adc:	88 89       	ldd	r24, Y+16	; 0x10
    3ade:	84 30       	cpi	r24, 0x04	; 4
    3ae0:	08 f4       	brcc	.+2      	; 0x3ae4 <KPD_u8GetPressed+0x188>
    3ae2:	52 cf       	rjmp	.-348    	; 0x3988 <KPD_u8GetPressed+0x2c>
			}

		}

		// return this column’s pin to high
		DIO_vSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_HIGH );
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
    3aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af0:	8f 5f       	subi	r24, 0xFF	; 255
    3af2:	8f 87       	std	Y+15, r24	; 0x0f
    3af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af6:	88 30       	cpi	r24, 0x08	; 8
    3af8:	08 f4       	brcc	.+2      	; 0x3afc <KPD_u8GetPressed+0x1a0>
    3afa:	3f cf       	rjmp	.-386    	; 0x397a <KPD_u8GetPressed+0x1e>
		// return this column’s pin to high
		DIO_vSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_HIGH );

	}

	return LOC_u8ReturnData ;
    3afc:	8a 89       	ldd	r24, Y+18	; 0x12

}
    3afe:	62 96       	adiw	r28, 0x12	; 18
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <LCD_vInit>:
#include "LCD_extrachar.h"


//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      LCD_vInit      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void LCD_vInit( void )
{
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	c6 54       	subi	r28, 0x46	; 70
    3b1e:	d0 40       	sbci	r29, 0x00	; 0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	ed 5b       	subi	r30, 0xBD	; 189
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	a8 e4       	ldi	r26, 0x48	; 72
    3b36:	b2 e4       	ldi	r27, 0x42	; 66
    3b38:	80 83       	st	Z, r24
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	a2 83       	std	Z+2, r26	; 0x02
    3b3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b40:	8e 01       	movw	r16, r28
    3b42:	01 5c       	subi	r16, 0xC1	; 193
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
    3b46:	fe 01       	movw	r30, r28
    3b48:	ed 5b       	subi	r30, 0xBD	; 189
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	60 81       	ld	r22, Z
    3b4e:	71 81       	ldd	r23, Z+1	; 0x01
    3b50:	82 81       	ldd	r24, Z+2	; 0x02
    3b52:	93 81       	ldd	r25, Z+3	; 0x03
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	4a ef       	ldi	r20, 0xFA	; 250
    3b5a:	54 e4       	ldi	r21, 0x44	; 68
    3b5c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	f8 01       	movw	r30, r16
    3b66:	80 83       	st	Z, r24
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	a2 83       	std	Z+2, r26	; 0x02
    3b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b6e:	fe 01       	movw	r30, r28
    3b70:	ff 96       	adiw	r30, 0x3f	; 63
    3b72:	60 81       	ld	r22, Z
    3b74:	71 81       	ldd	r23, Z+1	; 0x01
    3b76:	82 81       	ldd	r24, Z+2	; 0x02
    3b78:	93 81       	ldd	r25, Z+3	; 0x03
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	40 e8       	ldi	r20, 0x80	; 128
    3b80:	5f e3       	ldi	r21, 0x3F	; 63
    3b82:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3b86:	88 23       	and	r24, r24
    3b88:	2c f4       	brge	.+10     	; 0x3b94 <LCD_vInit+0x84>
		__ticks = 1;
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	9e af       	std	Y+62, r25	; 0x3e
    3b90:	8d af       	std	Y+61, r24	; 0x3d
    3b92:	46 c0       	rjmp	.+140    	; 0x3c20 <LCD_vInit+0x110>
	else if (__tmp > 65535)
    3b94:	fe 01       	movw	r30, r28
    3b96:	ff 96       	adiw	r30, 0x3f	; 63
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	3f ef       	ldi	r19, 0xFF	; 255
    3ba4:	4f e7       	ldi	r20, 0x7F	; 127
    3ba6:	57 e4       	ldi	r21, 0x47	; 71
    3ba8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3bac:	18 16       	cp	r1, r24
    3bae:	64 f5       	brge	.+88     	; 0x3c08 <LCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ed 5b       	subi	r30, 0xBD	; 189
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e2       	ldi	r20, 0x20	; 32
    3bc4:	51 e4       	ldi	r21, 0x41	; 65
    3bc6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	9e af       	std	Y+62, r25	; 0x3e
    3bdc:	8d af       	std	Y+61, r24	; 0x3d
    3bde:	0f c0       	rjmp	.+30     	; 0x3bfe <LCD_vInit+0xee>
    3be0:	88 ec       	ldi	r24, 0xC8	; 200
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	9c af       	std	Y+60, r25	; 0x3c
    3be6:	8b af       	std	Y+59, r24	; 0x3b
    3be8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bea:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <LCD_vInit+0xdc>
    3bf0:	9c af       	std	Y+60, r25	; 0x3c
    3bf2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	9e af       	std	Y+62, r25	; 0x3e
    3bfc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	69 f7       	brne	.-38     	; 0x3be0 <LCD_vInit+0xd0>
    3c06:	16 c0       	rjmp	.+44     	; 0x3c34 <LCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c08:	fe 01       	movw	r30, r28
    3c0a:	ff 96       	adiw	r30, 0x3f	; 63
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e af       	std	Y+62, r25	; 0x3e
    3c1e:	8d af       	std	Y+61, r24	; 0x3d
    3c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c24:	9a af       	std	Y+58, r25	; 0x3a
    3c26:	89 af       	std	Y+57, r24	; 0x39
    3c28:	89 ad       	ldd	r24, Y+57	; 0x39
    3c2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <LCD_vInit+0x11c>
    3c30:	9a af       	std	Y+58, r25	; 0x3a
    3c32:	89 af       	std	Y+57, r24	; 0x39

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);

	// All Pins as OutPut pins
	DIO_vSetPinDirection  ( LCD_DATA_PORT    ,DIO_PIN4, DIO_PIN_OUTPUT   );
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	64 e0       	ldi	r22, 0x04	; 4
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_DATA_PORT    ,DIO_PIN5, DIO_PIN_OUTPUT   );
    3c3e:	82 e0       	ldi	r24, 0x02	; 2
    3c40:	65 e0       	ldi	r22, 0x05	; 5
    3c42:	41 e0       	ldi	r20, 0x01	; 1
    3c44:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_DATA_PORT    ,DIO_PIN6, DIO_PIN_OUTPUT   );
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	66 e0       	ldi	r22, 0x06	; 6
    3c4c:	41 e0       	ldi	r20, 0x01	; 1
    3c4e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_DATA_PORT    ,DIO_PIN7, DIO_PIN_OUTPUT   );
    3c52:	82 e0       	ldi	r24, 0x02	; 2
    3c54:	67 e0       	ldi	r22, 0x07	; 7
    3c56:	41 e0       	ldi	r20, 0x01	; 1
    3c58:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_CONTROL_PORT , LCD_RS , DIO_PIN_OUTPUT  );
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	41 e0       	ldi	r20, 0x01	; 1
    3c62:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_CONTROL_PORT , LCD_RW , DIO_PIN_OUTPUT  );
    3c66:	82 e0       	ldi	r24, 0x02	; 2
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	DIO_vSetPinDirection  ( LCD_CONTROL_PORT , LCD_EN , DIO_PIN_OUTPUT  );
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	62 e0       	ldi	r22, 0x02	; 2
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>

	/* Return cursor to the first position on the first line  */
	LCD_vSendCommand(lcd_Home);
    3c7a:	82 e0       	ldi	r24, 0x02	; 2
    3c7c:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	a0 e8       	ldi	r26, 0x80	; 128
    3c86:	bf e3       	ldi	r27, 0x3F	; 63
    3c88:	8d ab       	std	Y+53, r24	; 0x35
    3c8a:	9e ab       	std	Y+54, r25	; 0x36
    3c8c:	af ab       	std	Y+55, r26	; 0x37
    3c8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c90:	6d a9       	ldd	r22, Y+53	; 0x35
    3c92:	7e a9       	ldd	r23, Y+54	; 0x36
    3c94:	8f a9       	ldd	r24, Y+55	; 0x37
    3c96:	98 ad       	ldd	r25, Y+56	; 0x38
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	4a ef       	ldi	r20, 0xFA	; 250
    3c9e:	54 e4       	ldi	r21, 0x44	; 68
    3ca0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	89 ab       	std	Y+49, r24	; 0x31
    3caa:	9a ab       	std	Y+50, r25	; 0x32
    3cac:	ab ab       	std	Y+51, r26	; 0x33
    3cae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    3cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    3cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    3cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	5f e3       	ldi	r21, 0x3F	; 63
    3cc0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	2c f4       	brge	.+10     	; 0x3cd2 <LCD_vInit+0x1c2>
		__ticks = 1;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	98 ab       	std	Y+48, r25	; 0x30
    3cce:	8f a7       	std	Y+47, r24	; 0x2f
    3cd0:	3f c0       	rjmp	.+126    	; 0x3d50 <LCD_vInit+0x240>
	else if (__tmp > 65535)
    3cd2:	69 a9       	ldd	r22, Y+49	; 0x31
    3cd4:	7a a9       	ldd	r23, Y+50	; 0x32
    3cd6:	8b a9       	ldd	r24, Y+51	; 0x33
    3cd8:	9c a9       	ldd	r25, Y+52	; 0x34
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	3f ef       	ldi	r19, 0xFF	; 255
    3cde:	4f e7       	ldi	r20, 0x7F	; 127
    3ce0:	57 e4       	ldi	r21, 0x47	; 71
    3ce2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3ce6:	18 16       	cp	r1, r24
    3ce8:	4c f5       	brge	.+82     	; 0x3d3c <LCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cea:	6d a9       	ldd	r22, Y+53	; 0x35
    3cec:	7e a9       	ldd	r23, Y+54	; 0x36
    3cee:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf0:	98 ad       	ldd	r25, Y+56	; 0x38
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	bc 01       	movw	r22, r24
    3d04:	cd 01       	movw	r24, r26
    3d06:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	98 ab       	std	Y+48, r25	; 0x30
    3d10:	8f a7       	std	Y+47, r24	; 0x2f
    3d12:	0f c0       	rjmp	.+30     	; 0x3d32 <LCD_vInit+0x222>
    3d14:	88 ec       	ldi	r24, 0xC8	; 200
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9e a7       	std	Y+46, r25	; 0x2e
    3d1a:	8d a7       	std	Y+45, r24	; 0x2d
    3d1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_vInit+0x210>
    3d24:	9e a7       	std	Y+46, r25	; 0x2e
    3d26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	98 ab       	std	Y+48, r25	; 0x30
    3d30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d32:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d34:	98 a9       	ldd	r25, Y+48	; 0x30
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	69 f7       	brne	.-38     	; 0x3d14 <LCD_vInit+0x204>
    3d3a:	14 c0       	rjmp	.+40     	; 0x3d64 <LCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d3e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d40:	8b a9       	ldd	r24, Y+51	; 0x33
    3d42:	9c a9       	ldd	r25, Y+52	; 0x34
    3d44:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	98 ab       	std	Y+48, r25	; 0x30
    3d4e:	8f a7       	std	Y+47, r24	; 0x2f
    3d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d52:	98 a9       	ldd	r25, Y+48	; 0x30
    3d54:	9c a7       	std	Y+44, r25	; 0x2c
    3d56:	8b a7       	std	Y+43, r24	; 0x2b
    3d58:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <LCD_vInit+0x24c>
    3d60:	9c a7       	std	Y+44, r25	; 0x2c
    3d62:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	LCD_vSendCommand( FOUR_BITS ); // 8 Bit Mode ==> 0x38
    3d64:	88 e2       	ldi	r24, 0x28	; 40
    3d66:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	a0 e8       	ldi	r26, 0x80	; 128
    3d70:	bf e3       	ldi	r27, 0x3F	; 63
    3d72:	8f a3       	std	Y+39, r24	; 0x27
    3d74:	98 a7       	std	Y+40, r25	; 0x28
    3d76:	a9 a7       	std	Y+41, r26	; 0x29
    3d78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    3d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    3d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	4a ef       	ldi	r20, 0xFA	; 250
    3d88:	54 e4       	ldi	r21, 0x44	; 68
    3d8a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	8b a3       	std	Y+35, r24	; 0x23
    3d94:	9c a3       	std	Y+36, r25	; 0x24
    3d96:	ad a3       	std	Y+37, r26	; 0x25
    3d98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3da0:	9e a1       	ldd	r25, Y+38	; 0x26
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e8       	ldi	r20, 0x80	; 128
    3da8:	5f e3       	ldi	r21, 0x3F	; 63
    3daa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3dae:	88 23       	and	r24, r24
    3db0:	2c f4       	brge	.+10     	; 0x3dbc <LCD_vInit+0x2ac>
		__ticks = 1;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	9a a3       	std	Y+34, r25	; 0x22
    3db8:	89 a3       	std	Y+33, r24	; 0x21
    3dba:	3f c0       	rjmp	.+126    	; 0x3e3a <LCD_vInit+0x32a>
	else if (__tmp > 65535)
    3dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	4f e7       	ldi	r20, 0x7F	; 127
    3dca:	57 e4       	ldi	r21, 0x47	; 71
    3dcc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3dd0:	18 16       	cp	r1, r24
    3dd2:	4c f5       	brge	.+82     	; 0x3e26 <LCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd4:	6f a1       	ldd	r22, Y+39	; 0x27
    3dd6:	78 a5       	ldd	r23, Y+40	; 0x28
    3dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    3dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e2       	ldi	r20, 0x20	; 32
    3de2:	51 e4       	ldi	r21, 0x41	; 65
    3de4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	9a a3       	std	Y+34, r25	; 0x22
    3dfa:	89 a3       	std	Y+33, r24	; 0x21
    3dfc:	0f c0       	rjmp	.+30     	; 0x3e1c <LCD_vInit+0x30c>
    3dfe:	88 ec       	ldi	r24, 0xC8	; 200
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	98 a3       	std	Y+32, r25	; 0x20
    3e04:	8f 8f       	std	Y+31, r24	; 0x1f
    3e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e08:	98 a1       	ldd	r25, Y+32	; 0x20
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <LCD_vInit+0x2fa>
    3e0e:	98 a3       	std	Y+32, r25	; 0x20
    3e10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e12:	89 a1       	ldd	r24, Y+33	; 0x21
    3e14:	9a a1       	ldd	r25, Y+34	; 0x22
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	9a a3       	std	Y+34, r25	; 0x22
    3e1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	69 f7       	brne	.-38     	; 0x3dfe <LCD_vInit+0x2ee>
    3e24:	14 c0       	rjmp	.+40     	; 0x3e4e <LCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e26:	6b a1       	ldd	r22, Y+35	; 0x23
    3e28:	7c a1       	ldd	r23, Y+36	; 0x24
    3e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e2e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	9a a3       	std	Y+34, r25	; 0x22
    3e38:	89 a3       	std	Y+33, r24	; 0x21
    3e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e40:	8d 8f       	std	Y+29, r24	; 0x1d
    3e42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	f1 f7       	brne	.-4      	; 0x3e46 <LCD_vInit+0x336>
    3e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / ON) Control */
	LCD_vSendCommand( lcd_DOn_COn );
    3e4e:	8e e0       	ldi	r24, 0x0E	; 14
    3e50:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	a0 e8       	ldi	r26, 0x80	; 128
    3e5a:	bf e3       	ldi	r27, 0x3F	; 63
    3e5c:	89 8f       	std	Y+25, r24	; 0x19
    3e5e:	9a 8f       	std	Y+26, r25	; 0x1a
    3e60:	ab 8f       	std	Y+27, r26	; 0x1b
    3e62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e64:	69 8d       	ldd	r22, Y+25	; 0x19
    3e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	4a ef       	ldi	r20, 0xFA	; 250
    3e72:	54 e4       	ldi	r21, 0x44	; 68
    3e74:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	8d 8b       	std	Y+21, r24	; 0x15
    3e7e:	9e 8b       	std	Y+22, r25	; 0x16
    3e80:	af 8b       	std	Y+23, r26	; 0x17
    3e82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e84:	6d 89       	ldd	r22, Y+21	; 0x15
    3e86:	7e 89       	ldd	r23, Y+22	; 0x16
    3e88:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e8       	ldi	r20, 0x80	; 128
    3e92:	5f e3       	ldi	r21, 0x3F	; 63
    3e94:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3e98:	88 23       	and	r24, r24
    3e9a:	2c f4       	brge	.+10     	; 0x3ea6 <LCD_vInit+0x396>
		__ticks = 1;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	9c 8b       	std	Y+20, r25	; 0x14
    3ea2:	8b 8b       	std	Y+19, r24	; 0x13
    3ea4:	3f c0       	rjmp	.+126    	; 0x3f24 <LCD_vInit+0x414>
	else if (__tmp > 65535)
    3ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3eac:	98 8d       	ldd	r25, Y+24	; 0x18
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	3f ef       	ldi	r19, 0xFF	; 255
    3eb2:	4f e7       	ldi	r20, 0x7F	; 127
    3eb4:	57 e4       	ldi	r21, 0x47	; 71
    3eb6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3eba:	18 16       	cp	r1, r24
    3ebc:	4c f5       	brge	.+82     	; 0x3f10 <LCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    3ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e2       	ldi	r20, 0x20	; 32
    3ecc:	51 e4       	ldi	r21, 0x41	; 65
    3ece:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	bc 01       	movw	r22, r24
    3ed8:	cd 01       	movw	r24, r26
    3eda:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9c 8b       	std	Y+20, r25	; 0x14
    3ee4:	8b 8b       	std	Y+19, r24	; 0x13
    3ee6:	0f c0       	rjmp	.+30     	; 0x3f06 <LCD_vInit+0x3f6>
    3ee8:	88 ec       	ldi	r24, 0xC8	; 200
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	9a 8b       	std	Y+18, r25	; 0x12
    3eee:	89 8b       	std	Y+17, r24	; 0x11
    3ef0:	89 89       	ldd	r24, Y+17	; 0x11
    3ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <LCD_vInit+0x3e4>
    3ef8:	9a 8b       	std	Y+18, r25	; 0x12
    3efa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efc:	8b 89       	ldd	r24, Y+19	; 0x13
    3efe:	9c 89       	ldd	r25, Y+20	; 0x14
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	9c 8b       	std	Y+20, r25	; 0x14
    3f04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f06:	8b 89       	ldd	r24, Y+19	; 0x13
    3f08:	9c 89       	ldd	r25, Y+20	; 0x14
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	69 f7       	brne	.-38     	; 0x3ee8 <LCD_vInit+0x3d8>
    3f0e:	14 c0       	rjmp	.+40     	; 0x3f38 <LCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f10:	6d 89       	ldd	r22, Y+21	; 0x15
    3f12:	7e 89       	ldd	r23, Y+22	; 0x16
    3f14:	8f 89       	ldd	r24, Y+23	; 0x17
    3f16:	98 8d       	ldd	r25, Y+24	; 0x18
    3f18:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	9c 8b       	std	Y+20, r25	; 0x14
    3f22:	8b 8b       	std	Y+19, r24	; 0x13
    3f24:	8b 89       	ldd	r24, Y+19	; 0x13
    3f26:	9c 89       	ldd	r25, Y+20	; 0x14
    3f28:	98 8b       	std	Y+16, r25	; 0x10
    3f2a:	8f 87       	std	Y+15, r24	; 0x0f
    3f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f2e:	98 89       	ldd	r25, Y+16	; 0x10
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <LCD_vInit+0x420>
    3f34:	98 8b       	std	Y+16, r25	; 0x10
    3f36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* DISPLAY CLEAR */
	LCD_vClearScreen();
    3f38:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>

	/* ENTRY MODE  SET*/
	LCD_vSendCommand( lcd_EntryMode );
    3f3c:	86 e0       	ldi	r24, 0x06	; 6
    3f3e:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	a0 e8       	ldi	r26, 0x80	; 128
    3f48:	bf e3       	ldi	r27, 0x3F	; 63
    3f4a:	8b 87       	std	Y+11, r24	; 0x0b
    3f4c:	9c 87       	std	Y+12, r25	; 0x0c
    3f4e:	ad 87       	std	Y+13, r26	; 0x0d
    3f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	4a ef       	ldi	r20, 0xFA	; 250
    3f60:	54 e4       	ldi	r21, 0x44	; 68
    3f62:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	8f 83       	std	Y+7, r24	; 0x07
    3f6c:	98 87       	std	Y+8, r25	; 0x08
    3f6e:	a9 87       	std	Y+9, r26	; 0x09
    3f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f72:	6f 81       	ldd	r22, Y+7	; 0x07
    3f74:	78 85       	ldd	r23, Y+8	; 0x08
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	40 e8       	ldi	r20, 0x80	; 128
    3f80:	5f e3       	ldi	r21, 0x3F	; 63
    3f82:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3f86:	88 23       	and	r24, r24
    3f88:	2c f4       	brge	.+10     	; 0x3f94 <LCD_vInit+0x484>
		__ticks = 1;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	3f c0       	rjmp	.+126    	; 0x4012 <LCD_vInit+0x502>
	else if (__tmp > 65535)
    3f94:	6f 81       	ldd	r22, Y+7	; 0x07
    3f96:	78 85       	ldd	r23, Y+8	; 0x08
    3f98:	89 85       	ldd	r24, Y+9	; 0x09
    3f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	3f ef       	ldi	r19, 0xFF	; 255
    3fa0:	4f e7       	ldi	r20, 0x7F	; 127
    3fa2:	57 e4       	ldi	r21, 0x47	; 71
    3fa4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3fa8:	18 16       	cp	r1, r24
    3faa:	4c f5       	brge	.+82     	; 0x3ffe <LCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e2       	ldi	r20, 0x20	; 32
    3fba:	51 e4       	ldi	r21, 0x41	; 65
    3fbc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	cd 01       	movw	r24, r26
    3fc8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	9e 83       	std	Y+6, r25	; 0x06
    3fd2:	8d 83       	std	Y+5, r24	; 0x05
    3fd4:	0f c0       	rjmp	.+30     	; 0x3ff4 <LCD_vInit+0x4e4>
    3fd6:	88 ec       	ldi	r24, 0xC8	; 200
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	8b 83       	std	Y+3, r24	; 0x03
    3fde:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <LCD_vInit+0x4d2>
    3fe6:	9c 83       	std	Y+4, r25	; 0x04
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fea:	8d 81       	ldd	r24, Y+5	; 0x05
    3fec:	9e 81       	ldd	r25, Y+6	; 0x06
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	9e 83       	std	Y+6, r25	; 0x06
    3ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff8:	00 97       	sbiw	r24, 0x00	; 0
    3ffa:	69 f7       	brne	.-38     	; 0x3fd6 <LCD_vInit+0x4c6>
    3ffc:	14 c0       	rjmp	.+40     	; 0x4026 <LCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    4000:	78 85       	ldd	r23, Y+8	; 0x08
    4002:	89 85       	ldd	r24, Y+9	; 0x09
    4004:	9a 85       	ldd	r25, Y+10	; 0x0a
    4006:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	9e 83       	std	Y+6, r25	; 0x06
    4010:	8d 83       	std	Y+5, r24	; 0x05
    4012:	8d 81       	ldd	r24, Y+5	; 0x05
    4014:	9e 81       	ldd	r25, Y+6	; 0x06
    4016:	9a 83       	std	Y+2, r25	; 0x02
    4018:	89 83       	std	Y+1, r24	; 0x01
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <LCD_vInit+0x50e>
    4022:	9a 83       	std	Y+2, r25	; 0x02
    4024:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    4026:	ca 5b       	subi	r28, 0xBA	; 186
    4028:	df 4f       	sbci	r29, 0xFF	; 255
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	08 95       	ret

0000403e <LCD_vSendData>:
	//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




	void LCD_vSendData    ( u8 Copy_u8Data ){
    403e:	df 93       	push	r29
    4040:	cf 93       	push	r28
    4042:	cd b7       	in	r28, 0x3d	; 61
    4044:	de b7       	in	r29, 0x3e	; 62
    4046:	2f 97       	sbiw	r28, 0x0f	; 15
    4048:	0f b6       	in	r0, 0x3f	; 63
    404a:	f8 94       	cli
    404c:	de bf       	out	0x3e, r29	; 62
    404e:	0f be       	out	0x3f, r0	; 63
    4050:	cd bf       	out	0x3d, r28	; 61
    4052:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_vSendFEdge();

		//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif   LCD_MODE == 4

		DIO_vSetPinValue  ( LCD_CONTROL_PORT , LCD_RS , DIO_PIN_HIGH );
    4054:	82 e0       	ldi	r24, 0x02	; 2
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	41 e0       	ldi	r20, 0x01	; 1
    405a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
		DIO_vSetPinValue  ( LCD_CONTROL_PORT , LCD_RW , DIO_PIN_LOW  );
    405e:	82 e0       	ldi	r24, 0x02	; 2
    4060:	61 e0       	ldi	r22, 0x01	; 1
    4062:	40 e0       	ldi	r20, 0x00	; 0
    4064:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
		DIO_voidWriteHighNibbles (LCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    4068:	8f 85       	ldd	r24, Y+15	; 0x0f
    406a:	98 2f       	mov	r25, r24
    406c:	92 95       	swap	r25
    406e:	9f 70       	andi	r25, 0x0F	; 15
    4070:	82 e0       	ldi	r24, 0x02	; 2
    4072:	69 2f       	mov	r22, r25
    4074:	0e 94 e6 19 	call	0x33cc	; 0x33cc <DIO_voidWriteHighNibbles>
		LCD_vSendFEdge();
    4078:	0e 94 31 27 	call	0x4e62	; 0x4e62 <LCD_vSendFEdge>
		DIO_voidWriteHighNibbles (LCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    407c:	82 e0       	ldi	r24, 0x02	; 2
    407e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4080:	0e 94 e6 19 	call	0x33cc	; 0x33cc <DIO_voidWriteHighNibbles>
		LCD_vSendFEdge();
    4084:	0e 94 31 27 	call	0x4e62	; 0x4e62 <LCD_vSendFEdge>
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	a0 e8       	ldi	r26, 0x80	; 128
    408e:	bf e3       	ldi	r27, 0x3F	; 63
    4090:	8b 87       	std	Y+11, r24	; 0x0b
    4092:	9c 87       	std	Y+12, r25	; 0x0c
    4094:	ad 87       	std	Y+13, r26	; 0x0d
    4096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4098:	6b 85       	ldd	r22, Y+11	; 0x0b
    409a:	7c 85       	ldd	r23, Y+12	; 0x0c
    409c:	8d 85       	ldd	r24, Y+13	; 0x0d
    409e:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4a ef       	ldi	r20, 0xFA	; 250
    40a6:	54 e4       	ldi	r21, 0x44	; 68
    40a8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	8f 83       	std	Y+7, r24	; 0x07
    40b2:	98 87       	std	Y+8, r25	; 0x08
    40b4:	a9 87       	std	Y+9, r26	; 0x09
    40b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40b8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ba:	78 85       	ldd	r23, Y+8	; 0x08
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e8       	ldi	r20, 0x80	; 128
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    40cc:	88 23       	and	r24, r24
    40ce:	2c f4       	brge	.+10     	; 0x40da <LCD_vSendData+0x9c>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9e 83       	std	Y+6, r25	; 0x06
    40d6:	8d 83       	std	Y+5, r24	; 0x05
    40d8:	3f c0       	rjmp	.+126    	; 0x4158 <LCD_vSendData+0x11a>
	else if (__tmp > 65535)
    40da:	6f 81       	ldd	r22, Y+7	; 0x07
    40dc:	78 85       	ldd	r23, Y+8	; 0x08
    40de:	89 85       	ldd	r24, Y+9	; 0x09
    40e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	3f ef       	ldi	r19, 0xFF	; 255
    40e6:	4f e7       	ldi	r20, 0x7F	; 127
    40e8:	57 e4       	ldi	r21, 0x47	; 71
    40ea:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    40ee:	18 16       	cp	r1, r24
    40f0:	4c f5       	brge	.+82     	; 0x4144 <LCD_vSendData+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e2       	ldi	r20, 0x20	; 32
    4100:	51 e4       	ldi	r21, 0x41	; 65
    4102:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9e 83       	std	Y+6, r25	; 0x06
    4118:	8d 83       	std	Y+5, r24	; 0x05
    411a:	0f c0       	rjmp	.+30     	; 0x413a <LCD_vSendData+0xfc>
    411c:	88 ec       	ldi	r24, 0xC8	; 200
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	9c 83       	std	Y+4, r25	; 0x04
    4122:	8b 83       	std	Y+3, r24	; 0x03
    4124:	8b 81       	ldd	r24, Y+3	; 0x03
    4126:	9c 81       	ldd	r25, Y+4	; 0x04
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <LCD_vSendData+0xea>
    412c:	9c 83       	std	Y+4, r25	; 0x04
    412e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4130:	8d 81       	ldd	r24, Y+5	; 0x05
    4132:	9e 81       	ldd	r25, Y+6	; 0x06
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	9e 83       	std	Y+6, r25	; 0x06
    4138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413a:	8d 81       	ldd	r24, Y+5	; 0x05
    413c:	9e 81       	ldd	r25, Y+6	; 0x06
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	69 f7       	brne	.-38     	; 0x411c <LCD_vSendData+0xde>
    4142:	14 c0       	rjmp	.+40     	; 0x416c <LCD_vSendData+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	6f 81       	ldd	r22, Y+7	; 0x07
    4146:	78 85       	ldd	r23, Y+8	; 0x08
    4148:	89 85       	ldd	r24, Y+9	; 0x09
    414a:	9a 85       	ldd	r25, Y+10	; 0x0a
    414c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	9e 83       	std	Y+6, r25	; 0x06
    4156:	8d 83       	std	Y+5, r24	; 0x05
    4158:	8d 81       	ldd	r24, Y+5	; 0x05
    415a:	9e 81       	ldd	r25, Y+6	; 0x06
    415c:	9a 83       	std	Y+2, r25	; 0x02
    415e:	89 83       	std	Y+1, r24	; 0x01
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	9a 81       	ldd	r25, Y+2	; 0x02
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <LCD_vSendData+0x126>
    4168:	9a 83       	std	Y+2, r25	; 0x02
    416a:	89 83       	std	Y+1, r24	; 0x01

#endif

		_delay_ms(1);
	}
    416c:	2f 96       	adiw	r28, 0x0f	; 15
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	f8 94       	cli
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <LCD_vSendString>:


	void LCD_vSendString  (const u8 * Copy_u8ptrString ){
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	00 d0       	rcall	.+0      	; 0x4184 <LCD_vSendString+0x6>
    4184:	0f 92       	push	r0
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
    418a:	9b 83       	std	Y+3, r25	; 0x03
    418c:	8a 83       	std	Y+2, r24	; 0x02

		u8 LOC_u8Iterator = 0 ;
    418e:	19 82       	std	Y+1, r1	; 0x01
    4190:	0e c0       	rjmp	.+28     	; 0x41ae <LCD_vSendString+0x30>

		while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

			LCD_vSendData( Copy_u8ptrString[LOC_u8Iterator] );
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	28 2f       	mov	r18, r24
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	8a 81       	ldd	r24, Y+2	; 0x02
    419a:	9b 81       	ldd	r25, Y+3	; 0x03
    419c:	fc 01       	movw	r30, r24
    419e:	e2 0f       	add	r30, r18
    41a0:	f3 1f       	adc	r31, r19
    41a2:	80 81       	ld	r24, Z
    41a4:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			LOC_u8Iterator++ ;
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	8f 5f       	subi	r24, 0xFF	; 255
    41ac:	89 83       	std	Y+1, r24	; 0x01

	void LCD_vSendString  (const u8 * Copy_u8ptrString ){

		u8 LOC_u8Iterator = 0 ;

		while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	28 2f       	mov	r18, r24
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	8a 81       	ldd	r24, Y+2	; 0x02
    41b6:	9b 81       	ldd	r25, Y+3	; 0x03
    41b8:	fc 01       	movw	r30, r24
    41ba:	e2 0f       	add	r30, r18
    41bc:	f3 1f       	adc	r31, r19
    41be:	80 81       	ld	r24, Z
    41c0:	88 23       	and	r24, r24
    41c2:	39 f7       	brne	.-50     	; 0x4192 <LCD_vSendString+0x14>
			LCD_vSendData( Copy_u8ptrString[LOC_u8Iterator] );
			LOC_u8Iterator++ ;

		}

	}
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <LCD_vSendCommand>:
	void LCD_vSendCommand ( u8 Copy_u8Command ){
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
    41d8:	2f 97       	sbiw	r28, 0x0f	; 15
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_vSendFEdge();

		//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif   LCD_MODE == 4

		DIO_vSetPinValue  ( LCD_CONTROL_PORT , LCD_RS , DIO_PIN_LOW  );
    41e6:	82 e0       	ldi	r24, 0x02	; 2
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
		DIO_vSetPinValue  ( LCD_CONTROL_PORT , LCD_RW , DIO_PIN_LOW  );
    41f0:	82 e0       	ldi	r24, 0x02	; 2
    41f2:	61 e0       	ldi	r22, 0x01	; 1
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
		DIO_voidWriteHighNibbles (LCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    41fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fc:	98 2f       	mov	r25, r24
    41fe:	92 95       	swap	r25
    4200:	9f 70       	andi	r25, 0x0F	; 15
    4202:	82 e0       	ldi	r24, 0x02	; 2
    4204:	69 2f       	mov	r22, r25
    4206:	0e 94 e6 19 	call	0x33cc	; 0x33cc <DIO_voidWriteHighNibbles>
		LCD_vSendFEdge();
    420a:	0e 94 31 27 	call	0x4e62	; 0x4e62 <LCD_vSendFEdge>
		DIO_voidWriteHighNibbles (LCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	6f 85       	ldd	r22, Y+15	; 0x0f
    4212:	0e 94 e6 19 	call	0x33cc	; 0x33cc <DIO_voidWriteHighNibbles>
		LCD_vSendFEdge();
    4216:	0e 94 31 27 	call	0x4e62	; 0x4e62 <LCD_vSendFEdge>
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	a0 e8       	ldi	r26, 0x80	; 128
    4220:	bf e3       	ldi	r27, 0x3F	; 63
    4222:	8b 87       	std	Y+11, r24	; 0x0b
    4224:	9c 87       	std	Y+12, r25	; 0x0c
    4226:	ad 87       	std	Y+13, r26	; 0x0d
    4228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422a:	6b 85       	ldd	r22, Y+11	; 0x0b
    422c:	7c 85       	ldd	r23, Y+12	; 0x0c
    422e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4230:	9e 85       	ldd	r25, Y+14	; 0x0e
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	4a ef       	ldi	r20, 0xFA	; 250
    4238:	54 e4       	ldi	r21, 0x44	; 68
    423a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	8f 83       	std	Y+7, r24	; 0x07
    4244:	98 87       	std	Y+8, r25	; 0x08
    4246:	a9 87       	std	Y+9, r26	; 0x09
    4248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e8       	ldi	r20, 0x80	; 128
    4258:	5f e3       	ldi	r21, 0x3F	; 63
    425a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    425e:	88 23       	and	r24, r24
    4260:	2c f4       	brge	.+10     	; 0x426c <LCD_vSendCommand+0x9c>
		__ticks = 1;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9e 83       	std	Y+6, r25	; 0x06
    4268:	8d 83       	std	Y+5, r24	; 0x05
    426a:	3f c0       	rjmp	.+126    	; 0x42ea <LCD_vSendCommand+0x11a>
	else if (__tmp > 65535)
    426c:	6f 81       	ldd	r22, Y+7	; 0x07
    426e:	78 85       	ldd	r23, Y+8	; 0x08
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	9a 85       	ldd	r25, Y+10	; 0x0a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	3f ef       	ldi	r19, 0xFF	; 255
    4278:	4f e7       	ldi	r20, 0x7F	; 127
    427a:	57 e4       	ldi	r21, 0x47	; 71
    427c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4280:	18 16       	cp	r1, r24
    4282:	4c f5       	brge	.+82     	; 0x42d6 <LCD_vSendCommand+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4284:	6b 85       	ldd	r22, Y+11	; 0x0b
    4286:	7c 85       	ldd	r23, Y+12	; 0x0c
    4288:	8d 85       	ldd	r24, Y+13	; 0x0d
    428a:	9e 85       	ldd	r25, Y+14	; 0x0e
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e2       	ldi	r20, 0x20	; 32
    4292:	51 e4       	ldi	r21, 0x41	; 65
    4294:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	0f c0       	rjmp	.+30     	; 0x42cc <LCD_vSendCommand+0xfc>
    42ae:	88 ec       	ldi	r24, 0xC8	; 200
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	9c 83       	std	Y+4, r25	; 0x04
    42b4:	8b 83       	std	Y+3, r24	; 0x03
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <LCD_vSendCommand+0xea>
    42be:	9c 83       	std	Y+4, r25	; 0x04
    42c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42cc:	8d 81       	ldd	r24, Y+5	; 0x05
    42ce:	9e 81       	ldd	r25, Y+6	; 0x06
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	69 f7       	brne	.-38     	; 0x42ae <LCD_vSendCommand+0xde>
    42d4:	14 c0       	rjmp	.+40     	; 0x42fe <LCD_vSendCommand+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d6:	6f 81       	ldd	r22, Y+7	; 0x07
    42d8:	78 85       	ldd	r23, Y+8	; 0x08
    42da:	89 85       	ldd	r24, Y+9	; 0x09
    42dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42de:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 83       	std	Y+5, r24	; 0x05
    42ea:	8d 81       	ldd	r24, Y+5	; 0x05
    42ec:	9e 81       	ldd	r25, Y+6	; 0x06
    42ee:	9a 83       	std	Y+2, r25	; 0x02
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <LCD_vSendCommand+0x126>
    42fa:	9a 83       	std	Y+2, r25	; 0x02
    42fc:	89 83       	std	Y+1, r24	; 0x01

#endif

		_delay_ms(1);

	}
    42fe:	2f 96       	adiw	r28, 0x0f	; 15
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	08 95       	ret

00004310 <LCD_vSendNumber>:

	void LCD_vSendNumber   ( u64 Copy_u64Number    ){
    4310:	af 92       	push	r10
    4312:	bf 92       	push	r11
    4314:	cf 92       	push	r12
    4316:	df 92       	push	r13
    4318:	ef 92       	push	r14
    431a:	ff 92       	push	r15
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
    4320:	df 93       	push	r29
    4322:	cf 93       	push	r28
    4324:	cd b7       	in	r28, 0x3d	; 61
    4326:	de b7       	in	r29, 0x3e	; 62
    4328:	c6 56       	subi	r28, 0x66	; 102
    432a:	d0 40       	sbci	r29, 0x00	; 0
    432c:	0f b6       	in	r0, 0x3f	; 63
    432e:	f8 94       	cli
    4330:	de bf       	out	0x3e, r29	; 62
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	cd bf       	out	0x3d, r28	; 61
    4336:	29 87       	std	Y+9, r18	; 0x09
    4338:	3a 87       	std	Y+10, r19	; 0x0a
    433a:	4b 87       	std	Y+11, r20	; 0x0b
    433c:	5c 87       	std	Y+12, r21	; 0x0c
    433e:	6d 87       	std	Y+13, r22	; 0x0d
    4340:	7e 87       	std	Y+14, r23	; 0x0e
    4342:	8f 87       	std	Y+15, r24	; 0x0f
    4344:	98 8b       	std	Y+16, r25	; 0x10

		u64 LOC_u64Reversed = 1 ;
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	89 83       	std	Y+1, r24	; 0x01
    434a:	1a 82       	std	Y+2, r1	; 0x02
    434c:	1b 82       	std	Y+3, r1	; 0x03
    434e:	1c 82       	std	Y+4, r1	; 0x04
    4350:	1d 82       	std	Y+5, r1	; 0x05
    4352:	1e 82       	std	Y+6, r1	; 0x06
    4354:	1f 82       	std	Y+7, r1	; 0x07
    4356:	18 86       	std	Y+8, r1	; 0x08

		if( Copy_u64Number == 0 ){ LCD_vSendData('0'); }
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	89 2b       	or	r24, r25
    435e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4360:	89 2b       	or	r24, r25
    4362:	9c 85       	ldd	r25, Y+12	; 0x0c
    4364:	89 2b       	or	r24, r25
    4366:	9d 85       	ldd	r25, Y+13	; 0x0d
    4368:	89 2b       	or	r24, r25
    436a:	9e 85       	ldd	r25, Y+14	; 0x0e
    436c:	89 2b       	or	r24, r25
    436e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4370:	89 2b       	or	r24, r25
    4372:	98 89       	ldd	r25, Y+16	; 0x10
    4374:	89 2b       	or	r24, r25
    4376:	88 23       	and	r24, r24
    4378:	09 f0       	breq	.+2      	; 0x437c <LCD_vSendNumber+0x6c>
    437a:	62 c3       	rjmp	.+1732   	; 0x4a40 <LCD_vSendNumber+0x730>
    437c:	80 e3       	ldi	r24, 0x30	; 48
    437e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    4382:	ef c3       	rjmp	.+2014   	; 0x4b62 <LCD_vSendNumber+0x852>

		else{

			while( Copy_u64Number != 0 ){

				LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    4384:	29 81       	ldd	r18, Y+1	; 0x01
    4386:	3a 81       	ldd	r19, Y+2	; 0x02
    4388:	4b 81       	ldd	r20, Y+3	; 0x03
    438a:	5c 81       	ldd	r21, Y+4	; 0x04
    438c:	6d 81       	ldd	r22, Y+5	; 0x05
    438e:	7e 81       	ldd	r23, Y+6	; 0x06
    4390:	8f 81       	ldd	r24, Y+7	; 0x07
    4392:	98 85       	ldd	r25, Y+8	; 0x08
    4394:	a2 2e       	mov	r10, r18
    4396:	b3 2e       	mov	r11, r19
    4398:	c4 2e       	mov	r12, r20
    439a:	d5 2e       	mov	r13, r21
    439c:	e6 2e       	mov	r14, r22
    439e:	f7 2e       	mov	r15, r23
    43a0:	08 2f       	mov	r16, r24
    43a2:	19 2f       	mov	r17, r25
    43a4:	2a 2d       	mov	r18, r10
    43a6:	3b 2d       	mov	r19, r11
    43a8:	4c 2d       	mov	r20, r12
    43aa:	5d 2d       	mov	r21, r13
    43ac:	6e 2d       	mov	r22, r14
    43ae:	7f 2d       	mov	r23, r15
    43b0:	80 2f       	mov	r24, r16
    43b2:	91 2f       	mov	r25, r17
    43b4:	01 e0       	ldi	r16, 0x01	; 1
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    43ba:	29 a3       	std	Y+33, r18	; 0x21
    43bc:	3a a3       	std	Y+34, r19	; 0x22
    43be:	4b a3       	std	Y+35, r20	; 0x23
    43c0:	5c a3       	std	Y+36, r21	; 0x24
    43c2:	6d a3       	std	Y+37, r22	; 0x25
    43c4:	7e a3       	std	Y+38, r23	; 0x26
    43c6:	8f a3       	std	Y+39, r24	; 0x27
    43c8:	98 a7       	std	Y+40, r25	; 0x28
    43ca:	29 a1       	ldd	r18, Y+33	; 0x21
    43cc:	3a a1       	ldd	r19, Y+34	; 0x22
    43ce:	4b a1       	ldd	r20, Y+35	; 0x23
    43d0:	5c a1       	ldd	r21, Y+36	; 0x24
    43d2:	6d a1       	ldd	r22, Y+37	; 0x25
    43d4:	7e a1       	ldd	r23, Y+38	; 0x26
    43d6:	8f a1       	ldd	r24, Y+39	; 0x27
    43d8:	98 a5       	ldd	r25, Y+40	; 0x28
    43da:	02 e0       	ldi	r16, 0x02	; 2
    43dc:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    43e0:	29 a7       	std	Y+41, r18	; 0x29
    43e2:	3a a7       	std	Y+42, r19	; 0x2a
    43e4:	4b a7       	std	Y+43, r20	; 0x2b
    43e6:	5c a7       	std	Y+44, r21	; 0x2c
    43e8:	6d a7       	std	Y+45, r22	; 0x2d
    43ea:	7e a7       	std	Y+46, r23	; 0x2e
    43ec:	8f a7       	std	Y+47, r24	; 0x2f
    43ee:	98 ab       	std	Y+48, r25	; 0x30
    43f0:	89 a1       	ldd	r24, Y+33	; 0x21
    43f2:	99 a5       	ldd	r25, Y+41	; 0x29
    43f4:	89 0f       	add	r24, r25
    43f6:	89 ab       	std	Y+49, r24	; 0x31
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	89 af       	std	Y+57, r24	; 0x39
    43fc:	99 a9       	ldd	r25, Y+49	; 0x31
    43fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4400:	98 17       	cp	r25, r24
    4402:	08 f0       	brcs	.+2      	; 0x4406 <LCD_vSendNumber+0xf6>
    4404:	19 ae       	std	Y+57, r1	; 0x39
    4406:	9a a1       	ldd	r25, Y+34	; 0x22
    4408:	8a a5       	ldd	r24, Y+42	; 0x2a
    440a:	98 0f       	add	r25, r24
    440c:	9a ab       	std	Y+50, r25	; 0x32
    440e:	91 e0       	ldi	r25, 0x01	; 1
    4410:	9a af       	std	Y+58, r25	; 0x3a
    4412:	8a a9       	ldd	r24, Y+50	; 0x32
    4414:	9a a1       	ldd	r25, Y+34	; 0x22
    4416:	89 17       	cp	r24, r25
    4418:	08 f0       	brcs	.+2      	; 0x441c <LCD_vSendNumber+0x10c>
    441a:	1a ae       	std	Y+58, r1	; 0x3a
    441c:	89 ad       	ldd	r24, Y+57	; 0x39
    441e:	9a a9       	ldd	r25, Y+50	; 0x32
    4420:	89 0f       	add	r24, r25
    4422:	8b af       	std	Y+59, r24	; 0x3b
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	8c af       	std	Y+60, r24	; 0x3c
    4428:	9b ad       	ldd	r25, Y+59	; 0x3b
    442a:	8a a9       	ldd	r24, Y+50	; 0x32
    442c:	98 17       	cp	r25, r24
    442e:	08 f0       	brcs	.+2      	; 0x4432 <LCD_vSendNumber+0x122>
    4430:	1c ae       	std	Y+60, r1	; 0x3c
    4432:	9a ad       	ldd	r25, Y+58	; 0x3a
    4434:	8c ad       	ldd	r24, Y+60	; 0x3c
    4436:	98 2b       	or	r25, r24
    4438:	9a af       	std	Y+58, r25	; 0x3a
    443a:	9b ad       	ldd	r25, Y+59	; 0x3b
    443c:	9a ab       	std	Y+50, r25	; 0x32
    443e:	8b a1       	ldd	r24, Y+35	; 0x23
    4440:	9b a5       	ldd	r25, Y+43	; 0x2b
    4442:	89 0f       	add	r24, r25
    4444:	8b ab       	std	Y+51, r24	; 0x33
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	8d af       	std	Y+61, r24	; 0x3d
    444a:	9b a9       	ldd	r25, Y+51	; 0x33
    444c:	8b a1       	ldd	r24, Y+35	; 0x23
    444e:	98 17       	cp	r25, r24
    4450:	08 f0       	brcs	.+2      	; 0x4454 <LCD_vSendNumber+0x144>
    4452:	1d ae       	std	Y+61, r1	; 0x3d
    4454:	9a ad       	ldd	r25, Y+58	; 0x3a
    4456:	8b a9       	ldd	r24, Y+51	; 0x33
    4458:	98 0f       	add	r25, r24
    445a:	9e af       	std	Y+62, r25	; 0x3e
    445c:	91 e0       	ldi	r25, 0x01	; 1
    445e:	9f af       	std	Y+63, r25	; 0x3f
    4460:	8e ad       	ldd	r24, Y+62	; 0x3e
    4462:	9b a9       	ldd	r25, Y+51	; 0x33
    4464:	89 17       	cp	r24, r25
    4466:	08 f0       	brcs	.+2      	; 0x446a <LCD_vSendNumber+0x15a>
    4468:	1f ae       	std	Y+63, r1	; 0x3f
    446a:	8d ad       	ldd	r24, Y+61	; 0x3d
    446c:	9f ad       	ldd	r25, Y+63	; 0x3f
    446e:	89 2b       	or	r24, r25
    4470:	8d af       	std	Y+61, r24	; 0x3d
    4472:	8e ad       	ldd	r24, Y+62	; 0x3e
    4474:	8b ab       	std	Y+51, r24	; 0x33
    4476:	9c a1       	ldd	r25, Y+36	; 0x24
    4478:	8c a5       	ldd	r24, Y+44	; 0x2c
    447a:	98 0f       	add	r25, r24
    447c:	9c ab       	std	Y+52, r25	; 0x34
    447e:	91 e0       	ldi	r25, 0x01	; 1
    4480:	21 96       	adiw	r28, 0x01	; 1
    4482:	9f af       	std	Y+63, r25	; 0x3f
    4484:	21 97       	sbiw	r28, 0x01	; 1
    4486:	8c a9       	ldd	r24, Y+52	; 0x34
    4488:	9c a1       	ldd	r25, Y+36	; 0x24
    448a:	89 17       	cp	r24, r25
    448c:	18 f0       	brcs	.+6      	; 0x4494 <LCD_vSendNumber+0x184>
    448e:	21 96       	adiw	r28, 0x01	; 1
    4490:	1f ae       	std	Y+63, r1	; 0x3f
    4492:	21 97       	sbiw	r28, 0x01	; 1
    4494:	8d ad       	ldd	r24, Y+61	; 0x3d
    4496:	9c a9       	ldd	r25, Y+52	; 0x34
    4498:	89 0f       	add	r24, r25
    449a:	22 96       	adiw	r28, 0x02	; 2
    449c:	8f af       	std	Y+63, r24	; 0x3f
    449e:	22 97       	sbiw	r28, 0x02	; 2
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	23 96       	adiw	r28, 0x03	; 3
    44a4:	8f af       	std	Y+63, r24	; 0x3f
    44a6:	23 97       	sbiw	r28, 0x03	; 3
    44a8:	22 96       	adiw	r28, 0x02	; 2
    44aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    44ac:	22 97       	sbiw	r28, 0x02	; 2
    44ae:	8c a9       	ldd	r24, Y+52	; 0x34
    44b0:	98 17       	cp	r25, r24
    44b2:	18 f0       	brcs	.+6      	; 0x44ba <LCD_vSendNumber+0x1aa>
    44b4:	23 96       	adiw	r28, 0x03	; 3
    44b6:	1f ae       	std	Y+63, r1	; 0x3f
    44b8:	23 97       	sbiw	r28, 0x03	; 3
    44ba:	21 96       	adiw	r28, 0x01	; 1
    44bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    44be:	21 97       	sbiw	r28, 0x01	; 1
    44c0:	23 96       	adiw	r28, 0x03	; 3
    44c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    44c4:	23 97       	sbiw	r28, 0x03	; 3
    44c6:	98 2b       	or	r25, r24
    44c8:	21 96       	adiw	r28, 0x01	; 1
    44ca:	9f af       	std	Y+63, r25	; 0x3f
    44cc:	21 97       	sbiw	r28, 0x01	; 1
    44ce:	22 96       	adiw	r28, 0x02	; 2
    44d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    44d2:	22 97       	sbiw	r28, 0x02	; 2
    44d4:	9c ab       	std	Y+52, r25	; 0x34
    44d6:	8d a1       	ldd	r24, Y+37	; 0x25
    44d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    44da:	89 0f       	add	r24, r25
    44dc:	8d ab       	std	Y+53, r24	; 0x35
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	24 96       	adiw	r28, 0x04	; 4
    44e2:	8f af       	std	Y+63, r24	; 0x3f
    44e4:	24 97       	sbiw	r28, 0x04	; 4
    44e6:	9d a9       	ldd	r25, Y+53	; 0x35
    44e8:	8d a1       	ldd	r24, Y+37	; 0x25
    44ea:	98 17       	cp	r25, r24
    44ec:	18 f0       	brcs	.+6      	; 0x44f4 <LCD_vSendNumber+0x1e4>
    44ee:	24 96       	adiw	r28, 0x04	; 4
    44f0:	1f ae       	std	Y+63, r1	; 0x3f
    44f2:	24 97       	sbiw	r28, 0x04	; 4
    44f4:	21 96       	adiw	r28, 0x01	; 1
    44f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    44f8:	21 97       	sbiw	r28, 0x01	; 1
    44fa:	8d a9       	ldd	r24, Y+53	; 0x35
    44fc:	98 0f       	add	r25, r24
    44fe:	25 96       	adiw	r28, 0x05	; 5
    4500:	9f af       	std	Y+63, r25	; 0x3f
    4502:	25 97       	sbiw	r28, 0x05	; 5
    4504:	91 e0       	ldi	r25, 0x01	; 1
    4506:	26 96       	adiw	r28, 0x06	; 6
    4508:	9f af       	std	Y+63, r25	; 0x3f
    450a:	26 97       	sbiw	r28, 0x06	; 6
    450c:	25 96       	adiw	r28, 0x05	; 5
    450e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4510:	25 97       	sbiw	r28, 0x05	; 5
    4512:	9d a9       	ldd	r25, Y+53	; 0x35
    4514:	89 17       	cp	r24, r25
    4516:	18 f0       	brcs	.+6      	; 0x451e <LCD_vSendNumber+0x20e>
    4518:	26 96       	adiw	r28, 0x06	; 6
    451a:	1f ae       	std	Y+63, r1	; 0x3f
    451c:	26 97       	sbiw	r28, 0x06	; 6
    451e:	24 96       	adiw	r28, 0x04	; 4
    4520:	8f ad       	ldd	r24, Y+63	; 0x3f
    4522:	24 97       	sbiw	r28, 0x04	; 4
    4524:	26 96       	adiw	r28, 0x06	; 6
    4526:	9f ad       	ldd	r25, Y+63	; 0x3f
    4528:	26 97       	sbiw	r28, 0x06	; 6
    452a:	89 2b       	or	r24, r25
    452c:	24 96       	adiw	r28, 0x04	; 4
    452e:	8f af       	std	Y+63, r24	; 0x3f
    4530:	24 97       	sbiw	r28, 0x04	; 4
    4532:	25 96       	adiw	r28, 0x05	; 5
    4534:	8f ad       	ldd	r24, Y+63	; 0x3f
    4536:	25 97       	sbiw	r28, 0x05	; 5
    4538:	8d ab       	std	Y+53, r24	; 0x35
    453a:	9e a1       	ldd	r25, Y+38	; 0x26
    453c:	8e a5       	ldd	r24, Y+46	; 0x2e
    453e:	98 0f       	add	r25, r24
    4540:	9e ab       	std	Y+54, r25	; 0x36
    4542:	91 e0       	ldi	r25, 0x01	; 1
    4544:	27 96       	adiw	r28, 0x07	; 7
    4546:	9f af       	std	Y+63, r25	; 0x3f
    4548:	27 97       	sbiw	r28, 0x07	; 7
    454a:	8e a9       	ldd	r24, Y+54	; 0x36
    454c:	9e a1       	ldd	r25, Y+38	; 0x26
    454e:	89 17       	cp	r24, r25
    4550:	18 f0       	brcs	.+6      	; 0x4558 <LCD_vSendNumber+0x248>
    4552:	27 96       	adiw	r28, 0x07	; 7
    4554:	1f ae       	std	Y+63, r1	; 0x3f
    4556:	27 97       	sbiw	r28, 0x07	; 7
    4558:	24 96       	adiw	r28, 0x04	; 4
    455a:	8f ad       	ldd	r24, Y+63	; 0x3f
    455c:	24 97       	sbiw	r28, 0x04	; 4
    455e:	9e a9       	ldd	r25, Y+54	; 0x36
    4560:	89 0f       	add	r24, r25
    4562:	28 96       	adiw	r28, 0x08	; 8
    4564:	8f af       	std	Y+63, r24	; 0x3f
    4566:	28 97       	sbiw	r28, 0x08	; 8
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	29 96       	adiw	r28, 0x09	; 9
    456c:	8f af       	std	Y+63, r24	; 0x3f
    456e:	29 97       	sbiw	r28, 0x09	; 9
    4570:	28 96       	adiw	r28, 0x08	; 8
    4572:	9f ad       	ldd	r25, Y+63	; 0x3f
    4574:	28 97       	sbiw	r28, 0x08	; 8
    4576:	8e a9       	ldd	r24, Y+54	; 0x36
    4578:	98 17       	cp	r25, r24
    457a:	18 f0       	brcs	.+6      	; 0x4582 <LCD_vSendNumber+0x272>
    457c:	29 96       	adiw	r28, 0x09	; 9
    457e:	1f ae       	std	Y+63, r1	; 0x3f
    4580:	29 97       	sbiw	r28, 0x09	; 9
    4582:	27 96       	adiw	r28, 0x07	; 7
    4584:	9f ad       	ldd	r25, Y+63	; 0x3f
    4586:	27 97       	sbiw	r28, 0x07	; 7
    4588:	29 96       	adiw	r28, 0x09	; 9
    458a:	8f ad       	ldd	r24, Y+63	; 0x3f
    458c:	29 97       	sbiw	r28, 0x09	; 9
    458e:	98 2b       	or	r25, r24
    4590:	27 96       	adiw	r28, 0x07	; 7
    4592:	9f af       	std	Y+63, r25	; 0x3f
    4594:	27 97       	sbiw	r28, 0x07	; 7
    4596:	28 96       	adiw	r28, 0x08	; 8
    4598:	9f ad       	ldd	r25, Y+63	; 0x3f
    459a:	28 97       	sbiw	r28, 0x08	; 8
    459c:	9e ab       	std	Y+54, r25	; 0x36
    459e:	8f a1       	ldd	r24, Y+39	; 0x27
    45a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    45a2:	89 0f       	add	r24, r25
    45a4:	8f ab       	std	Y+55, r24	; 0x37
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	2a 96       	adiw	r28, 0x0a	; 10
    45aa:	8f af       	std	Y+63, r24	; 0x3f
    45ac:	2a 97       	sbiw	r28, 0x0a	; 10
    45ae:	9f a9       	ldd	r25, Y+55	; 0x37
    45b0:	8f a1       	ldd	r24, Y+39	; 0x27
    45b2:	98 17       	cp	r25, r24
    45b4:	18 f0       	brcs	.+6      	; 0x45bc <LCD_vSendNumber+0x2ac>
    45b6:	2a 96       	adiw	r28, 0x0a	; 10
    45b8:	1f ae       	std	Y+63, r1	; 0x3f
    45ba:	2a 97       	sbiw	r28, 0x0a	; 10
    45bc:	27 96       	adiw	r28, 0x07	; 7
    45be:	9f ad       	ldd	r25, Y+63	; 0x3f
    45c0:	27 97       	sbiw	r28, 0x07	; 7
    45c2:	8f a9       	ldd	r24, Y+55	; 0x37
    45c4:	98 0f       	add	r25, r24
    45c6:	2b 96       	adiw	r28, 0x0b	; 11
    45c8:	9f af       	std	Y+63, r25	; 0x3f
    45ca:	2b 97       	sbiw	r28, 0x0b	; 11
    45cc:	91 e0       	ldi	r25, 0x01	; 1
    45ce:	2c 96       	adiw	r28, 0x0c	; 12
    45d0:	9f af       	std	Y+63, r25	; 0x3f
    45d2:	2c 97       	sbiw	r28, 0x0c	; 12
    45d4:	2b 96       	adiw	r28, 0x0b	; 11
    45d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    45d8:	2b 97       	sbiw	r28, 0x0b	; 11
    45da:	9f a9       	ldd	r25, Y+55	; 0x37
    45dc:	89 17       	cp	r24, r25
    45de:	18 f0       	brcs	.+6      	; 0x45e6 <LCD_vSendNumber+0x2d6>
    45e0:	2c 96       	adiw	r28, 0x0c	; 12
    45e2:	1f ae       	std	Y+63, r1	; 0x3f
    45e4:	2c 97       	sbiw	r28, 0x0c	; 12
    45e6:	2a 96       	adiw	r28, 0x0a	; 10
    45e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    45ea:	2a 97       	sbiw	r28, 0x0a	; 10
    45ec:	2c 96       	adiw	r28, 0x0c	; 12
    45ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    45f0:	2c 97       	sbiw	r28, 0x0c	; 12
    45f2:	89 2b       	or	r24, r25
    45f4:	2a 96       	adiw	r28, 0x0a	; 10
    45f6:	8f af       	std	Y+63, r24	; 0x3f
    45f8:	2a 97       	sbiw	r28, 0x0a	; 10
    45fa:	2b 96       	adiw	r28, 0x0b	; 11
    45fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    45fe:	2b 97       	sbiw	r28, 0x0b	; 11
    4600:	8f ab       	std	Y+55, r24	; 0x37
    4602:	98 a5       	ldd	r25, Y+40	; 0x28
    4604:	88 a9       	ldd	r24, Y+48	; 0x30
    4606:	98 0f       	add	r25, r24
    4608:	98 af       	std	Y+56, r25	; 0x38
    460a:	2a 96       	adiw	r28, 0x0a	; 10
    460c:	8f ad       	ldd	r24, Y+63	; 0x3f
    460e:	2a 97       	sbiw	r28, 0x0a	; 10
    4610:	98 ad       	ldd	r25, Y+56	; 0x38
    4612:	89 0f       	add	r24, r25
    4614:	88 af       	std	Y+56, r24	; 0x38
    4616:	89 a9       	ldd	r24, Y+49	; 0x31
    4618:	89 8f       	std	Y+25, r24	; 0x19
    461a:	9a a9       	ldd	r25, Y+50	; 0x32
    461c:	9a 8f       	std	Y+26, r25	; 0x1a
    461e:	8b a9       	ldd	r24, Y+51	; 0x33
    4620:	8b 8f       	std	Y+27, r24	; 0x1b
    4622:	9c a9       	ldd	r25, Y+52	; 0x34
    4624:	9c 8f       	std	Y+28, r25	; 0x1c
    4626:	8d a9       	ldd	r24, Y+53	; 0x35
    4628:	8d 8f       	std	Y+29, r24	; 0x1d
    462a:	9e a9       	ldd	r25, Y+54	; 0x36
    462c:	9e 8f       	std	Y+30, r25	; 0x1e
    462e:	8f a9       	ldd	r24, Y+55	; 0x37
    4630:	8f 8f       	std	Y+31, r24	; 0x1f
    4632:	98 ad       	ldd	r25, Y+56	; 0x38
    4634:	98 a3       	std	Y+32, r25	; 0x20
    4636:	a9 84       	ldd	r10, Y+9	; 0x09
    4638:	ba 84       	ldd	r11, Y+10	; 0x0a
    463a:	cb 84       	ldd	r12, Y+11	; 0x0b
    463c:	dc 84       	ldd	r13, Y+12	; 0x0c
    463e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4640:	fe 84       	ldd	r15, Y+14	; 0x0e
    4642:	0f 85       	ldd	r16, Y+15	; 0x0f
    4644:	18 89       	ldd	r17, Y+16	; 0x10
    4646:	2a 2d       	mov	r18, r10
    4648:	3b 2d       	mov	r19, r11
    464a:	4c 2d       	mov	r20, r12
    464c:	5d 2d       	mov	r21, r13
    464e:	6e 2d       	mov	r22, r14
    4650:	7f 2d       	mov	r23, r15
    4652:	80 2f       	mov	r24, r16
    4654:	91 2f       	mov	r25, r17
    4656:	0f 2e       	mov	r0, r31
    4658:	fa e0       	ldi	r31, 0x0A	; 10
    465a:	af 2e       	mov	r10, r31
    465c:	f0 2d       	mov	r31, r0
    465e:	bb 24       	eor	r11, r11
    4660:	cc 24       	eor	r12, r12
    4662:	dd 24       	eor	r13, r13
    4664:	ee 24       	eor	r14, r14
    4666:	ff 24       	eor	r15, r15
    4668:	00 e0       	ldi	r16, 0x00	; 0
    466a:	10 e0       	ldi	r17, 0x00	; 0
    466c:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    4670:	a2 2e       	mov	r10, r18
    4672:	b3 2e       	mov	r11, r19
    4674:	c4 2e       	mov	r12, r20
    4676:	d5 2e       	mov	r13, r21
    4678:	e6 2e       	mov	r14, r22
    467a:	f7 2e       	mov	r15, r23
    467c:	08 2f       	mov	r16, r24
    467e:	19 2f       	mov	r17, r25
    4680:	a9 8a       	std	Y+17, r10	; 0x11
    4682:	ba 8a       	std	Y+18, r11	; 0x12
    4684:	cb 8a       	std	Y+19, r12	; 0x13
    4686:	dc 8a       	std	Y+20, r13	; 0x14
    4688:	ed 8a       	std	Y+21, r14	; 0x15
    468a:	fe 8a       	std	Y+22, r15	; 0x16
    468c:	0f 8b       	std	Y+23, r16	; 0x17
    468e:	18 8f       	std	Y+24, r17	; 0x18
    4690:	89 8d       	ldd	r24, Y+25	; 0x19
    4692:	99 89       	ldd	r25, Y+17	; 0x11
    4694:	89 0f       	add	r24, r25
    4696:	2d 96       	adiw	r28, 0x0d	; 13
    4698:	8f af       	std	Y+63, r24	; 0x3f
    469a:	2d 97       	sbiw	r28, 0x0d	; 13
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	65 96       	adiw	r28, 0x15	; 21
    46a0:	8f af       	std	Y+63, r24	; 0x3f
    46a2:	65 97       	sbiw	r28, 0x15	; 21
    46a4:	2d 96       	adiw	r28, 0x0d	; 13
    46a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    46a8:	2d 97       	sbiw	r28, 0x0d	; 13
    46aa:	89 8d       	ldd	r24, Y+25	; 0x19
    46ac:	98 17       	cp	r25, r24
    46ae:	18 f0       	brcs	.+6      	; 0x46b6 <LCD_vSendNumber+0x3a6>
    46b0:	65 96       	adiw	r28, 0x15	; 21
    46b2:	1f ae       	std	Y+63, r1	; 0x3f
    46b4:	65 97       	sbiw	r28, 0x15	; 21
    46b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46b8:	8a 89       	ldd	r24, Y+18	; 0x12
    46ba:	98 0f       	add	r25, r24
    46bc:	2e 96       	adiw	r28, 0x0e	; 14
    46be:	9f af       	std	Y+63, r25	; 0x3f
    46c0:	2e 97       	sbiw	r28, 0x0e	; 14
    46c2:	91 e0       	ldi	r25, 0x01	; 1
    46c4:	66 96       	adiw	r28, 0x16	; 22
    46c6:	9f af       	std	Y+63, r25	; 0x3f
    46c8:	66 97       	sbiw	r28, 0x16	; 22
    46ca:	2e 96       	adiw	r28, 0x0e	; 14
    46cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ce:	2e 97       	sbiw	r28, 0x0e	; 14
    46d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46d2:	89 17       	cp	r24, r25
    46d4:	18 f0       	brcs	.+6      	; 0x46dc <LCD_vSendNumber+0x3cc>
    46d6:	66 96       	adiw	r28, 0x16	; 22
    46d8:	1f ae       	std	Y+63, r1	; 0x3f
    46da:	66 97       	sbiw	r28, 0x16	; 22
    46dc:	65 96       	adiw	r28, 0x15	; 21
    46de:	8f ad       	ldd	r24, Y+63	; 0x3f
    46e0:	65 97       	sbiw	r28, 0x15	; 21
    46e2:	2e 96       	adiw	r28, 0x0e	; 14
    46e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    46e6:	2e 97       	sbiw	r28, 0x0e	; 14
    46e8:	89 0f       	add	r24, r25
    46ea:	67 96       	adiw	r28, 0x17	; 23
    46ec:	8f af       	std	Y+63, r24	; 0x3f
    46ee:	67 97       	sbiw	r28, 0x17	; 23
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	68 96       	adiw	r28, 0x18	; 24
    46f4:	8f af       	std	Y+63, r24	; 0x3f
    46f6:	68 97       	sbiw	r28, 0x18	; 24
    46f8:	67 96       	adiw	r28, 0x17	; 23
    46fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    46fc:	67 97       	sbiw	r28, 0x17	; 23
    46fe:	2e 96       	adiw	r28, 0x0e	; 14
    4700:	8f ad       	ldd	r24, Y+63	; 0x3f
    4702:	2e 97       	sbiw	r28, 0x0e	; 14
    4704:	98 17       	cp	r25, r24
    4706:	18 f0       	brcs	.+6      	; 0x470e <LCD_vSendNumber+0x3fe>
    4708:	68 96       	adiw	r28, 0x18	; 24
    470a:	1f ae       	std	Y+63, r1	; 0x3f
    470c:	68 97       	sbiw	r28, 0x18	; 24
    470e:	66 96       	adiw	r28, 0x16	; 22
    4710:	9f ad       	ldd	r25, Y+63	; 0x3f
    4712:	66 97       	sbiw	r28, 0x16	; 22
    4714:	68 96       	adiw	r28, 0x18	; 24
    4716:	8f ad       	ldd	r24, Y+63	; 0x3f
    4718:	68 97       	sbiw	r28, 0x18	; 24
    471a:	98 2b       	or	r25, r24
    471c:	66 96       	adiw	r28, 0x16	; 22
    471e:	9f af       	std	Y+63, r25	; 0x3f
    4720:	66 97       	sbiw	r28, 0x16	; 22
    4722:	67 96       	adiw	r28, 0x17	; 23
    4724:	9f ad       	ldd	r25, Y+63	; 0x3f
    4726:	67 97       	sbiw	r28, 0x17	; 23
    4728:	2e 96       	adiw	r28, 0x0e	; 14
    472a:	9f af       	std	Y+63, r25	; 0x3f
    472c:	2e 97       	sbiw	r28, 0x0e	; 14
    472e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4730:	9b 89       	ldd	r25, Y+19	; 0x13
    4732:	89 0f       	add	r24, r25
    4734:	2f 96       	adiw	r28, 0x0f	; 15
    4736:	8f af       	std	Y+63, r24	; 0x3f
    4738:	2f 97       	sbiw	r28, 0x0f	; 15
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	69 96       	adiw	r28, 0x19	; 25
    473e:	8f af       	std	Y+63, r24	; 0x3f
    4740:	69 97       	sbiw	r28, 0x19	; 25
    4742:	2f 96       	adiw	r28, 0x0f	; 15
    4744:	9f ad       	ldd	r25, Y+63	; 0x3f
    4746:	2f 97       	sbiw	r28, 0x0f	; 15
    4748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    474a:	98 17       	cp	r25, r24
    474c:	18 f0       	brcs	.+6      	; 0x4754 <LCD_vSendNumber+0x444>
    474e:	69 96       	adiw	r28, 0x19	; 25
    4750:	1f ae       	std	Y+63, r1	; 0x3f
    4752:	69 97       	sbiw	r28, 0x19	; 25
    4754:	66 96       	adiw	r28, 0x16	; 22
    4756:	9f ad       	ldd	r25, Y+63	; 0x3f
    4758:	66 97       	sbiw	r28, 0x16	; 22
    475a:	2f 96       	adiw	r28, 0x0f	; 15
    475c:	8f ad       	ldd	r24, Y+63	; 0x3f
    475e:	2f 97       	sbiw	r28, 0x0f	; 15
    4760:	98 0f       	add	r25, r24
    4762:	6a 96       	adiw	r28, 0x1a	; 26
    4764:	9f af       	std	Y+63, r25	; 0x3f
    4766:	6a 97       	sbiw	r28, 0x1a	; 26
    4768:	91 e0       	ldi	r25, 0x01	; 1
    476a:	6b 96       	adiw	r28, 0x1b	; 27
    476c:	9f af       	std	Y+63, r25	; 0x3f
    476e:	6b 97       	sbiw	r28, 0x1b	; 27
    4770:	6a 96       	adiw	r28, 0x1a	; 26
    4772:	8f ad       	ldd	r24, Y+63	; 0x3f
    4774:	6a 97       	sbiw	r28, 0x1a	; 26
    4776:	2f 96       	adiw	r28, 0x0f	; 15
    4778:	9f ad       	ldd	r25, Y+63	; 0x3f
    477a:	2f 97       	sbiw	r28, 0x0f	; 15
    477c:	89 17       	cp	r24, r25
    477e:	18 f0       	brcs	.+6      	; 0x4786 <LCD_vSendNumber+0x476>
    4780:	6b 96       	adiw	r28, 0x1b	; 27
    4782:	1f ae       	std	Y+63, r1	; 0x3f
    4784:	6b 97       	sbiw	r28, 0x1b	; 27
    4786:	69 96       	adiw	r28, 0x19	; 25
    4788:	8f ad       	ldd	r24, Y+63	; 0x3f
    478a:	69 97       	sbiw	r28, 0x19	; 25
    478c:	6b 96       	adiw	r28, 0x1b	; 27
    478e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4790:	6b 97       	sbiw	r28, 0x1b	; 27
    4792:	89 2b       	or	r24, r25
    4794:	69 96       	adiw	r28, 0x19	; 25
    4796:	8f af       	std	Y+63, r24	; 0x3f
    4798:	69 97       	sbiw	r28, 0x19	; 25
    479a:	6a 96       	adiw	r28, 0x1a	; 26
    479c:	8f ad       	ldd	r24, Y+63	; 0x3f
    479e:	6a 97       	sbiw	r28, 0x1a	; 26
    47a0:	2f 96       	adiw	r28, 0x0f	; 15
    47a2:	8f af       	std	Y+63, r24	; 0x3f
    47a4:	2f 97       	sbiw	r28, 0x0f	; 15
    47a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47a8:	8c 89       	ldd	r24, Y+20	; 0x14
    47aa:	98 0f       	add	r25, r24
    47ac:	60 96       	adiw	r28, 0x10	; 16
    47ae:	9f af       	std	Y+63, r25	; 0x3f
    47b0:	60 97       	sbiw	r28, 0x10	; 16
    47b2:	91 e0       	ldi	r25, 0x01	; 1
    47b4:	6c 96       	adiw	r28, 0x1c	; 28
    47b6:	9f af       	std	Y+63, r25	; 0x3f
    47b8:	6c 97       	sbiw	r28, 0x1c	; 28
    47ba:	60 96       	adiw	r28, 0x10	; 16
    47bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    47be:	60 97       	sbiw	r28, 0x10	; 16
    47c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47c2:	89 17       	cp	r24, r25
    47c4:	18 f0       	brcs	.+6      	; 0x47cc <LCD_vSendNumber+0x4bc>
    47c6:	6c 96       	adiw	r28, 0x1c	; 28
    47c8:	1f ae       	std	Y+63, r1	; 0x3f
    47ca:	6c 97       	sbiw	r28, 0x1c	; 28
    47cc:	69 96       	adiw	r28, 0x19	; 25
    47ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    47d0:	69 97       	sbiw	r28, 0x19	; 25
    47d2:	60 96       	adiw	r28, 0x10	; 16
    47d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    47d6:	60 97       	sbiw	r28, 0x10	; 16
    47d8:	89 0f       	add	r24, r25
    47da:	6d 96       	adiw	r28, 0x1d	; 29
    47dc:	8f af       	std	Y+63, r24	; 0x3f
    47de:	6d 97       	sbiw	r28, 0x1d	; 29
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	6e 96       	adiw	r28, 0x1e	; 30
    47e4:	8f af       	std	Y+63, r24	; 0x3f
    47e6:	6e 97       	sbiw	r28, 0x1e	; 30
    47e8:	6d 96       	adiw	r28, 0x1d	; 29
    47ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ec:	6d 97       	sbiw	r28, 0x1d	; 29
    47ee:	60 96       	adiw	r28, 0x10	; 16
    47f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    47f2:	60 97       	sbiw	r28, 0x10	; 16
    47f4:	98 17       	cp	r25, r24
    47f6:	18 f0       	brcs	.+6      	; 0x47fe <LCD_vSendNumber+0x4ee>
    47f8:	6e 96       	adiw	r28, 0x1e	; 30
    47fa:	1f ae       	std	Y+63, r1	; 0x3f
    47fc:	6e 97       	sbiw	r28, 0x1e	; 30
    47fe:	6c 96       	adiw	r28, 0x1c	; 28
    4800:	9f ad       	ldd	r25, Y+63	; 0x3f
    4802:	6c 97       	sbiw	r28, 0x1c	; 28
    4804:	6e 96       	adiw	r28, 0x1e	; 30
    4806:	8f ad       	ldd	r24, Y+63	; 0x3f
    4808:	6e 97       	sbiw	r28, 0x1e	; 30
    480a:	98 2b       	or	r25, r24
    480c:	6c 96       	adiw	r28, 0x1c	; 28
    480e:	9f af       	std	Y+63, r25	; 0x3f
    4810:	6c 97       	sbiw	r28, 0x1c	; 28
    4812:	6d 96       	adiw	r28, 0x1d	; 29
    4814:	9f ad       	ldd	r25, Y+63	; 0x3f
    4816:	6d 97       	sbiw	r28, 0x1d	; 29
    4818:	60 96       	adiw	r28, 0x10	; 16
    481a:	9f af       	std	Y+63, r25	; 0x3f
    481c:	60 97       	sbiw	r28, 0x10	; 16
    481e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4820:	9d 89       	ldd	r25, Y+21	; 0x15
    4822:	89 0f       	add	r24, r25
    4824:	61 96       	adiw	r28, 0x11	; 17
    4826:	8f af       	std	Y+63, r24	; 0x3f
    4828:	61 97       	sbiw	r28, 0x11	; 17
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	6f 96       	adiw	r28, 0x1f	; 31
    482e:	8f af       	std	Y+63, r24	; 0x3f
    4830:	6f 97       	sbiw	r28, 0x1f	; 31
    4832:	61 96       	adiw	r28, 0x11	; 17
    4834:	9f ad       	ldd	r25, Y+63	; 0x3f
    4836:	61 97       	sbiw	r28, 0x11	; 17
    4838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    483a:	98 17       	cp	r25, r24
    483c:	18 f0       	brcs	.+6      	; 0x4844 <LCD_vSendNumber+0x534>
    483e:	6f 96       	adiw	r28, 0x1f	; 31
    4840:	1f ae       	std	Y+63, r1	; 0x3f
    4842:	6f 97       	sbiw	r28, 0x1f	; 31
    4844:	6c 96       	adiw	r28, 0x1c	; 28
    4846:	9f ad       	ldd	r25, Y+63	; 0x3f
    4848:	6c 97       	sbiw	r28, 0x1c	; 28
    484a:	61 96       	adiw	r28, 0x11	; 17
    484c:	8f ad       	ldd	r24, Y+63	; 0x3f
    484e:	61 97       	sbiw	r28, 0x11	; 17
    4850:	98 0f       	add	r25, r24
    4852:	a0 96       	adiw	r28, 0x20	; 32
    4854:	9f af       	std	Y+63, r25	; 0x3f
    4856:	a0 97       	sbiw	r28, 0x20	; 32
    4858:	91 e0       	ldi	r25, 0x01	; 1
    485a:	a1 96       	adiw	r28, 0x21	; 33
    485c:	9f af       	std	Y+63, r25	; 0x3f
    485e:	a1 97       	sbiw	r28, 0x21	; 33
    4860:	a0 96       	adiw	r28, 0x20	; 32
    4862:	8f ad       	ldd	r24, Y+63	; 0x3f
    4864:	a0 97       	sbiw	r28, 0x20	; 32
    4866:	61 96       	adiw	r28, 0x11	; 17
    4868:	9f ad       	ldd	r25, Y+63	; 0x3f
    486a:	61 97       	sbiw	r28, 0x11	; 17
    486c:	89 17       	cp	r24, r25
    486e:	18 f0       	brcs	.+6      	; 0x4876 <LCD_vSendNumber+0x566>
    4870:	a1 96       	adiw	r28, 0x21	; 33
    4872:	1f ae       	std	Y+63, r1	; 0x3f
    4874:	a1 97       	sbiw	r28, 0x21	; 33
    4876:	6f 96       	adiw	r28, 0x1f	; 31
    4878:	8f ad       	ldd	r24, Y+63	; 0x3f
    487a:	6f 97       	sbiw	r28, 0x1f	; 31
    487c:	a1 96       	adiw	r28, 0x21	; 33
    487e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4880:	a1 97       	sbiw	r28, 0x21	; 33
    4882:	89 2b       	or	r24, r25
    4884:	6f 96       	adiw	r28, 0x1f	; 31
    4886:	8f af       	std	Y+63, r24	; 0x3f
    4888:	6f 97       	sbiw	r28, 0x1f	; 31
    488a:	a0 96       	adiw	r28, 0x20	; 32
    488c:	8f ad       	ldd	r24, Y+63	; 0x3f
    488e:	a0 97       	sbiw	r28, 0x20	; 32
    4890:	61 96       	adiw	r28, 0x11	; 17
    4892:	8f af       	std	Y+63, r24	; 0x3f
    4894:	61 97       	sbiw	r28, 0x11	; 17
    4896:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4898:	8e 89       	ldd	r24, Y+22	; 0x16
    489a:	98 0f       	add	r25, r24
    489c:	62 96       	adiw	r28, 0x12	; 18
    489e:	9f af       	std	Y+63, r25	; 0x3f
    48a0:	62 97       	sbiw	r28, 0x12	; 18
    48a2:	91 e0       	ldi	r25, 0x01	; 1
    48a4:	a2 96       	adiw	r28, 0x22	; 34
    48a6:	9f af       	std	Y+63, r25	; 0x3f
    48a8:	a2 97       	sbiw	r28, 0x22	; 34
    48aa:	62 96       	adiw	r28, 0x12	; 18
    48ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    48ae:	62 97       	sbiw	r28, 0x12	; 18
    48b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48b2:	89 17       	cp	r24, r25
    48b4:	18 f0       	brcs	.+6      	; 0x48bc <LCD_vSendNumber+0x5ac>
    48b6:	a2 96       	adiw	r28, 0x22	; 34
    48b8:	1f ae       	std	Y+63, r1	; 0x3f
    48ba:	a2 97       	sbiw	r28, 0x22	; 34
    48bc:	6f 96       	adiw	r28, 0x1f	; 31
    48be:	8f ad       	ldd	r24, Y+63	; 0x3f
    48c0:	6f 97       	sbiw	r28, 0x1f	; 31
    48c2:	62 96       	adiw	r28, 0x12	; 18
    48c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    48c6:	62 97       	sbiw	r28, 0x12	; 18
    48c8:	89 0f       	add	r24, r25
    48ca:	a3 96       	adiw	r28, 0x23	; 35
    48cc:	8f af       	std	Y+63, r24	; 0x3f
    48ce:	a3 97       	sbiw	r28, 0x23	; 35
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	a4 96       	adiw	r28, 0x24	; 36
    48d4:	8f af       	std	Y+63, r24	; 0x3f
    48d6:	a4 97       	sbiw	r28, 0x24	; 36
    48d8:	a3 96       	adiw	r28, 0x23	; 35
    48da:	9f ad       	ldd	r25, Y+63	; 0x3f
    48dc:	a3 97       	sbiw	r28, 0x23	; 35
    48de:	62 96       	adiw	r28, 0x12	; 18
    48e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    48e2:	62 97       	sbiw	r28, 0x12	; 18
    48e4:	98 17       	cp	r25, r24
    48e6:	18 f0       	brcs	.+6      	; 0x48ee <LCD_vSendNumber+0x5de>
    48e8:	a4 96       	adiw	r28, 0x24	; 36
    48ea:	1f ae       	std	Y+63, r1	; 0x3f
    48ec:	a4 97       	sbiw	r28, 0x24	; 36
    48ee:	a2 96       	adiw	r28, 0x22	; 34
    48f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    48f2:	a2 97       	sbiw	r28, 0x22	; 34
    48f4:	a4 96       	adiw	r28, 0x24	; 36
    48f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48f8:	a4 97       	sbiw	r28, 0x24	; 36
    48fa:	98 2b       	or	r25, r24
    48fc:	a2 96       	adiw	r28, 0x22	; 34
    48fe:	9f af       	std	Y+63, r25	; 0x3f
    4900:	a2 97       	sbiw	r28, 0x22	; 34
    4902:	a3 96       	adiw	r28, 0x23	; 35
    4904:	9f ad       	ldd	r25, Y+63	; 0x3f
    4906:	a3 97       	sbiw	r28, 0x23	; 35
    4908:	62 96       	adiw	r28, 0x12	; 18
    490a:	9f af       	std	Y+63, r25	; 0x3f
    490c:	62 97       	sbiw	r28, 0x12	; 18
    490e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4910:	9f 89       	ldd	r25, Y+23	; 0x17
    4912:	89 0f       	add	r24, r25
    4914:	63 96       	adiw	r28, 0x13	; 19
    4916:	8f af       	std	Y+63, r24	; 0x3f
    4918:	63 97       	sbiw	r28, 0x13	; 19
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	a5 96       	adiw	r28, 0x25	; 37
    491e:	8f af       	std	Y+63, r24	; 0x3f
    4920:	a5 97       	sbiw	r28, 0x25	; 37
    4922:	63 96       	adiw	r28, 0x13	; 19
    4924:	9f ad       	ldd	r25, Y+63	; 0x3f
    4926:	63 97       	sbiw	r28, 0x13	; 19
    4928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    492a:	98 17       	cp	r25, r24
    492c:	18 f0       	brcs	.+6      	; 0x4934 <LCD_vSendNumber+0x624>
    492e:	a5 96       	adiw	r28, 0x25	; 37
    4930:	1f ae       	std	Y+63, r1	; 0x3f
    4932:	a5 97       	sbiw	r28, 0x25	; 37
    4934:	a2 96       	adiw	r28, 0x22	; 34
    4936:	9f ad       	ldd	r25, Y+63	; 0x3f
    4938:	a2 97       	sbiw	r28, 0x22	; 34
    493a:	63 96       	adiw	r28, 0x13	; 19
    493c:	8f ad       	ldd	r24, Y+63	; 0x3f
    493e:	63 97       	sbiw	r28, 0x13	; 19
    4940:	98 0f       	add	r25, r24
    4942:	a6 96       	adiw	r28, 0x26	; 38
    4944:	9f af       	std	Y+63, r25	; 0x3f
    4946:	a6 97       	sbiw	r28, 0x26	; 38
    4948:	91 e0       	ldi	r25, 0x01	; 1
    494a:	a7 96       	adiw	r28, 0x27	; 39
    494c:	9f af       	std	Y+63, r25	; 0x3f
    494e:	a7 97       	sbiw	r28, 0x27	; 39
    4950:	a6 96       	adiw	r28, 0x26	; 38
    4952:	8f ad       	ldd	r24, Y+63	; 0x3f
    4954:	a6 97       	sbiw	r28, 0x26	; 38
    4956:	63 96       	adiw	r28, 0x13	; 19
    4958:	9f ad       	ldd	r25, Y+63	; 0x3f
    495a:	63 97       	sbiw	r28, 0x13	; 19
    495c:	89 17       	cp	r24, r25
    495e:	18 f0       	brcs	.+6      	; 0x4966 <LCD_vSendNumber+0x656>
    4960:	a7 96       	adiw	r28, 0x27	; 39
    4962:	1f ae       	std	Y+63, r1	; 0x3f
    4964:	a7 97       	sbiw	r28, 0x27	; 39
    4966:	a5 96       	adiw	r28, 0x25	; 37
    4968:	8f ad       	ldd	r24, Y+63	; 0x3f
    496a:	a5 97       	sbiw	r28, 0x25	; 37
    496c:	a7 96       	adiw	r28, 0x27	; 39
    496e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4970:	a7 97       	sbiw	r28, 0x27	; 39
    4972:	89 2b       	or	r24, r25
    4974:	a5 96       	adiw	r28, 0x25	; 37
    4976:	8f af       	std	Y+63, r24	; 0x3f
    4978:	a5 97       	sbiw	r28, 0x25	; 37
    497a:	a6 96       	adiw	r28, 0x26	; 38
    497c:	8f ad       	ldd	r24, Y+63	; 0x3f
    497e:	a6 97       	sbiw	r28, 0x26	; 38
    4980:	63 96       	adiw	r28, 0x13	; 19
    4982:	8f af       	std	Y+63, r24	; 0x3f
    4984:	63 97       	sbiw	r28, 0x13	; 19
    4986:	98 a1       	ldd	r25, Y+32	; 0x20
    4988:	88 8d       	ldd	r24, Y+24	; 0x18
    498a:	98 0f       	add	r25, r24
    498c:	64 96       	adiw	r28, 0x14	; 20
    498e:	9f af       	std	Y+63, r25	; 0x3f
    4990:	64 97       	sbiw	r28, 0x14	; 20
    4992:	a5 96       	adiw	r28, 0x25	; 37
    4994:	8f ad       	ldd	r24, Y+63	; 0x3f
    4996:	a5 97       	sbiw	r28, 0x25	; 37
    4998:	64 96       	adiw	r28, 0x14	; 20
    499a:	9f ad       	ldd	r25, Y+63	; 0x3f
    499c:	64 97       	sbiw	r28, 0x14	; 20
    499e:	89 0f       	add	r24, r25
    49a0:	64 96       	adiw	r28, 0x14	; 20
    49a2:	8f af       	std	Y+63, r24	; 0x3f
    49a4:	64 97       	sbiw	r28, 0x14	; 20
    49a6:	2d 96       	adiw	r28, 0x0d	; 13
    49a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    49aa:	2d 97       	sbiw	r28, 0x0d	; 13
    49ac:	89 83       	std	Y+1, r24	; 0x01
    49ae:	2e 96       	adiw	r28, 0x0e	; 14
    49b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49b2:	2e 97       	sbiw	r28, 0x0e	; 14
    49b4:	9a 83       	std	Y+2, r25	; 0x02
    49b6:	2f 96       	adiw	r28, 0x0f	; 15
    49b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    49ba:	2f 97       	sbiw	r28, 0x0f	; 15
    49bc:	8b 83       	std	Y+3, r24	; 0x03
    49be:	60 96       	adiw	r28, 0x10	; 16
    49c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c2:	60 97       	sbiw	r28, 0x10	; 16
    49c4:	9c 83       	std	Y+4, r25	; 0x04
    49c6:	61 96       	adiw	r28, 0x11	; 17
    49c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    49ca:	61 97       	sbiw	r28, 0x11	; 17
    49cc:	8d 83       	std	Y+5, r24	; 0x05
    49ce:	62 96       	adiw	r28, 0x12	; 18
    49d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49d2:	62 97       	sbiw	r28, 0x12	; 18
    49d4:	9e 83       	std	Y+6, r25	; 0x06
    49d6:	63 96       	adiw	r28, 0x13	; 19
    49d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    49da:	63 97       	sbiw	r28, 0x13	; 19
    49dc:	8f 83       	std	Y+7, r24	; 0x07
    49de:	64 96       	adiw	r28, 0x14	; 20
    49e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49e2:	64 97       	sbiw	r28, 0x14	; 20
    49e4:	98 87       	std	Y+8, r25	; 0x08
				Copy_u64Number /= 10 ;
    49e6:	a9 84       	ldd	r10, Y+9	; 0x09
    49e8:	ba 84       	ldd	r11, Y+10	; 0x0a
    49ea:	cb 84       	ldd	r12, Y+11	; 0x0b
    49ec:	dc 84       	ldd	r13, Y+12	; 0x0c
    49ee:	ed 84       	ldd	r14, Y+13	; 0x0d
    49f0:	fe 84       	ldd	r15, Y+14	; 0x0e
    49f2:	0f 85       	ldd	r16, Y+15	; 0x0f
    49f4:	18 89       	ldd	r17, Y+16	; 0x10
    49f6:	2a 2d       	mov	r18, r10
    49f8:	3b 2d       	mov	r19, r11
    49fa:	4c 2d       	mov	r20, r12
    49fc:	5d 2d       	mov	r21, r13
    49fe:	6e 2d       	mov	r22, r14
    4a00:	7f 2d       	mov	r23, r15
    4a02:	80 2f       	mov	r24, r16
    4a04:	91 2f       	mov	r25, r17
    4a06:	0f 2e       	mov	r0, r31
    4a08:	fa e0       	ldi	r31, 0x0A	; 10
    4a0a:	af 2e       	mov	r10, r31
    4a0c:	f0 2d       	mov	r31, r0
    4a0e:	bb 24       	eor	r11, r11
    4a10:	cc 24       	eor	r12, r12
    4a12:	dd 24       	eor	r13, r13
    4a14:	ee 24       	eor	r14, r14
    4a16:	ff 24       	eor	r15, r15
    4a18:	00 e0       	ldi	r16, 0x00	; 0
    4a1a:	10 e0       	ldi	r17, 0x00	; 0
    4a1c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    4a20:	a2 2e       	mov	r10, r18
    4a22:	b3 2e       	mov	r11, r19
    4a24:	c4 2e       	mov	r12, r20
    4a26:	d5 2e       	mov	r13, r21
    4a28:	e6 2e       	mov	r14, r22
    4a2a:	f7 2e       	mov	r15, r23
    4a2c:	08 2f       	mov	r16, r24
    4a2e:	19 2f       	mov	r17, r25
    4a30:	a9 86       	std	Y+9, r10	; 0x09
    4a32:	ba 86       	std	Y+10, r11	; 0x0a
    4a34:	cb 86       	std	Y+11, r12	; 0x0b
    4a36:	dc 86       	std	Y+12, r13	; 0x0c
    4a38:	ed 86       	std	Y+13, r14	; 0x0d
    4a3a:	fe 86       	std	Y+14, r15	; 0x0e
    4a3c:	0f 87       	std	Y+15, r16	; 0x0f
    4a3e:	18 8b       	std	Y+16, r17	; 0x10

		if( Copy_u64Number == 0 ){ LCD_vSendData('0'); }

		else{

			while( Copy_u64Number != 0 ){
    4a40:	89 85       	ldd	r24, Y+9	; 0x09
    4a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a44:	89 2b       	or	r24, r25
    4a46:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a48:	89 2b       	or	r24, r25
    4a4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a4c:	89 2b       	or	r24, r25
    4a4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a50:	89 2b       	or	r24, r25
    4a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a54:	89 2b       	or	r24, r25
    4a56:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a58:	89 2b       	or	r24, r25
    4a5a:	98 89       	ldd	r25, Y+16	; 0x10
    4a5c:	89 2b       	or	r24, r25
    4a5e:	88 23       	and	r24, r24
    4a60:	09 f0       	breq	.+2      	; 0x4a64 <LCD_vSendNumber+0x754>
    4a62:	90 cc       	rjmp	.-1760   	; 0x4384 <LCD_vSendNumber+0x74>
    4a64:	5e c0       	rjmp	.+188    	; 0x4b22 <LCD_vSendNumber+0x812>
				Copy_u64Number /= 10 ;

			}
			while( LOC_u64Reversed != 1 ){

				LCD_vSendData( ( LOC_u64Reversed % 10 ) + 48 );
    4a66:	a9 80       	ldd	r10, Y+1	; 0x01
    4a68:	ba 80       	ldd	r11, Y+2	; 0x02
    4a6a:	cb 80       	ldd	r12, Y+3	; 0x03
    4a6c:	dc 80       	ldd	r13, Y+4	; 0x04
    4a6e:	ed 80       	ldd	r14, Y+5	; 0x05
    4a70:	fe 80       	ldd	r15, Y+6	; 0x06
    4a72:	0f 81       	ldd	r16, Y+7	; 0x07
    4a74:	18 85       	ldd	r17, Y+8	; 0x08
    4a76:	2a 2d       	mov	r18, r10
    4a78:	3b 2d       	mov	r19, r11
    4a7a:	4c 2d       	mov	r20, r12
    4a7c:	5d 2d       	mov	r21, r13
    4a7e:	6e 2d       	mov	r22, r14
    4a80:	7f 2d       	mov	r23, r15
    4a82:	80 2f       	mov	r24, r16
    4a84:	91 2f       	mov	r25, r17
    4a86:	0f 2e       	mov	r0, r31
    4a88:	fa e0       	ldi	r31, 0x0A	; 10
    4a8a:	af 2e       	mov	r10, r31
    4a8c:	f0 2d       	mov	r31, r0
    4a8e:	bb 24       	eor	r11, r11
    4a90:	cc 24       	eor	r12, r12
    4a92:	dd 24       	eor	r13, r13
    4a94:	ee 24       	eor	r14, r14
    4a96:	ff 24       	eor	r15, r15
    4a98:	00 e0       	ldi	r16, 0x00	; 0
    4a9a:	10 e0       	ldi	r17, 0x00	; 0
    4a9c:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    4aa0:	a2 2e       	mov	r10, r18
    4aa2:	b3 2e       	mov	r11, r19
    4aa4:	c4 2e       	mov	r12, r20
    4aa6:	d5 2e       	mov	r13, r21
    4aa8:	e6 2e       	mov	r14, r22
    4aaa:	f7 2e       	mov	r15, r23
    4aac:	08 2f       	mov	r16, r24
    4aae:	19 2f       	mov	r17, r25
    4ab0:	2a 2d       	mov	r18, r10
    4ab2:	3b 2d       	mov	r19, r11
    4ab4:	4c 2d       	mov	r20, r12
    4ab6:	5d 2d       	mov	r21, r13
    4ab8:	6e 2d       	mov	r22, r14
    4aba:	7f 2d       	mov	r23, r15
    4abc:	80 2f       	mov	r24, r16
    4abe:	91 2f       	mov	r25, r17
    4ac0:	82 2f       	mov	r24, r18
    4ac2:	80 5d       	subi	r24, 0xD0	; 208
    4ac4:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
				LOC_u64Reversed /= 10 ;
    4ac8:	a9 80       	ldd	r10, Y+1	; 0x01
    4aca:	ba 80       	ldd	r11, Y+2	; 0x02
    4acc:	cb 80       	ldd	r12, Y+3	; 0x03
    4ace:	dc 80       	ldd	r13, Y+4	; 0x04
    4ad0:	ed 80       	ldd	r14, Y+5	; 0x05
    4ad2:	fe 80       	ldd	r15, Y+6	; 0x06
    4ad4:	0f 81       	ldd	r16, Y+7	; 0x07
    4ad6:	18 85       	ldd	r17, Y+8	; 0x08
    4ad8:	2a 2d       	mov	r18, r10
    4ada:	3b 2d       	mov	r19, r11
    4adc:	4c 2d       	mov	r20, r12
    4ade:	5d 2d       	mov	r21, r13
    4ae0:	6e 2d       	mov	r22, r14
    4ae2:	7f 2d       	mov	r23, r15
    4ae4:	80 2f       	mov	r24, r16
    4ae6:	91 2f       	mov	r25, r17
    4ae8:	0f 2e       	mov	r0, r31
    4aea:	fa e0       	ldi	r31, 0x0A	; 10
    4aec:	af 2e       	mov	r10, r31
    4aee:	f0 2d       	mov	r31, r0
    4af0:	bb 24       	eor	r11, r11
    4af2:	cc 24       	eor	r12, r12
    4af4:	dd 24       	eor	r13, r13
    4af6:	ee 24       	eor	r14, r14
    4af8:	ff 24       	eor	r15, r15
    4afa:	00 e0       	ldi	r16, 0x00	; 0
    4afc:	10 e0       	ldi	r17, 0x00	; 0
    4afe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    4b02:	a2 2e       	mov	r10, r18
    4b04:	b3 2e       	mov	r11, r19
    4b06:	c4 2e       	mov	r12, r20
    4b08:	d5 2e       	mov	r13, r21
    4b0a:	e6 2e       	mov	r14, r22
    4b0c:	f7 2e       	mov	r15, r23
    4b0e:	08 2f       	mov	r16, r24
    4b10:	19 2f       	mov	r17, r25
    4b12:	a9 82       	std	Y+1, r10	; 0x01
    4b14:	ba 82       	std	Y+2, r11	; 0x02
    4b16:	cb 82       	std	Y+3, r12	; 0x03
    4b18:	dc 82       	std	Y+4, r13	; 0x04
    4b1a:	ed 82       	std	Y+5, r14	; 0x05
    4b1c:	fe 82       	std	Y+6, r15	; 0x06
    4b1e:	0f 83       	std	Y+7, r16	; 0x07
    4b20:	18 87       	std	Y+8, r17	; 0x08

				LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
				Copy_u64Number /= 10 ;

			}
			while( LOC_u64Reversed != 1 ){
    4b22:	89 81       	ldd	r24, Y+1	; 0x01
    4b24:	81 30       	cpi	r24, 0x01	; 1
    4b26:	09 f0       	breq	.+2      	; 0x4b2a <LCD_vSendNumber+0x81a>
    4b28:	9e cf       	rjmp	.-196    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2c:	88 23       	and	r24, r24
    4b2e:	09 f0       	breq	.+2      	; 0x4b32 <LCD_vSendNumber+0x822>
    4b30:	9a cf       	rjmp	.-204    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b32:	8b 81       	ldd	r24, Y+3	; 0x03
    4b34:	88 23       	and	r24, r24
    4b36:	09 f0       	breq	.+2      	; 0x4b3a <LCD_vSendNumber+0x82a>
    4b38:	96 cf       	rjmp	.-212    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b3c:	88 23       	and	r24, r24
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <LCD_vSendNumber+0x832>
    4b40:	92 cf       	rjmp	.-220    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b42:	8d 81       	ldd	r24, Y+5	; 0x05
    4b44:	88 23       	and	r24, r24
    4b46:	09 f0       	breq	.+2      	; 0x4b4a <LCD_vSendNumber+0x83a>
    4b48:	8e cf       	rjmp	.-228    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b4c:	88 23       	and	r24, r24
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <LCD_vSendNumber+0x842>
    4b50:	8a cf       	rjmp	.-236    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b52:	8f 81       	ldd	r24, Y+7	; 0x07
    4b54:	88 23       	and	r24, r24
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <LCD_vSendNumber+0x84a>
    4b58:	86 cf       	rjmp	.-244    	; 0x4a66 <LCD_vSendNumber+0x756>
    4b5a:	88 85       	ldd	r24, Y+8	; 0x08
    4b5c:	88 23       	and	r24, r24
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <LCD_vSendNumber+0x852>
    4b60:	82 cf       	rjmp	.-252    	; 0x4a66 <LCD_vSendNumber+0x756>

			}

		}

	}
    4b62:	ca 59       	subi	r28, 0x9A	; 154
    4b64:	df 4f       	sbci	r29, 0xFF	; 255
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	1f 91       	pop	r17
    4b76:	0f 91       	pop	r16
    4b78:	ff 90       	pop	r15
    4b7a:	ef 90       	pop	r14
    4b7c:	df 90       	pop	r13
    4b7e:	cf 90       	pop	r12
    4b80:	bf 90       	pop	r11
    4b82:	af 90       	pop	r10
    4b84:	08 95       	ret

00004b86 <LCD_vSetPosition>:

	void LCD_vSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    4b86:	df 93       	push	r29
    4b88:	cf 93       	push	r28
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	61 97       	sbiw	r28, 0x11	; 17
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	f8 94       	cli
    4b94:	de bf       	out	0x3e, r29	; 62
    4b96:	0f be       	out	0x3f, r0	; 63
    4b98:	cd bf       	out	0x3d, r28	; 61
    4b9a:	88 8b       	std	Y+16, r24	; 0x10
    4b9c:	69 8b       	std	Y+17, r22	; 0x11

		u8 LOC_u8data ;

		/* In These cases will set at (0,0) ==> if the user enter invalid location */
		if(Copy_u8Row>4||Copy_u8Row<1||Copy_u8Col>20||Copy_u8Col<1)  //check
    4b9e:	88 89       	ldd	r24, Y+16	; 0x10
    4ba0:	85 30       	cpi	r24, 0x05	; 5
    4ba2:	48 f4       	brcc	.+18     	; 0x4bb6 <LCD_vSetPosition+0x30>
    4ba4:	88 89       	ldd	r24, Y+16	; 0x10
    4ba6:	88 23       	and	r24, r24
    4ba8:	31 f0       	breq	.+12     	; 0x4bb6 <LCD_vSetPosition+0x30>
    4baa:	89 89       	ldd	r24, Y+17	; 0x11
    4bac:	85 31       	cpi	r24, 0x15	; 21
    4bae:	18 f4       	brcc	.+6      	; 0x4bb6 <LCD_vSetPosition+0x30>
    4bb0:	89 89       	ldd	r24, Y+17	; 0x11
    4bb2:	88 23       	and	r24, r24
    4bb4:	19 f4       	brne	.+6      	; 0x4bbc <LCD_vSetPosition+0x36>
		{
			LOC_u8data = lcd_Row1 ;   // first location
    4bb6:	80 e8       	ldi	r24, 0x80	; 128
    4bb8:	8f 87       	std	Y+15, r24	; 0x0f
    4bba:	1b c0       	rjmp	.+54     	; 0x4bf2 <LCD_vSetPosition+0x6c>
		}

		else if( Copy_u8Row == LCD_ROW_1 ){
    4bbc:	88 89       	ldd	r24, Y+16	; 0x10
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	21 f4       	brne	.+8      	; 0x4bca <LCD_vSetPosition+0x44>

			LOC_u8data = ( ( lcd_Row1 ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    4bc2:	89 89       	ldd	r24, Y+17	; 0x11
    4bc4:	81 58       	subi	r24, 0x81	; 129
    4bc6:	8f 87       	std	Y+15, r24	; 0x0f
    4bc8:	14 c0       	rjmp	.+40     	; 0x4bf2 <LCD_vSetPosition+0x6c>

		}

		else if( Copy_u8Row == LCD_ROW_2 ){
    4bca:	88 89       	ldd	r24, Y+16	; 0x10
    4bcc:	82 30       	cpi	r24, 0x02	; 2
    4bce:	21 f4       	brne	.+8      	; 0x4bd8 <LCD_vSetPosition+0x52>

			LOC_u8data = ( ( lcd_Row2 )  + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    4bd0:	89 89       	ldd	r24, Y+17	; 0x11
    4bd2:	81 54       	subi	r24, 0x41	; 65
    4bd4:	8f 87       	std	Y+15, r24	; 0x0f
    4bd6:	0d c0       	rjmp	.+26     	; 0x4bf2 <LCD_vSetPosition+0x6c>

		}
		else if( Copy_u8Row == LCD_ROW_3 ){
    4bd8:	88 89       	ldd	r24, Y+16	; 0x10
    4bda:	83 30       	cpi	r24, 0x03	; 3
    4bdc:	21 f4       	brne	.+8      	; 0x4be6 <LCD_vSetPosition+0x60>

			LOC_u8data = ( ( lcd_Row3 ) + ( Copy_u8Col - 1 ) );       //Row3 -> 0x90+col-1
    4bde:	89 89       	ldd	r24, Y+17	; 0x11
    4be0:	81 57       	subi	r24, 0x71	; 113
    4be2:	8f 87       	std	Y+15, r24	; 0x0f
    4be4:	06 c0       	rjmp	.+12     	; 0x4bf2 <LCD_vSetPosition+0x6c>

		}
		else if( Copy_u8Row == LCD_ROW_4 ){
    4be6:	88 89       	ldd	r24, Y+16	; 0x10
    4be8:	84 30       	cpi	r24, 0x04	; 4
    4bea:	19 f4       	brne	.+6      	; 0x4bf2 <LCD_vSetPosition+0x6c>

			LOC_u8data = ( ( lcd_Row4 ) + ( Copy_u8Col - 1 ) );       //Row4 -> 0xd0+col-1
    4bec:	89 89       	ldd	r24, Y+17	; 0x11
    4bee:	81 53       	subi	r24, 0x31	; 49
    4bf0:	8f 87       	std	Y+15, r24	; 0x0f

		}

		LCD_vSendCommand ( LOC_u8data );
    4bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bf4:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	a0 e8       	ldi	r26, 0x80	; 128
    4bfe:	bf e3       	ldi	r27, 0x3F	; 63
    4c00:	8b 87       	std	Y+11, r24	; 0x0b
    4c02:	9c 87       	std	Y+12, r25	; 0x0c
    4c04:	ad 87       	std	Y+13, r26	; 0x0d
    4c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	4a ef       	ldi	r20, 0xFA	; 250
    4c16:	54 e4       	ldi	r21, 0x44	; 68
    4c18:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	8f 83       	std	Y+7, r24	; 0x07
    4c22:	98 87       	std	Y+8, r25	; 0x08
    4c24:	a9 87       	std	Y+9, r26	; 0x09
    4c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c28:	6f 81       	ldd	r22, Y+7	; 0x07
    4c2a:	78 85       	ldd	r23, Y+8	; 0x08
    4c2c:	89 85       	ldd	r24, Y+9	; 0x09
    4c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e8       	ldi	r20, 0x80	; 128
    4c36:	5f e3       	ldi	r21, 0x3F	; 63
    4c38:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4c3c:	88 23       	and	r24, r24
    4c3e:	2c f4       	brge	.+10     	; 0x4c4a <LCD_vSetPosition+0xc4>
		__ticks = 1;
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	9e 83       	std	Y+6, r25	; 0x06
    4c46:	8d 83       	std	Y+5, r24	; 0x05
    4c48:	3f c0       	rjmp	.+126    	; 0x4cc8 <LCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    4c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c4c:	78 85       	ldd	r23, Y+8	; 0x08
    4c4e:	89 85       	ldd	r24, Y+9	; 0x09
    4c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	3f ef       	ldi	r19, 0xFF	; 255
    4c56:	4f e7       	ldi	r20, 0x7F	; 127
    4c58:	57 e4       	ldi	r21, 0x47	; 71
    4c5a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4c5e:	18 16       	cp	r1, r24
    4c60:	4c f5       	brge	.+82     	; 0x4cb4 <LCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e2       	ldi	r20, 0x20	; 32
    4c70:	51 e4       	ldi	r21, 0x41	; 65
    4c72:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c76:	dc 01       	movw	r26, r24
    4c78:	cb 01       	movw	r24, r22
    4c7a:	bc 01       	movw	r22, r24
    4c7c:	cd 01       	movw	r24, r26
    4c7e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	9e 83       	std	Y+6, r25	; 0x06
    4c88:	8d 83       	std	Y+5, r24	; 0x05
    4c8a:	0f c0       	rjmp	.+30     	; 0x4caa <LCD_vSetPosition+0x124>
    4c8c:	88 ec       	ldi	r24, 0xC8	; 200
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	9c 83       	std	Y+4, r25	; 0x04
    4c92:	8b 83       	std	Y+3, r24	; 0x03
    4c94:	8b 81       	ldd	r24, Y+3	; 0x03
    4c96:	9c 81       	ldd	r25, Y+4	; 0x04
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <LCD_vSetPosition+0x112>
    4c9c:	9c 83       	std	Y+4, r25	; 0x04
    4c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	9e 83       	std	Y+6, r25	; 0x06
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4caa:	8d 81       	ldd	r24, Y+5	; 0x05
    4cac:	9e 81       	ldd	r25, Y+6	; 0x06
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	69 f7       	brne	.-38     	; 0x4c8c <LCD_vSetPosition+0x106>
    4cb2:	14 c0       	rjmp	.+40     	; 0x4cdc <LCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    4cb6:	78 85       	ldd	r23, Y+8	; 0x08
    4cb8:	89 85       	ldd	r24, Y+9	; 0x09
    4cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cbc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	9e 83       	std	Y+6, r25	; 0x06
    4cc6:	8d 83       	std	Y+5, r24	; 0x05
    4cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ccc:	9a 83       	std	Y+2, r25	; 0x02
    4cce:	89 83       	std	Y+1, r24	; 0x01
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	f1 f7       	brne	.-4      	; 0x4cd4 <LCD_vSetPosition+0x14e>
    4cd8:	9a 83       	std	Y+2, r25	; 0x02
    4cda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

	}
    4cdc:	61 96       	adiw	r28, 0x11	; 17
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	cf 91       	pop	r28
    4cea:	df 91       	pop	r29
    4cec:	08 95       	ret

00004cee <LCD_vSendExtraChar>:

	void LCD_vSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    4cee:	df 93       	push	r29
    4cf0:	cf 93       	push	r28
    4cf2:	00 d0       	rcall	.+0      	; 0x4cf4 <LCD_vSendExtraChar+0x6>
    4cf4:	0f 92       	push	r0
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	8a 83       	std	Y+2, r24	; 0x02
    4cfc:	6b 83       	std	Y+3, r22	; 0x03

		u8 LOC_u8Iterator = 0 ;
    4cfe:	19 82       	std	Y+1, r1	; 0x01
		/* 1- Go To CGRAM            */
		LCD_vSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM
    4d00:	80 e4       	ldi	r24, 0x40	; 64
    4d02:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>


		/* 2- Draw Character in CGRAM        */
		/* Hint : it will be copied to DDRAM automatically */
		for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(LCD_u8ExtraChar) / sizeof(LCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    4d06:	19 82       	std	Y+1, r1	; 0x01
    4d08:	0c c0       	rjmp	.+24     	; 0x4d22 <LCD_vSendExtraChar+0x34>

			LCD_vSendData( LCD_u8ExtraChar[LOC_u8Iterator] );
    4d0a:	89 81       	ldd	r24, Y+1	; 0x01
    4d0c:	88 2f       	mov	r24, r24
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	fc 01       	movw	r30, r24
    4d12:	e0 5c       	subi	r30, 0xC0	; 192
    4d14:	fd 4f       	sbci	r31, 0xFD	; 253
    4d16:	80 81       	ld	r24, Z
    4d18:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		LCD_vSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


		/* 2- Draw Character in CGRAM        */
		/* Hint : it will be copied to DDRAM automatically */
		for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(LCD_u8ExtraChar) / sizeof(LCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	8f 5f       	subi	r24, 0xFF	; 255
    4d20:	89 83       	std	Y+1, r24	; 0x01
    4d22:	89 81       	ldd	r24, Y+1	; 0x01
    4d24:	80 34       	cpi	r24, 0x40	; 64
    4d26:	88 f3       	brcs	.-30     	; 0x4d0a <LCD_vSendExtraChar+0x1c>

		}


		/* 3- Back (AC) To DDRAM          */
		LCD_vSetPosition(Copy_u8Row,Copy_u8Col);
    4d28:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2a:	6b 81       	ldd	r22, Y+3	; 0x03
    4d2c:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>


		/* 4- Send Character Address */
		for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    4d30:	19 82       	std	Y+1, r1	; 0x01
    4d32:	06 c0       	rjmp	.+12     	; 0x4d40 <LCD_vSendExtraChar+0x52>

			LCD_vSendData( LOC_u8Iterator );
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		/* 3- Back (AC) To DDRAM          */
		LCD_vSetPosition(Copy_u8Row,Copy_u8Col);


		/* 4- Send Character Address */
		for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	8f 5f       	subi	r24, 0xFF	; 255
    4d3e:	89 83       	std	Y+1, r24	; 0x01
    4d40:	89 81       	ldd	r24, Y+1	; 0x01
    4d42:	88 30       	cpi	r24, 0x08	; 8
    4d44:	b8 f3       	brcs	.-18     	; 0x4d34 <LCD_vSendExtraChar+0x46>

			LCD_vSendData( LOC_u8Iterator );

		}

	}
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	cf 91       	pop	r28
    4d4e:	df 91       	pop	r29
    4d50:	08 95       	ret

00004d52 <LCD_vClearScreen>:

	void LCD_vClearScreen(void)
	{
    4d52:	df 93       	push	r29
    4d54:	cf 93       	push	r28
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    4d5a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	cd bf       	out	0x3d, r28	; 61
		LCD_vSendCommand(lcd_Clear);
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vSendCommand>
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	a0 e2       	ldi	r26, 0x20	; 32
    4d72:	b1 e4       	ldi	r27, 0x41	; 65
    4d74:	8b 87       	std	Y+11, r24	; 0x0b
    4d76:	9c 87       	std	Y+12, r25	; 0x0c
    4d78:	ad 87       	std	Y+13, r26	; 0x0d
    4d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	4a ef       	ldi	r20, 0xFA	; 250
    4d8a:	54 e4       	ldi	r21, 0x44	; 68
    4d8c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	8f 83       	std	Y+7, r24	; 0x07
    4d96:	98 87       	std	Y+8, r25	; 0x08
    4d98:	a9 87       	std	Y+9, r26	; 0x09
    4d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d9e:	78 85       	ldd	r23, Y+8	; 0x08
    4da0:	89 85       	ldd	r24, Y+9	; 0x09
    4da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	40 e8       	ldi	r20, 0x80	; 128
    4daa:	5f e3       	ldi	r21, 0x3F	; 63
    4dac:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4db0:	88 23       	and	r24, r24
    4db2:	2c f4       	brge	.+10     	; 0x4dbe <LCD_vClearScreen+0x6c>
		__ticks = 1;
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	9e 83       	std	Y+6, r25	; 0x06
    4dba:	8d 83       	std	Y+5, r24	; 0x05
    4dbc:	3f c0       	rjmp	.+126    	; 0x4e3c <LCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    4dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4dc0:	78 85       	ldd	r23, Y+8	; 0x08
    4dc2:	89 85       	ldd	r24, Y+9	; 0x09
    4dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	3f ef       	ldi	r19, 0xFF	; 255
    4dca:	4f e7       	ldi	r20, 0x7F	; 127
    4dcc:	57 e4       	ldi	r21, 0x47	; 71
    4dce:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4dd2:	18 16       	cp	r1, r24
    4dd4:	4c f5       	brge	.+82     	; 0x4e28 <LCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	40 e2       	ldi	r20, 0x20	; 32
    4de4:	51 e4       	ldi	r21, 0x41	; 65
    4de6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	bc 01       	movw	r22, r24
    4df0:	cd 01       	movw	r24, r26
    4df2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	9e 83       	std	Y+6, r25	; 0x06
    4dfc:	8d 83       	std	Y+5, r24	; 0x05
    4dfe:	0f c0       	rjmp	.+30     	; 0x4e1e <LCD_vClearScreen+0xcc>
    4e00:	88 ec       	ldi	r24, 0xC8	; 200
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	9c 83       	std	Y+4, r25	; 0x04
    4e06:	8b 83       	std	Y+3, r24	; 0x03
    4e08:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	f1 f7       	brne	.-4      	; 0x4e0c <LCD_vClearScreen+0xba>
    4e10:	9c 83       	std	Y+4, r25	; 0x04
    4e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e14:	8d 81       	ldd	r24, Y+5	; 0x05
    4e16:	9e 81       	ldd	r25, Y+6	; 0x06
    4e18:	01 97       	sbiw	r24, 0x01	; 1
    4e1a:	9e 83       	std	Y+6, r25	; 0x06
    4e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e20:	9e 81       	ldd	r25, Y+6	; 0x06
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	69 f7       	brne	.-38     	; 0x4e00 <LCD_vClearScreen+0xae>
    4e26:	14 c0       	rjmp	.+40     	; 0x4e50 <LCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e28:	6f 81       	ldd	r22, Y+7	; 0x07
    4e2a:	78 85       	ldd	r23, Y+8	; 0x08
    4e2c:	89 85       	ldd	r24, Y+9	; 0x09
    4e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e34:	dc 01       	movw	r26, r24
    4e36:	cb 01       	movw	r24, r22
    4e38:	9e 83       	std	Y+6, r25	; 0x06
    4e3a:	8d 83       	std	Y+5, r24	; 0x05
    4e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e40:	9a 83       	std	Y+2, r25	; 0x02
    4e42:	89 83       	std	Y+1, r24	; 0x01
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	9a 81       	ldd	r25, Y+2	; 0x02
    4e48:	01 97       	sbiw	r24, 0x01	; 1
    4e4a:	f1 f7       	brne	.-4      	; 0x4e48 <LCD_vClearScreen+0xf6>
    4e4c:	9a 83       	std	Y+2, r25	; 0x02
    4e4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10); //wait more than 1.53 ms
	}
    4e50:	2e 96       	adiw	r28, 0x0e	; 14
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	cf 91       	pop	r28
    4e5e:	df 91       	pop	r29
    4e60:	08 95       	ret

00004e62 <LCD_vSendFEdge>:

	void LCD_vSendFEdge(void) {
    4e62:	df 93       	push	r29
    4e64:	cf 93       	push	r28
    4e66:	cd b7       	in	r28, 0x3d	; 61
    4e68:	de b7       	in	r29, 0x3e	; 62
    4e6a:	6c 97       	sbiw	r28, 0x1c	; 28
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	f8 94       	cli
    4e70:	de bf       	out	0x3e, r29	; 62
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	cd bf       	out	0x3d, r28	; 61
	    DIO_vSetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    4e76:	82 e0       	ldi	r24, 0x02	; 2
    4e78:	62 e0       	ldi	r22, 0x02	; 2
    4e7a:	41 e0       	ldi	r20, 0x01	; 1
    4e7c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	a0 e8       	ldi	r26, 0x80	; 128
    4e86:	bf e3       	ldi	r27, 0x3F	; 63
    4e88:	89 8f       	std	Y+25, r24	; 0x19
    4e8a:	9a 8f       	std	Y+26, r25	; 0x1a
    4e8c:	ab 8f       	std	Y+27, r26	; 0x1b
    4e8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e90:	69 8d       	ldd	r22, Y+25	; 0x19
    4e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	4a ef       	ldi	r20, 0xFA	; 250
    4e9e:	54 e4       	ldi	r21, 0x44	; 68
    4ea0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	8d 8b       	std	Y+21, r24	; 0x15
    4eaa:	9e 8b       	std	Y+22, r25	; 0x16
    4eac:	af 8b       	std	Y+23, r26	; 0x17
    4eae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    4eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	40 e8       	ldi	r20, 0x80	; 128
    4ebe:	5f e3       	ldi	r21, 0x3F	; 63
    4ec0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4ec4:	88 23       	and	r24, r24
    4ec6:	2c f4       	brge	.+10     	; 0x4ed2 <LCD_vSendFEdge+0x70>
		__ticks = 1;
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	9c 8b       	std	Y+20, r25	; 0x14
    4ece:	8b 8b       	std	Y+19, r24	; 0x13
    4ed0:	3f c0       	rjmp	.+126    	; 0x4f50 <LCD_vSendFEdge+0xee>
	else if (__tmp > 65535)
    4ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	3f ef       	ldi	r19, 0xFF	; 255
    4ede:	4f e7       	ldi	r20, 0x7F	; 127
    4ee0:	57 e4       	ldi	r21, 0x47	; 71
    4ee2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4ee6:	18 16       	cp	r1, r24
    4ee8:	4c f5       	brge	.+82     	; 0x4f3c <LCD_vSendFEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eea:	69 8d       	ldd	r22, Y+25	; 0x19
    4eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	40 e2       	ldi	r20, 0x20	; 32
    4ef8:	51 e4       	ldi	r21, 0x41	; 65
    4efa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	bc 01       	movw	r22, r24
    4f04:	cd 01       	movw	r24, r26
    4f06:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	cb 01       	movw	r24, r22
    4f0e:	9c 8b       	std	Y+20, r25	; 0x14
    4f10:	8b 8b       	std	Y+19, r24	; 0x13
    4f12:	0f c0       	rjmp	.+30     	; 0x4f32 <LCD_vSendFEdge+0xd0>
    4f14:	88 ec       	ldi	r24, 0xC8	; 200
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	9a 8b       	std	Y+18, r25	; 0x12
    4f1a:	89 8b       	std	Y+17, r24	; 0x11
    4f1c:	89 89       	ldd	r24, Y+17	; 0x11
    4f1e:	9a 89       	ldd	r25, Y+18	; 0x12
    4f20:	01 97       	sbiw	r24, 0x01	; 1
    4f22:	f1 f7       	brne	.-4      	; 0x4f20 <LCD_vSendFEdge+0xbe>
    4f24:	9a 8b       	std	Y+18, r25	; 0x12
    4f26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f28:	8b 89       	ldd	r24, Y+19	; 0x13
    4f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	9c 8b       	std	Y+20, r25	; 0x14
    4f30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f32:	8b 89       	ldd	r24, Y+19	; 0x13
    4f34:	9c 89       	ldd	r25, Y+20	; 0x14
    4f36:	00 97       	sbiw	r24, 0x00	; 0
    4f38:	69 f7       	brne	.-38     	; 0x4f14 <LCD_vSendFEdge+0xb2>
    4f3a:	14 c0       	rjmp	.+40     	; 0x4f64 <LCD_vSendFEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f40:	8f 89       	ldd	r24, Y+23	; 0x17
    4f42:	98 8d       	ldd	r25, Y+24	; 0x18
    4f44:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	9c 8b       	std	Y+20, r25	; 0x14
    4f4e:	8b 8b       	std	Y+19, r24	; 0x13
    4f50:	8b 89       	ldd	r24, Y+19	; 0x13
    4f52:	9c 89       	ldd	r25, Y+20	; 0x14
    4f54:	98 8b       	std	Y+16, r25	; 0x10
    4f56:	8f 87       	std	Y+15, r24	; 0x0f
    4f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5a:	98 89       	ldd	r25, Y+16	; 0x10
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	f1 f7       	brne	.-4      	; 0x4f5c <LCD_vSendFEdge+0xfa>
    4f60:	98 8b       	std	Y+16, r25	; 0x10
    4f62:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    DIO_vSetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    4f64:	82 e0       	ldi	r24, 0x02	; 2
    4f66:	62 e0       	ldi	r22, 0x02	; 2
    4f68:	40 e0       	ldi	r20, 0x00	; 0
    4f6a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    4f6e:	80 e0       	ldi	r24, 0x00	; 0
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	a0 e8       	ldi	r26, 0x80	; 128
    4f74:	bf e3       	ldi	r27, 0x3F	; 63
    4f76:	8b 87       	std	Y+11, r24	; 0x0b
    4f78:	9c 87       	std	Y+12, r25	; 0x0c
    4f7a:	ad 87       	std	Y+13, r26	; 0x0d
    4f7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f80:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	4a ef       	ldi	r20, 0xFA	; 250
    4f8c:	54 e4       	ldi	r21, 0x44	; 68
    4f8e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	8f 83       	std	Y+7, r24	; 0x07
    4f98:	98 87       	std	Y+8, r25	; 0x08
    4f9a:	a9 87       	std	Y+9, r26	; 0x09
    4f9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa0:	78 85       	ldd	r23, Y+8	; 0x08
    4fa2:	89 85       	ldd	r24, Y+9	; 0x09
    4fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	40 e8       	ldi	r20, 0x80	; 128
    4fac:	5f e3       	ldi	r21, 0x3F	; 63
    4fae:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4fb2:	88 23       	and	r24, r24
    4fb4:	2c f4       	brge	.+10     	; 0x4fc0 <LCD_vSendFEdge+0x15e>
		__ticks = 1;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	9e 83       	std	Y+6, r25	; 0x06
    4fbc:	8d 83       	std	Y+5, r24	; 0x05
    4fbe:	3f c0       	rjmp	.+126    	; 0x503e <LCD_vSendFEdge+0x1dc>
	else if (__tmp > 65535)
    4fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc2:	78 85       	ldd	r23, Y+8	; 0x08
    4fc4:	89 85       	ldd	r24, Y+9	; 0x09
    4fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	3f ef       	ldi	r19, 0xFF	; 255
    4fcc:	4f e7       	ldi	r20, 0x7F	; 127
    4fce:	57 e4       	ldi	r21, 0x47	; 71
    4fd0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4fd4:	18 16       	cp	r1, r24
    4fd6:	4c f5       	brge	.+82     	; 0x502a <LCD_vSendFEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	40 e2       	ldi	r20, 0x20	; 32
    4fe6:	51 e4       	ldi	r21, 0x41	; 65
    4fe8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	cd 01       	movw	r24, r26
    4ff4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	9e 83       	std	Y+6, r25	; 0x06
    4ffe:	8d 83       	std	Y+5, r24	; 0x05
    5000:	0f c0       	rjmp	.+30     	; 0x5020 <LCD_vSendFEdge+0x1be>
    5002:	88 ec       	ldi	r24, 0xC8	; 200
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	9c 83       	std	Y+4, r25	; 0x04
    5008:	8b 83       	std	Y+3, r24	; 0x03
    500a:	8b 81       	ldd	r24, Y+3	; 0x03
    500c:	9c 81       	ldd	r25, Y+4	; 0x04
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	f1 f7       	brne	.-4      	; 0x500e <LCD_vSendFEdge+0x1ac>
    5012:	9c 83       	std	Y+4, r25	; 0x04
    5014:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5016:	8d 81       	ldd	r24, Y+5	; 0x05
    5018:	9e 81       	ldd	r25, Y+6	; 0x06
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	9e 83       	std	Y+6, r25	; 0x06
    501e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5020:	8d 81       	ldd	r24, Y+5	; 0x05
    5022:	9e 81       	ldd	r25, Y+6	; 0x06
    5024:	00 97       	sbiw	r24, 0x00	; 0
    5026:	69 f7       	brne	.-38     	; 0x5002 <LCD_vSendFEdge+0x1a0>
    5028:	14 c0       	rjmp	.+40     	; 0x5052 <LCD_vSendFEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    502a:	6f 81       	ldd	r22, Y+7	; 0x07
    502c:	78 85       	ldd	r23, Y+8	; 0x08
    502e:	89 85       	ldd	r24, Y+9	; 0x09
    5030:	9a 85       	ldd	r25, Y+10	; 0x0a
    5032:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5036:	dc 01       	movw	r26, r24
    5038:	cb 01       	movw	r24, r22
    503a:	9e 83       	std	Y+6, r25	; 0x06
    503c:	8d 83       	std	Y+5, r24	; 0x05
    503e:	8d 81       	ldd	r24, Y+5	; 0x05
    5040:	9e 81       	ldd	r25, Y+6	; 0x06
    5042:	9a 83       	std	Y+2, r25	; 0x02
    5044:	89 83       	std	Y+1, r24	; 0x01
    5046:	89 81       	ldd	r24, Y+1	; 0x01
    5048:	9a 81       	ldd	r25, Y+2	; 0x02
    504a:	01 97       	sbiw	r24, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <LCD_vSendFEdge+0x1e8>
    504e:	9a 83       	std	Y+2, r25	; 0x02
    5050:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(1);
	}
    5052:	6c 96       	adiw	r28, 0x1c	; 28
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	de bf       	out	0x3e, r29	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	cd bf       	out	0x3d, r28	; 61
    505e:	cf 91       	pop	r28
    5060:	df 91       	pop	r29
    5062:	08 95       	ret

00005064 <LED_vInit>:
 * Parameters:
 *   - LED_Configuration: A structure containing the LED configuration, 
 *     including port, pin, and active state.
 */
void LED_vInit( LED_Type LED_Configuration )
{
    5064:	df 93       	push	r29
    5066:	cf 93       	push	r28
    5068:	00 d0       	rcall	.+0      	; 0x506a <LED_vInit+0x6>
    506a:	0f 92       	push	r0
    506c:	cd b7       	in	r28, 0x3d	; 61
    506e:	de b7       	in	r29, 0x3e	; 62
    5070:	69 83       	std	Y+1, r22	; 0x01
    5072:	7a 83       	std	Y+2, r23	; 0x02
    5074:	8b 83       	std	Y+3, r24	; 0x03
    /* Set the specified pin as output */
    DIO_vSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    5076:	89 81       	ldd	r24, Y+1	; 0x01
    5078:	9a 81       	ldd	r25, Y+2	; 0x02
    507a:	69 2f       	mov	r22, r25
    507c:	41 e0       	ldi	r20, 0x01	; 1
    507e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
}
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <LED_vOn>:
 * Parameters:
 *   - LED_Configuration: A structure containing the LED configuration, 
 *     including port, pin, and active state.
 */
void LED_vOn( LED_Type LED_Configuration )
{
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	00 d0       	rcall	.+0      	; 0x5094 <LED_vOn+0x6>
    5094:	0f 92       	push	r0
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    509a:	69 83       	std	Y+1, r22	; 0x01
    509c:	7a 83       	std	Y+2, r23	; 0x02
    509e:	8b 83       	std	Y+3, r24	; 0x03
    if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    50a0:	8b 81       	ldd	r24, Y+3	; 0x03
    50a2:	81 30       	cpi	r24, 0x01	; 1
    50a4:	39 f4       	brne	.+14     	; 0x50b4 <LED_vOn+0x26>
        /* Set pin to HIGH for active high configuration */
        DIO_vSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    50a6:	89 81       	ldd	r24, Y+1	; 0x01
    50a8:	9a 81       	ldd	r25, Y+2	; 0x02
    50aa:	69 2f       	mov	r22, r25
    50ac:	41 e0       	ldi	r20, 0x01	; 1
    50ae:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    50b2:	09 c0       	rjmp	.+18     	; 0x50c6 <LED_vOn+0x38>
    } else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    50b4:	8b 81       	ldd	r24, Y+3	; 0x03
    50b6:	88 23       	and	r24, r24
    50b8:	31 f4       	brne	.+12     	; 0x50c6 <LED_vOn+0x38>
        /* Set pin to LOW for active low configuration */
        DIO_vSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
    50ba:	89 81       	ldd	r24, Y+1	; 0x01
    50bc:	9a 81       	ldd	r25, Y+2	; 0x02
    50be:	69 2f       	mov	r22, r25
    50c0:	40 e0       	ldi	r20, 0x00	; 0
    50c2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    }
}
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	cf 91       	pop	r28
    50ce:	df 91       	pop	r29
    50d0:	08 95       	ret

000050d2 <LED_vOff>:
 * Parameters:
 *   - LED_Configuration: A structure containing the LED configuration, 
 *     including port, pin, and active state.
 */
void LED_vOff( LED_Type LED_Configuration )
{
    50d2:	df 93       	push	r29
    50d4:	cf 93       	push	r28
    50d6:	00 d0       	rcall	.+0      	; 0x50d8 <LED_vOff+0x6>
    50d8:	0f 92       	push	r0
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
    50de:	69 83       	std	Y+1, r22	; 0x01
    50e0:	7a 83       	std	Y+2, r23	; 0x02
    50e2:	8b 83       	std	Y+3, r24	; 0x03
    if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    50e4:	8b 81       	ldd	r24, Y+3	; 0x03
    50e6:	81 30       	cpi	r24, 0x01	; 1
    50e8:	39 f4       	brne	.+14     	; 0x50f8 <LED_vOff+0x26>
        /* Set pin to LOW for active high configuration */
        DIO_vSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW );
    50ea:	89 81       	ldd	r24, Y+1	; 0x01
    50ec:	9a 81       	ldd	r25, Y+2	; 0x02
    50ee:	69 2f       	mov	r22, r25
    50f0:	40 e0       	ldi	r20, 0x00	; 0
    50f2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    50f6:	09 c0       	rjmp	.+18     	; 0x510a <LED_vOff+0x38>
    } else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    50f8:	8b 81       	ldd	r24, Y+3	; 0x03
    50fa:	88 23       	and	r24, r24
    50fc:	31 f4       	brne	.+12     	; 0x510a <LED_vOff+0x38>
        /* Set pin to HIGH for active low configuration */
        DIO_vSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    50fe:	89 81       	ldd	r24, Y+1	; 0x01
    5100:	9a 81       	ldd	r25, Y+2	; 0x02
    5102:	69 2f       	mov	r22, r25
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DIO_vSetPinValue>
    }
}
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	cf 91       	pop	r28
    5112:	df 91       	pop	r29
    5114:	08 95       	ret

00005116 <LED_vTog>:
 * Parameters:
 *   - LED_Configuration: A structure containing the LED configuration, 
 *     including port and pin.
 */
void LED_vTog( LED_Type LED_Configuration )
{
    5116:	df 93       	push	r29
    5118:	cf 93       	push	r28
    511a:	00 d0       	rcall	.+0      	; 0x511c <LED_vTog+0x6>
    511c:	0f 92       	push	r0
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
    5122:	69 83       	std	Y+1, r22	; 0x01
    5124:	7a 83       	std	Y+2, r23	; 0x02
    5126:	8b 83       	std	Y+3, r24	; 0x03
    /* Toggle the current state of the specified pin */
    DIO_vTOGPinValue( LED_Configuration.Port , LED_Configuration.Pin );
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	9a 81       	ldd	r25, Y+2	; 0x02
    512c:	69 2f       	mov	r22, r25
    512e:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <DIO_vTOGPinValue>
}
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	08 95       	ret

0000513e <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR0 , TCCR0_WGM00) ;
    5146:	a3 e5       	ldi	r26, 0x53	; 83
    5148:	b0 e0       	ldi	r27, 0x00	; 0
    514a:	e3 e5       	ldi	r30, 0x53	; 83
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	80 81       	ld	r24, Z
    5150:	80 64       	ori	r24, 0x40	; 64
    5152:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    5154:	a3 e5       	ldi	r26, 0x53	; 83
    5156:	b0 e0       	ldi	r27, 0x00	; 0
    5158:	e3 e5       	ldi	r30, 0x53	; 83
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	80 81       	ld	r24, Z
    515e:	88 60       	ori	r24, 0x08	; 8
    5160:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
					CLR_BIT(TCCR0 , TCCR0_COM01) ;
			#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
    5162:	a3 e5       	ldi	r26, 0x53	; 83
    5164:	b0 e0       	ldi	r27, 0x00	; 0
    5166:	e3 e5       	ldi	r30, 0x53	; 83
    5168:	f0 e0       	ldi	r31, 0x00	; 0
    516a:	80 81       	ld	r24, Z
    516c:	8f 7e       	andi	r24, 0xEF	; 239
    516e:	8c 93       	st	X, r24
					SET_BIT(TCCR0 , TCCR0_COM01) ;
    5170:	a3 e5       	ldi	r26, 0x53	; 83
    5172:	b0 e0       	ldi	r27, 0x00	; 0
    5174:	e3 e5       	ldi	r30, 0x53	; 83
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	80 81       	ld	r24, Z
    517a:	80 62       	ori	r24, 0x20	; 32
    517c:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER0_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    517e:	ec e5       	ldi	r30, 0x5C	; 92
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	10 82       	st	Z, r1
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    5184:	a3 e5       	ldi	r26, 0x53	; 83
    5186:	b0 e0       	ldi	r27, 0x00	; 0
    5188:	e3 e5       	ldi	r30, 0x53	; 83
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	80 81       	ld	r24, Z
    518e:	88 7f       	andi	r24, 0xF8	; 248
    5190:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    5192:	a3 e5       	ldi	r26, 0x53	; 83
    5194:	b0 e0       	ldi	r27, 0x00	; 0
    5196:	e3 e5       	ldi	r30, 0x53	; 83
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	80 81       	ld	r24, Z
    519c:	8c 93       	st	X, r24
}
    519e:	cf 91       	pop	r28
    51a0:	df 91       	pop	r29
    51a2:	08 95       	ret

000051a4 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    51a4:	df 93       	push	r29
    51a6:	cf 93       	push	r28
    51a8:	cd b7       	in	r28, 0x3d	; 61
    51aa:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    51ac:	af e4       	ldi	r26, 0x4F	; 79
    51ae:	b0 e0       	ldi	r27, 0x00	; 0
    51b0:	ef e4       	ldi	r30, 0x4F	; 79
    51b2:	f0 e0       	ldi	r31, 0x00	; 0
    51b4:	80 81       	ld	r24, Z
    51b6:	8e 7f       	andi	r24, 0xFE	; 254
    51b8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    51ba:	af e4       	ldi	r26, 0x4F	; 79
    51bc:	b0 e0       	ldi	r27, 0x00	; 0
    51be:	ef e4       	ldi	r30, 0x4F	; 79
    51c0:	f0 e0       	ldi	r31, 0x00	; 0
    51c2:	80 81       	ld	r24, Z
    51c4:	82 60       	ori	r24, 0x02	; 2
    51c6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    51c8:	ae e4       	ldi	r26, 0x4E	; 78
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	ee e4       	ldi	r30, 0x4E	; 78
    51ce:	f0 e0       	ldi	r31, 0x00	; 0
    51d0:	80 81       	ld	r24, Z
    51d2:	88 60       	ori	r24, 0x08	; 8
    51d4:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    51d6:	ae e4       	ldi	r26, 0x4E	; 78
    51d8:	b0 e0       	ldi	r27, 0x00	; 0
    51da:	ee e4       	ldi	r30, 0x4E	; 78
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	80 81       	ld	r24, Z
    51e0:	80 61       	ori	r24, 0x10	; 16
    51e2:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL*1000 ;
    51e4:	ea e4       	ldi	r30, 0x4A	; 74
    51e6:	f0 e0       	ldi	r31, 0x00	; 0
    51e8:	80 ed       	ldi	r24, 0xD0	; 208
    51ea:	97 e0       	ldi	r25, 0x07	; 7
    51ec:	91 83       	std	Z+1, r25	; 0x01
    51ee:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    51f0:	e8 e4       	ldi	r30, 0x48	; 72
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	11 82       	std	Z+1, r1	; 0x01
    51f6:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    51f8:	e6 e4       	ldi	r30, 0x46	; 70
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	8f e1       	ldi	r24, 0x1F	; 31
    51fe:	9e e4       	ldi	r25, 0x4E	; 78
    5200:	91 83       	std	Z+1, r25	; 0x01
    5202:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    5204:	ae e4       	ldi	r26, 0x4E	; 78
    5206:	b0 e0       	ldi	r27, 0x00	; 0
    5208:	ee e4       	ldi	r30, 0x4E	; 78
    520a:	f0 e0       	ldi	r31, 0x00	; 0
    520c:	80 81       	ld	r24, Z
    520e:	80 64       	ori	r24, 0x40	; 64
    5210:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    5212:	af e4       	ldi	r26, 0x4F	; 79
    5214:	b0 e0       	ldi	r27, 0x00	; 0
    5216:	ef e4       	ldi	r30, 0x4F	; 79
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	80 81       	ld	r24, Z
    521c:	8f 7b       	andi	r24, 0xBF	; 191
    521e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    5220:	af e4       	ldi	r26, 0x4F	; 79
    5222:	b0 e0       	ldi	r27, 0x00	; 0
    5224:	ef e4       	ldi	r30, 0x4F	; 79
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	80 81       	ld	r24, Z
    522a:	80 68       	ori	r24, 0x80	; 128
    522c:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    522e:	af e4       	ldi	r26, 0x4F	; 79
    5230:	b0 e0       	ldi	r27, 0x00	; 0
    5232:	ef e4       	ldi	r30, 0x4F	; 79
    5234:	f0 e0       	ldi	r31, 0x00	; 0
    5236:	80 81       	ld	r24, Z
    5238:	8f 7e       	andi	r24, 0xEF	; 239
    523a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    523c:	af e4       	ldi	r26, 0x4F	; 79
    523e:	b0 e0       	ldi	r27, 0x00	; 0
    5240:	ef e4       	ldi	r30, 0x4F	; 79
    5242:	f0 e0       	ldi	r31, 0x00	; 0
    5244:	80 81       	ld	r24, Z
    5246:	80 62       	ori	r24, 0x20	; 32
    5248:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    524a:	a9 e5       	ldi	r26, 0x59	; 89
    524c:	b0 e0       	ldi	r27, 0x00	; 0
    524e:	e9 e5       	ldi	r30, 0x59	; 89
    5250:	f0 e0       	ldi	r31, 0x00	; 0
    5252:	80 81       	ld	r24, Z
    5254:	8b 7f       	andi	r24, 0xFB	; 251
    5256:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    5258:	a9 e5       	ldi	r26, 0x59	; 89
    525a:	b0 e0       	ldi	r27, 0x00	; 0
    525c:	e9 e5       	ldi	r30, 0x59	; 89
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	80 81       	ld	r24, Z
    5262:	8f 7e       	andi	r24, 0xEF	; 239
    5264:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    5266:	a9 e5       	ldi	r26, 0x59	; 89
    5268:	b0 e0       	ldi	r27, 0x00	; 0
    526a:	e9 e5       	ldi	r30, 0x59	; 89
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	80 81       	ld	r24, Z
    5270:	87 7f       	andi	r24, 0xF7	; 247
    5272:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    5274:	a9 e5       	ldi	r26, 0x59	; 89
    5276:	b0 e0       	ldi	r27, 0x00	; 0
    5278:	e9 e5       	ldi	r30, 0x59	; 89
    527a:	f0 e0       	ldi	r31, 0x00	; 0
    527c:	80 81       	ld	r24, Z
    527e:	8f 7d       	andi	r24, 0xDF	; 223
    5280:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    5282:	ae e4       	ldi	r26, 0x4E	; 78
    5284:	b0 e0       	ldi	r27, 0x00	; 0
    5286:	ee e4       	ldi	r30, 0x4E	; 78
    5288:	f0 e0       	ldi	r31, 0x00	; 0
    528a:	80 81       	ld	r24, Z
    528c:	88 7f       	andi	r24, 0xF8	; 248
    528e:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    5290:	ae e4       	ldi	r26, 0x4E	; 78
    5292:	b0 e0       	ldi	r27, 0x00	; 0
    5294:	ee e4       	ldi	r30, 0x4E	; 78
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	81 60       	ori	r24, 0x01	; 1
    529c:	8c 93       	st	X, r24


}
    529e:	cf 91       	pop	r28
    52a0:	df 91       	pop	r29
    52a2:	08 95       	ret

000052a4 <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    52a4:	df 93       	push	r29
    52a6:	cf 93       	push	r28
    52a8:	cd b7       	in	r28, 0x3d	; 61
    52aa:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    52ac:	a2 e4       	ldi	r26, 0x42	; 66
    52ae:	b0 e0       	ldi	r27, 0x00	; 0
    52b0:	e2 e4       	ldi	r30, 0x42	; 66
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	80 81       	ld	r24, Z
    52b6:	88 60       	ori	r24, 0x08	; 8
    52b8:	8c 93       	st	X, r24
			#endif

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR2 , TCCR2_WGM20) ;
    52ba:	a5 e4       	ldi	r26, 0x45	; 69
    52bc:	b0 e0       	ldi	r27, 0x00	; 0
    52be:	e5 e4       	ldi	r30, 0x45	; 69
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	80 81       	ld	r24, Z
    52c4:	80 64       	ori	r24, 0x40	; 64
    52c6:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    52c8:	a5 e4       	ldi	r26, 0x45	; 69
    52ca:	b0 e0       	ldi	r27, 0x00	; 0
    52cc:	e5 e4       	ldi	r30, 0x45	; 69
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	80 81       	ld	r24, Z
    52d2:	88 60       	ori	r24, 0x08	; 8
    52d4:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER2_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
					CLR_BIT(TCCR2 , TCCR2_COM21) ;
			#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
    52d6:	a5 e4       	ldi	r26, 0x45	; 69
    52d8:	b0 e0       	ldi	r27, 0x00	; 0
    52da:	e5 e4       	ldi	r30, 0x45	; 69
    52dc:	f0 e0       	ldi	r31, 0x00	; 0
    52de:	80 81       	ld	r24, Z
    52e0:	8f 7e       	andi	r24, 0xEF	; 239
    52e2:	8c 93       	st	X, r24
					SET_BIT(TCCR2 , TCCR2_COM21) ;
    52e4:	a5 e4       	ldi	r26, 0x45	; 69
    52e6:	b0 e0       	ldi	r27, 0x00	; 0
    52e8:	e5 e4       	ldi	r30, 0x45	; 69
    52ea:	f0 e0       	ldi	r31, 0x00	; 0
    52ec:	80 81       	ld	r24, Z
    52ee:	80 62       	ori	r24, 0x20	; 32
    52f0:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER2_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    52f2:	e3 e4       	ldi	r30, 0x43	; 67
    52f4:	f0 e0       	ldi	r31, 0x00	; 0
    52f6:	84 e1       	ldi	r24, 0x14	; 20
    52f8:	80 83       	st	Z, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

			/*Set the Required Prescaler*/
		TCCR2 &= TIMER_PRESCALER_MASK ;
    52fa:	a5 e4       	ldi	r26, 0x45	; 69
    52fc:	b0 e0       	ldi	r27, 0x00	; 0
    52fe:	e5 e4       	ldi	r30, 0x45	; 69
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 81       	ld	r24, Z
    5304:	88 7f       	andi	r24, 0xF8	; 248
    5306:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
    5308:	a5 e4       	ldi	r26, 0x45	; 69
    530a:	b0 e0       	ldi	r27, 0x00	; 0
    530c:	e5 e4       	ldi	r30, 0x45	; 69
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	80 81       	ld	r24, Z
    5312:	85 60       	ori	r24, 0x05	; 5
    5314:	8c 93       	st	X, r24
}
    5316:	cf 91       	pop	r28
    5318:	df 91       	pop	r29
    531a:	08 95       	ret

0000531c <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    531c:	df 93       	push	r29
    531e:	cf 93       	push	r28
    5320:	0f 92       	push	r0
    5322:	cd b7       	in	r28, 0x3d	; 61
    5324:	de b7       	in	r29, 0x3e	; 62
    5326:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    5328:	e2 e5       	ldi	r30, 0x52	; 82
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	89 81       	ldd	r24, Y+1	; 0x01
    532e:	80 83       	st	Z, r24
}
    5330:	0f 90       	pop	r0
    5332:	cf 91       	pop	r28
    5334:	df 91       	pop	r29
    5336:	08 95       	ret

00005338 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    5338:	df 93       	push	r29
    533a:	cf 93       	push	r28
    533c:	00 d0       	rcall	.+0      	; 0x533e <TIMER1_vSetPreload+0x6>
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	9a 83       	std	Y+2, r25	; 0x02
    5344:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    5346:	ec e4       	ldi	r30, 0x4C	; 76
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	89 81       	ldd	r24, Y+1	; 0x01
    534c:	9a 81       	ldd	r25, Y+2	; 0x02
    534e:	91 83       	std	Z+1, r25	; 0x01
    5350:	80 83       	st	Z, r24
}
    5352:	0f 90       	pop	r0
    5354:	0f 90       	pop	r0
    5356:	cf 91       	pop	r28
    5358:	df 91       	pop	r29
    535a:	08 95       	ret

0000535c <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    535c:	df 93       	push	r29
    535e:	cf 93       	push	r28
    5360:	0f 92       	push	r0
    5362:	cd b7       	in	r28, 0x3d	; 61
    5364:	de b7       	in	r29, 0x3e	; 62
    5366:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    5368:	e4 e4       	ldi	r30, 0x44	; 68
    536a:	f0 e0       	ldi	r31, 0x00	; 0
    536c:	89 81       	ldd	r24, Y+1	; 0x01
    536e:	80 83       	st	Z, r24
}
    5370:	0f 90       	pop	r0
    5372:	cf 91       	pop	r28
    5374:	df 91       	pop	r29
    5376:	08 95       	ret

00005378 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    5378:	df 93       	push	r29
    537a:	cf 93       	push	r28
    537c:	0f 92       	push	r0
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    5384:	ec e5       	ldi	r30, 0x5C	; 92
    5386:	f0 e0       	ldi	r31, 0x00	; 0
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	80 83       	st	Z, r24
}
    538c:	0f 90       	pop	r0
    538e:	cf 91       	pop	r28
    5390:	df 91       	pop	r29
    5392:	08 95       	ret

00005394 <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (f64 Copy_u16CTCA)
{
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	df 93       	push	r29
    539a:	cf 93       	push	r28
    539c:	00 d0       	rcall	.+0      	; 0x539e <TIMER1_vSetCTCA+0xa>
    539e:	00 d0       	rcall	.+0      	; 0x53a0 <TIMER1_vSetCTCA+0xc>
    53a0:	cd b7       	in	r28, 0x3d	; 61
    53a2:	de b7       	in	r29, 0x3e	; 62
    53a4:	69 83       	std	Y+1, r22	; 0x01
    53a6:	7a 83       	std	Y+2, r23	; 0x02
    53a8:	8b 83       	std	Y+3, r24	; 0x03
    53aa:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A = Copy_u16CTCA*1000 ;
    53ac:	0a e4       	ldi	r16, 0x4A	; 74
    53ae:	10 e0       	ldi	r17, 0x00	; 0
    53b0:	69 81       	ldd	r22, Y+1	; 0x01
    53b2:	7a 81       	ldd	r23, Y+2	; 0x02
    53b4:	8b 81       	ldd	r24, Y+3	; 0x03
    53b6:	9c 81       	ldd	r25, Y+4	; 0x04
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	30 e0       	ldi	r19, 0x00	; 0
    53bc:	4a e7       	ldi	r20, 0x7A	; 122
    53be:	54 e4       	ldi	r21, 0x44	; 68
    53c0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    53c4:	dc 01       	movw	r26, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	bc 01       	movw	r22, r24
    53ca:	cd 01       	movw	r24, r26
    53cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	f8 01       	movw	r30, r16
    53d6:	91 83       	std	Z+1, r25	; 0x01
    53d8:	80 83       	st	Z, r24
}
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	cf 91       	pop	r28
    53e4:	df 91       	pop	r29
    53e6:	1f 91       	pop	r17
    53e8:	0f 91       	pop	r16
    53ea:	08 95       	ret

000053ec <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    53ec:	df 93       	push	r29
    53ee:	cf 93       	push	r28
    53f0:	00 d0       	rcall	.+0      	; 0x53f2 <TIMER1_vSetCTCB+0x6>
    53f2:	cd b7       	in	r28, 0x3d	; 61
    53f4:	de b7       	in	r29, 0x3e	; 62
    53f6:	9a 83       	std	Y+2, r25	; 0x02
    53f8:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    53fa:	e8 e4       	ldi	r30, 0x48	; 72
    53fc:	f0 e0       	ldi	r31, 0x00	; 0
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	9a 81       	ldd	r25, Y+2	; 0x02
    5402:	91 83       	std	Z+1, r25	; 0x01
    5404:	80 83       	st	Z, r24
}
    5406:	0f 90       	pop	r0
    5408:	0f 90       	pop	r0
    540a:	cf 91       	pop	r28
    540c:	df 91       	pop	r29
    540e:	08 95       	ret

00005410 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    5410:	df 93       	push	r29
    5412:	cf 93       	push	r28
    5414:	0f 92       	push	r0
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    541c:	e3 e4       	ldi	r30, 0x43	; 67
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	80 83       	st	Z, r24
}
    5424:	0f 90       	pop	r0
    5426:	cf 91       	pop	r28
    5428:	df 91       	pop	r29
    542a:	08 95       	ret

0000542c <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    542c:	df 93       	push	r29
    542e:	cf 93       	push	r28
    5430:	00 d0       	rcall	.+0      	; 0x5432 <TIMER1_vSetICR1+0x6>
    5432:	cd b7       	in	r28, 0x3d	; 61
    5434:	de b7       	in	r29, 0x3e	; 62
    5436:	9a 83       	std	Y+2, r25	; 0x02
    5438:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    543a:	e6 e4       	ldi	r30, 0x46	; 70
    543c:	f0 e0       	ldi	r31, 0x00	; 0
    543e:	89 81       	ldd	r24, Y+1	; 0x01
    5440:	9a 81       	ldd	r25, Y+2	; 0x02
    5442:	91 83       	std	Z+1, r25	; 0x01
    5444:	80 83       	st	Z, r24
}
    5446:	0f 90       	pop	r0
    5448:	0f 90       	pop	r0
    544a:	cf 91       	pop	r28
    544c:	df 91       	pop	r29
    544e:	08 95       	ret

00005450 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    5450:	df 93       	push	r29
    5452:	cf 93       	push	r28
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    5458:	e2 e5       	ldi	r30, 0x52	; 82
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	80 81       	ld	r24, Z
}
    545e:	cf 91       	pop	r28
    5460:	df 91       	pop	r29
    5462:	08 95       	ret

00005464 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    5464:	df 93       	push	r29
    5466:	cf 93       	push	r28
    5468:	cd b7       	in	r28, 0x3d	; 61
    546a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    546c:	ec e4       	ldi	r30, 0x4C	; 76
    546e:	f0 e0       	ldi	r31, 0x00	; 0
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
}
    5474:	cf 91       	pop	r28
    5476:	df 91       	pop	r29
    5478:	08 95       	ret

0000547a <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    547a:	df 93       	push	r29
    547c:	cf 93       	push	r28
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    5482:	e4 e4       	ldi	r30, 0x44	; 68
    5484:	f0 e0       	ldi	r31, 0x00	; 0
    5486:	80 81       	ld	r24, Z
}
    5488:	cf 91       	pop	r28
    548a:	df 91       	pop	r29
    548c:	08 95       	ret

0000548e <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    548e:	df 93       	push	r29
    5490:	cf 93       	push	r28
    5492:	00 d0       	rcall	.+0      	; 0x5494 <TIMER_vSetPWM+0x6>
    5494:	cd b7       	in	r28, 0x3d	; 61
    5496:	de b7       	in	r29, 0x3e	; 62
    5498:	9a 83       	std	Y+2, r25	; 0x02
    549a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    549c:	ea e4       	ldi	r30, 0x4A	; 74
    549e:	f0 e0       	ldi	r31, 0x00	; 0
    54a0:	89 81       	ldd	r24, Y+1	; 0x01
    54a2:	9a 81       	ldd	r25, Y+2	; 0x02
    54a4:	91 83       	std	Z+1, r25	; 0x01
    54a6:	80 83       	st	Z, r24
}
    54a8:	0f 90       	pop	r0
    54aa:	0f 90       	pop	r0
    54ac:	cf 91       	pop	r28
    54ae:	df 91       	pop	r29
    54b0:	08 95       	ret

000054b2 <Timer2_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer2_vSetPrescaler(u8 Prescaler)
{
    54b2:	df 93       	push	r29
    54b4:	cf 93       	push	r28
    54b6:	0f 92       	push	r0
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    54be:	a5 e4       	ldi	r26, 0x45	; 69
    54c0:	b0 e0       	ldi	r27, 0x00	; 0
    54c2:	e5 e4       	ldi	r30, 0x45	; 69
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	88 7f       	andi	r24, 0xF8	; 248
    54ca:	8c 93       	st	X, r24
	TCCR2 |= Prescaler ;
    54cc:	a5 e4       	ldi	r26, 0x45	; 69
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	e5 e4       	ldi	r30, 0x45	; 69
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	90 81       	ld	r25, Z
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	89 2b       	or	r24, r25
    54da:	8c 93       	st	X, r24
}
    54dc:	0f 90       	pop	r0
    54de:	cf 91       	pop	r28
    54e0:	df 91       	pop	r29
    54e2:	08 95       	ret

000054e4 <Timer0_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer0_vSetPrescaler(u8 Prescaler)
{
    54e4:	df 93       	push	r29
    54e6:	cf 93       	push	r28
    54e8:	0f 92       	push	r0
    54ea:	cd b7       	in	r28, 0x3d	; 61
    54ec:	de b7       	in	r29, 0x3e	; 62
    54ee:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    54f0:	a3 e5       	ldi	r26, 0x53	; 83
    54f2:	b0 e0       	ldi	r27, 0x00	; 0
    54f4:	e3 e5       	ldi	r30, 0x53	; 83
    54f6:	f0 e0       	ldi	r31, 0x00	; 0
    54f8:	80 81       	ld	r24, Z
    54fa:	88 7f       	andi	r24, 0xF8	; 248
    54fc:	8c 93       	st	X, r24
	TCCR0 |= Prescaler ;
    54fe:	a3 e5       	ldi	r26, 0x53	; 83
    5500:	b0 e0       	ldi	r27, 0x00	; 0
    5502:	e3 e5       	ldi	r30, 0x53	; 83
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	90 81       	ld	r25, Z
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	89 2b       	or	r24, r25
    550c:	8c 93       	st	X, r24
}
    550e:	0f 90       	pop	r0
    5510:	cf 91       	pop	r28
    5512:	df 91       	pop	r29
    5514:	08 95       	ret

00005516 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    5516:	df 93       	push	r29
    5518:	cf 93       	push	r28
    551a:	cd b7       	in	r28, 0x3d	; 61
    551c:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    551e:	ae e4       	ldi	r26, 0x4E	; 78
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	ee e4       	ldi	r30, 0x4E	; 78
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	80 81       	ld	r24, Z
    5528:	80 64       	ori	r24, 0x40	; 64
    552a:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    552c:	a9 e5       	ldi	r26, 0x59	; 89
    552e:	b0 e0       	ldi	r27, 0x00	; 0
    5530:	e9 e5       	ldi	r30, 0x59	; 89
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	80 81       	ld	r24, Z
    5536:	80 62       	ori	r24, 0x20	; 32
    5538:	8c 93       	st	X, r24
}
    553a:	cf 91       	pop	r28
    553c:	df 91       	pop	r29
    553e:	08 95       	ret

00005540 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    5540:	df 93       	push	r29
    5542:	cf 93       	push	r28
    5544:	00 d0       	rcall	.+0      	; 0x5546 <TIMER_vICUSetTriggerEdge+0x6>
    5546:	cd b7       	in	r28, 0x3d	; 61
    5548:	de b7       	in	r29, 0x3e	; 62
    554a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    554c:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    554e:	8a 81       	ldd	r24, Y+2	; 0x02
    5550:	81 30       	cpi	r24, 0x01	; 1
    5552:	41 f4       	brne	.+16     	; 0x5564 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    5554:	ae e4       	ldi	r26, 0x4E	; 78
    5556:	b0 e0       	ldi	r27, 0x00	; 0
    5558:	ee e4       	ldi	r30, 0x4E	; 78
    555a:	f0 e0       	ldi	r31, 0x00	; 0
    555c:	80 81       	ld	r24, Z
    555e:	80 64       	ori	r24, 0x40	; 64
    5560:	8c 93       	st	X, r24
    5562:	0d c0       	rjmp	.+26     	; 0x557e <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    5564:	8a 81       	ldd	r24, Y+2	; 0x02
    5566:	88 23       	and	r24, r24
    5568:	41 f4       	brne	.+16     	; 0x557a <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    556a:	ae e4       	ldi	r26, 0x4E	; 78
    556c:	b0 e0       	ldi	r27, 0x00	; 0
    556e:	ee e4       	ldi	r30, 0x4E	; 78
    5570:	f0 e0       	ldi	r31, 0x00	; 0
    5572:	80 81       	ld	r24, Z
    5574:	8f 7b       	andi	r24, 0xBF	; 191
    5576:	8c 93       	st	X, r24
    5578:	02 c0       	rjmp	.+4      	; 0x557e <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    557e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    558a:	df 93       	push	r29
    558c:	cf 93       	push	r28
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5592:	a9 e5       	ldi	r26, 0x59	; 89
    5594:	b0 e0       	ldi	r27, 0x00	; 0
    5596:	e9 e5       	ldi	r30, 0x59	; 89
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	80 81       	ld	r24, Z
    559c:	80 62       	ori	r24, 0x20	; 32
    559e:	8c 93       	st	X, r24
}
    55a0:	cf 91       	pop	r28
    55a2:	df 91       	pop	r29
    55a4:	08 95       	ret

000055a6 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    55a6:	df 93       	push	r29
    55a8:	cf 93       	push	r28
    55aa:	cd b7       	in	r28, 0x3d	; 61
    55ac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    55ae:	a9 e5       	ldi	r26, 0x59	; 89
    55b0:	b0 e0       	ldi	r27, 0x00	; 0
    55b2:	e9 e5       	ldi	r30, 0x59	; 89
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	80 81       	ld	r24, Z
    55b8:	8f 7d       	andi	r24, 0xDF	; 223
    55ba:	8c 93       	st	X, r24
}
    55bc:	cf 91       	pop	r28
    55be:	df 91       	pop	r29
    55c0:	08 95       	ret

000055c2 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    55c2:	df 93       	push	r29
    55c4:	cf 93       	push	r28
    55c6:	cd b7       	in	r28, 0x3d	; 61
    55c8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    55ca:	e6 e4       	ldi	r30, 0x46	; 70
    55cc:	f0 e0       	ldi	r31, 0x00	; 0
    55ce:	80 81       	ld	r24, Z
    55d0:	91 81       	ldd	r25, Z+1	; 0x01
}
    55d2:	cf 91       	pop	r28
    55d4:	df 91       	pop	r29
    55d6:	08 95       	ret

000055d8 <TIMER_vWDTSleep>:

/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    55d8:	df 93       	push	r29
    55da:	cf 93       	push	r28
    55dc:	cd b7       	in	r28, 0x3d	; 61
    55de:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    55e0:	a1 e4       	ldi	r26, 0x41	; 65
    55e2:	b0 e0       	ldi	r27, 0x00	; 0
    55e4:	e1 e4       	ldi	r30, 0x41	; 65
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	80 81       	ld	r24, Z
    55ea:	88 7f       	andi	r24, 0xF8	; 248
    55ec:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    55ee:	a1 e4       	ldi	r26, 0x41	; 65
    55f0:	b0 e0       	ldi	r27, 0x00	; 0
    55f2:	e1 e4       	ldi	r30, 0x41	; 65
    55f4:	f0 e0       	ldi	r31, 0x00	; 0
    55f6:	80 81       	ld	r24, Z
    55f8:	86 60       	ori	r24, 0x06	; 6
    55fa:	8c 93       	st	X, r24
}
    55fc:	cf 91       	pop	r28
    55fe:	df 91       	pop	r29
    5600:	08 95       	ret

00005602 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    5602:	df 93       	push	r29
    5604:	cf 93       	push	r28
    5606:	cd b7       	in	r28, 0x3d	; 61
    5608:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    560a:	a1 e4       	ldi	r26, 0x41	; 65
    560c:	b0 e0       	ldi	r27, 0x00	; 0
    560e:	e1 e4       	ldi	r30, 0x41	; 65
    5610:	f0 e0       	ldi	r31, 0x00	; 0
    5612:	80 81       	ld	r24, Z
    5614:	88 60       	ori	r24, 0x08	; 8
    5616:	8c 93       	st	X, r24
}
    5618:	cf 91       	pop	r28
    561a:	df 91       	pop	r29
    561c:	08 95       	ret

0000561e <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    561e:	df 93       	push	r29
    5620:	cf 93       	push	r28
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    5626:	a1 e4       	ldi	r26, 0x41	; 65
    5628:	b0 e0       	ldi	r27, 0x00	; 0
    562a:	e1 e4       	ldi	r30, 0x41	; 65
    562c:	f0 e0       	ldi	r31, 0x00	; 0
    562e:	80 81       	ld	r24, Z
    5630:	88 61       	ori	r24, 0x18	; 24
    5632:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    5634:	e1 e4       	ldi	r30, 0x41	; 65
    5636:	f0 e0       	ldi	r31, 0x00	; 0
    5638:	10 82       	st	Z, r1
}
    563a:	cf 91       	pop	r28
    563c:	df 91       	pop	r29
    563e:	08 95       	ret

00005640 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    5640:	df 93       	push	r29
    5642:	cf 93       	push	r28
    5644:	00 d0       	rcall	.+0      	; 0x5646 <TIMER_u8SetCallBack+0x6>
    5646:	00 d0       	rcall	.+0      	; 0x5648 <TIMER_u8SetCallBack+0x8>
    5648:	cd b7       	in	r28, 0x3d	; 61
    564a:	de b7       	in	r29, 0x3e	; 62
    564c:	9b 83       	std	Y+3, r25	; 0x03
    564e:	8a 83       	std	Y+2, r24	; 0x02
    5650:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    5652:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    5654:	8a 81       	ldd	r24, Y+2	; 0x02
    5656:	9b 81       	ldd	r25, Y+3	; 0x03
    5658:	00 97       	sbiw	r24, 0x00	; 0
    565a:	69 f0       	breq	.+26     	; 0x5676 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    565c:	8c 81       	ldd	r24, Y+4	; 0x04
    565e:	88 2f       	mov	r24, r24
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	88 0f       	add	r24, r24
    5664:	99 1f       	adc	r25, r25
    5666:	fc 01       	movw	r30, r24
    5668:	ea 56       	subi	r30, 0x6A	; 106
    566a:	fd 4f       	sbci	r31, 0xFD	; 253
    566c:	8a 81       	ldd	r24, Y+2	; 0x02
    566e:	9b 81       	ldd	r25, Y+3	; 0x03
    5670:	91 83       	std	Z+1, r25	; 0x01
    5672:	80 83       	st	Z, r24
    5674:	02 c0       	rjmp	.+4      	; 0x567a <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    5676:	82 e0       	ldi	r24, 0x02	; 2
    5678:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    567a:	89 81       	ldd	r24, Y+1	; 0x01
}
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	cf 91       	pop	r28
    5686:	df 91       	pop	r29
    5688:	08 95       	ret

0000568a <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    568a:	1f 92       	push	r1
    568c:	0f 92       	push	r0
    568e:	0f b6       	in	r0, 0x3f	; 63
    5690:	0f 92       	push	r0
    5692:	11 24       	eor	r1, r1
    5694:	2f 93       	push	r18
    5696:	3f 93       	push	r19
    5698:	4f 93       	push	r20
    569a:	5f 93       	push	r21
    569c:	6f 93       	push	r22
    569e:	7f 93       	push	r23
    56a0:	8f 93       	push	r24
    56a2:	9f 93       	push	r25
    56a4:	af 93       	push	r26
    56a6:	bf 93       	push	r27
    56a8:	ef 93       	push	r30
    56aa:	ff 93       	push	r31
    56ac:	df 93       	push	r29
    56ae:	cf 93       	push	r28
    56b0:	cd b7       	in	r28, 0x3d	; 61
    56b2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    56b4:	80 91 ac 02 	lds	r24, 0x02AC
    56b8:	90 91 ad 02 	lds	r25, 0x02AD
    56bc:	00 97       	sbiw	r24, 0x00	; 0
    56be:	29 f0       	breq	.+10     	; 0x56ca <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    56c0:	e0 91 ac 02 	lds	r30, 0x02AC
    56c4:	f0 91 ad 02 	lds	r31, 0x02AD
    56c8:	09 95       	icall
	}
}
    56ca:	cf 91       	pop	r28
    56cc:	df 91       	pop	r29
    56ce:	ff 91       	pop	r31
    56d0:	ef 91       	pop	r30
    56d2:	bf 91       	pop	r27
    56d4:	af 91       	pop	r26
    56d6:	9f 91       	pop	r25
    56d8:	8f 91       	pop	r24
    56da:	7f 91       	pop	r23
    56dc:	6f 91       	pop	r22
    56de:	5f 91       	pop	r21
    56e0:	4f 91       	pop	r20
    56e2:	3f 91       	pop	r19
    56e4:	2f 91       	pop	r18
    56e6:	0f 90       	pop	r0
    56e8:	0f be       	out	0x3f, r0	; 63
    56ea:	0f 90       	pop	r0
    56ec:	1f 90       	pop	r1
    56ee:	18 95       	reti

000056f0 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    56f0:	1f 92       	push	r1
    56f2:	0f 92       	push	r0
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	0f 92       	push	r0
    56f8:	11 24       	eor	r1, r1
    56fa:	2f 93       	push	r18
    56fc:	3f 93       	push	r19
    56fe:	4f 93       	push	r20
    5700:	5f 93       	push	r21
    5702:	6f 93       	push	r22
    5704:	7f 93       	push	r23
    5706:	8f 93       	push	r24
    5708:	9f 93       	push	r25
    570a:	af 93       	push	r26
    570c:	bf 93       	push	r27
    570e:	ef 93       	push	r30
    5710:	ff 93       	push	r31
    5712:	df 93       	push	r29
    5714:	cf 93       	push	r28
    5716:	cd b7       	in	r28, 0x3d	; 61
    5718:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    571a:	80 91 aa 02 	lds	r24, 0x02AA
    571e:	90 91 ab 02 	lds	r25, 0x02AB
    5722:	00 97       	sbiw	r24, 0x00	; 0
    5724:	29 f0       	breq	.+10     	; 0x5730 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    5726:	e0 91 aa 02 	lds	r30, 0x02AA
    572a:	f0 91 ab 02 	lds	r31, 0x02AB
    572e:	09 95       	icall
	}
}
    5730:	cf 91       	pop	r28
    5732:	df 91       	pop	r29
    5734:	ff 91       	pop	r31
    5736:	ef 91       	pop	r30
    5738:	bf 91       	pop	r27
    573a:	af 91       	pop	r26
    573c:	9f 91       	pop	r25
    573e:	8f 91       	pop	r24
    5740:	7f 91       	pop	r23
    5742:	6f 91       	pop	r22
    5744:	5f 91       	pop	r21
    5746:	4f 91       	pop	r20
    5748:	3f 91       	pop	r19
    574a:	2f 91       	pop	r18
    574c:	0f 90       	pop	r0
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	0f 90       	pop	r0
    5752:	1f 90       	pop	r1
    5754:	18 95       	reti

00005756 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    5756:	1f 92       	push	r1
    5758:	0f 92       	push	r0
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	0f 92       	push	r0
    575e:	11 24       	eor	r1, r1
    5760:	2f 93       	push	r18
    5762:	3f 93       	push	r19
    5764:	4f 93       	push	r20
    5766:	5f 93       	push	r21
    5768:	6f 93       	push	r22
    576a:	7f 93       	push	r23
    576c:	8f 93       	push	r24
    576e:	9f 93       	push	r25
    5770:	af 93       	push	r26
    5772:	bf 93       	push	r27
    5774:	ef 93       	push	r30
    5776:	ff 93       	push	r31
    5778:	df 93       	push	r29
    577a:	cf 93       	push	r28
    577c:	cd b7       	in	r28, 0x3d	; 61
    577e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    5780:	80 91 a8 02 	lds	r24, 0x02A8
    5784:	90 91 a9 02 	lds	r25, 0x02A9
    5788:	00 97       	sbiw	r24, 0x00	; 0
    578a:	29 f0       	breq	.+10     	; 0x5796 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    578c:	e0 91 a8 02 	lds	r30, 0x02A8
    5790:	f0 91 a9 02 	lds	r31, 0x02A9
    5794:	09 95       	icall
	}
}
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	ff 91       	pop	r31
    579c:	ef 91       	pop	r30
    579e:	bf 91       	pop	r27
    57a0:	af 91       	pop	r26
    57a2:	9f 91       	pop	r25
    57a4:	8f 91       	pop	r24
    57a6:	7f 91       	pop	r23
    57a8:	6f 91       	pop	r22
    57aa:	5f 91       	pop	r21
    57ac:	4f 91       	pop	r20
    57ae:	3f 91       	pop	r19
    57b0:	2f 91       	pop	r18
    57b2:	0f 90       	pop	r0
    57b4:	0f be       	out	0x3f, r0	; 63
    57b6:	0f 90       	pop	r0
    57b8:	1f 90       	pop	r1
    57ba:	18 95       	reti

000057bc <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    57bc:	1f 92       	push	r1
    57be:	0f 92       	push	r0
    57c0:	0f b6       	in	r0, 0x3f	; 63
    57c2:	0f 92       	push	r0
    57c4:	11 24       	eor	r1, r1
    57c6:	2f 93       	push	r18
    57c8:	3f 93       	push	r19
    57ca:	4f 93       	push	r20
    57cc:	5f 93       	push	r21
    57ce:	6f 93       	push	r22
    57d0:	7f 93       	push	r23
    57d2:	8f 93       	push	r24
    57d4:	9f 93       	push	r25
    57d6:	af 93       	push	r26
    57d8:	bf 93       	push	r27
    57da:	ef 93       	push	r30
    57dc:	ff 93       	push	r31
    57de:	df 93       	push	r29
    57e0:	cf 93       	push	r28
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    57e6:	80 91 a6 02 	lds	r24, 0x02A6
    57ea:	90 91 a7 02 	lds	r25, 0x02A7
    57ee:	00 97       	sbiw	r24, 0x00	; 0
    57f0:	29 f0       	breq	.+10     	; 0x57fc <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    57f2:	e0 91 a6 02 	lds	r30, 0x02A6
    57f6:	f0 91 a7 02 	lds	r31, 0x02A7
    57fa:	09 95       	icall
	}
}
    57fc:	cf 91       	pop	r28
    57fe:	df 91       	pop	r29
    5800:	ff 91       	pop	r31
    5802:	ef 91       	pop	r30
    5804:	bf 91       	pop	r27
    5806:	af 91       	pop	r26
    5808:	9f 91       	pop	r25
    580a:	8f 91       	pop	r24
    580c:	7f 91       	pop	r23
    580e:	6f 91       	pop	r22
    5810:	5f 91       	pop	r21
    5812:	4f 91       	pop	r20
    5814:	3f 91       	pop	r19
    5816:	2f 91       	pop	r18
    5818:	0f 90       	pop	r0
    581a:	0f be       	out	0x3f, r0	; 63
    581c:	0f 90       	pop	r0
    581e:	1f 90       	pop	r1
    5820:	18 95       	reti

00005822 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    5822:	1f 92       	push	r1
    5824:	0f 92       	push	r0
    5826:	0f b6       	in	r0, 0x3f	; 63
    5828:	0f 92       	push	r0
    582a:	11 24       	eor	r1, r1
    582c:	2f 93       	push	r18
    582e:	3f 93       	push	r19
    5830:	4f 93       	push	r20
    5832:	5f 93       	push	r21
    5834:	6f 93       	push	r22
    5836:	7f 93       	push	r23
    5838:	8f 93       	push	r24
    583a:	9f 93       	push	r25
    583c:	af 93       	push	r26
    583e:	bf 93       	push	r27
    5840:	ef 93       	push	r30
    5842:	ff 93       	push	r31
    5844:	df 93       	push	r29
    5846:	cf 93       	push	r28
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    584c:	80 91 a4 02 	lds	r24, 0x02A4
    5850:	90 91 a5 02 	lds	r25, 0x02A5
    5854:	00 97       	sbiw	r24, 0x00	; 0
    5856:	29 f0       	breq	.+10     	; 0x5862 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    5858:	e0 91 a4 02 	lds	r30, 0x02A4
    585c:	f0 91 a5 02 	lds	r31, 0x02A5
    5860:	09 95       	icall
	}
}
    5862:	cf 91       	pop	r28
    5864:	df 91       	pop	r29
    5866:	ff 91       	pop	r31
    5868:	ef 91       	pop	r30
    586a:	bf 91       	pop	r27
    586c:	af 91       	pop	r26
    586e:	9f 91       	pop	r25
    5870:	8f 91       	pop	r24
    5872:	7f 91       	pop	r23
    5874:	6f 91       	pop	r22
    5876:	5f 91       	pop	r21
    5878:	4f 91       	pop	r20
    587a:	3f 91       	pop	r19
    587c:	2f 91       	pop	r18
    587e:	0f 90       	pop	r0
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	0f 90       	pop	r0
    5884:	1f 90       	pop	r1
    5886:	18 95       	reti

00005888 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    5888:	1f 92       	push	r1
    588a:	0f 92       	push	r0
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	0f 92       	push	r0
    5890:	11 24       	eor	r1, r1
    5892:	2f 93       	push	r18
    5894:	3f 93       	push	r19
    5896:	4f 93       	push	r20
    5898:	5f 93       	push	r21
    589a:	6f 93       	push	r22
    589c:	7f 93       	push	r23
    589e:	8f 93       	push	r24
    58a0:	9f 93       	push	r25
    58a2:	af 93       	push	r26
    58a4:	bf 93       	push	r27
    58a6:	ef 93       	push	r30
    58a8:	ff 93       	push	r31
    58aa:	df 93       	push	r29
    58ac:	cf 93       	push	r28
    58ae:	cd b7       	in	r28, 0x3d	; 61
    58b0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    58b2:	80 91 a2 02 	lds	r24, 0x02A2
    58b6:	90 91 a3 02 	lds	r25, 0x02A3
    58ba:	00 97       	sbiw	r24, 0x00	; 0
    58bc:	29 f0       	breq	.+10     	; 0x58c8 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    58be:	e0 91 a2 02 	lds	r30, 0x02A2
    58c2:	f0 91 a3 02 	lds	r31, 0x02A3
    58c6:	09 95       	icall
	}
}
    58c8:	cf 91       	pop	r28
    58ca:	df 91       	pop	r29
    58cc:	ff 91       	pop	r31
    58ce:	ef 91       	pop	r30
    58d0:	bf 91       	pop	r27
    58d2:	af 91       	pop	r26
    58d4:	9f 91       	pop	r25
    58d6:	8f 91       	pop	r24
    58d8:	7f 91       	pop	r23
    58da:	6f 91       	pop	r22
    58dc:	5f 91       	pop	r21
    58de:	4f 91       	pop	r20
    58e0:	3f 91       	pop	r19
    58e2:	2f 91       	pop	r18
    58e4:	0f 90       	pop	r0
    58e6:	0f be       	out	0x3f, r0	; 63
    58e8:	0f 90       	pop	r0
    58ea:	1f 90       	pop	r1
    58ec:	18 95       	reti

000058ee <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    58ee:	1f 92       	push	r1
    58f0:	0f 92       	push	r0
    58f2:	0f b6       	in	r0, 0x3f	; 63
    58f4:	0f 92       	push	r0
    58f6:	11 24       	eor	r1, r1
    58f8:	2f 93       	push	r18
    58fa:	3f 93       	push	r19
    58fc:	4f 93       	push	r20
    58fe:	5f 93       	push	r21
    5900:	6f 93       	push	r22
    5902:	7f 93       	push	r23
    5904:	8f 93       	push	r24
    5906:	9f 93       	push	r25
    5908:	af 93       	push	r26
    590a:	bf 93       	push	r27
    590c:	ef 93       	push	r30
    590e:	ff 93       	push	r31
    5910:	df 93       	push	r29
    5912:	cf 93       	push	r28
    5914:	cd b7       	in	r28, 0x3d	; 61
    5916:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    5918:	80 91 a0 02 	lds	r24, 0x02A0
    591c:	90 91 a1 02 	lds	r25, 0x02A1
    5920:	00 97       	sbiw	r24, 0x00	; 0
    5922:	29 f0       	breq	.+10     	; 0x592e <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    5924:	e0 91 a0 02 	lds	r30, 0x02A0
    5928:	f0 91 a1 02 	lds	r31, 0x02A1
    592c:	09 95       	icall
	}
}
    592e:	cf 91       	pop	r28
    5930:	df 91       	pop	r29
    5932:	ff 91       	pop	r31
    5934:	ef 91       	pop	r30
    5936:	bf 91       	pop	r27
    5938:	af 91       	pop	r26
    593a:	9f 91       	pop	r25
    593c:	8f 91       	pop	r24
    593e:	7f 91       	pop	r23
    5940:	6f 91       	pop	r22
    5942:	5f 91       	pop	r21
    5944:	4f 91       	pop	r20
    5946:	3f 91       	pop	r19
    5948:	2f 91       	pop	r18
    594a:	0f 90       	pop	r0
    594c:	0f be       	out	0x3f, r0	; 63
    594e:	0f 90       	pop	r0
    5950:	1f 90       	pop	r1
    5952:	18 95       	reti

00005954 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    5954:	1f 92       	push	r1
    5956:	0f 92       	push	r0
    5958:	0f b6       	in	r0, 0x3f	; 63
    595a:	0f 92       	push	r0
    595c:	11 24       	eor	r1, r1
    595e:	2f 93       	push	r18
    5960:	3f 93       	push	r19
    5962:	4f 93       	push	r20
    5964:	5f 93       	push	r21
    5966:	6f 93       	push	r22
    5968:	7f 93       	push	r23
    596a:	8f 93       	push	r24
    596c:	9f 93       	push	r25
    596e:	af 93       	push	r26
    5970:	bf 93       	push	r27
    5972:	ef 93       	push	r30
    5974:	ff 93       	push	r31
    5976:	df 93       	push	r29
    5978:	cf 93       	push	r28
    597a:	cd b7       	in	r28, 0x3d	; 61
    597c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    597e:	80 91 9e 02 	lds	r24, 0x029E
    5982:	90 91 9f 02 	lds	r25, 0x029F
    5986:	00 97       	sbiw	r24, 0x00	; 0
    5988:	29 f0       	breq	.+10     	; 0x5994 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    598a:	e0 91 9e 02 	lds	r30, 0x029E
    598e:	f0 91 9f 02 	lds	r31, 0x029F
    5992:	09 95       	icall
	}
}
    5994:	cf 91       	pop	r28
    5996:	df 91       	pop	r29
    5998:	ff 91       	pop	r31
    599a:	ef 91       	pop	r30
    599c:	bf 91       	pop	r27
    599e:	af 91       	pop	r26
    59a0:	9f 91       	pop	r25
    59a2:	8f 91       	pop	r24
    59a4:	7f 91       	pop	r23
    59a6:	6f 91       	pop	r22
    59a8:	5f 91       	pop	r21
    59aa:	4f 91       	pop	r20
    59ac:	3f 91       	pop	r19
    59ae:	2f 91       	pop	r18
    59b0:	0f 90       	pop	r0
    59b2:	0f be       	out	0x3f, r0	; 63
    59b4:	0f 90       	pop	r0
    59b6:	1f 90       	pop	r1
    59b8:	18 95       	reti

000059ba <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    59ba:	df 93       	push	r29
    59bc:	cf 93       	push	r28
    59be:	00 d0       	rcall	.+0      	; 0x59c0 <USART_vInit+0x6>
    59c0:	0f 92       	push	r0
    59c2:	cd b7       	in	r28, 0x3d	; 61
    59c4:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    59c6:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    59c8:	ab e2       	ldi	r26, 0x2B	; 43
    59ca:	b0 e0       	ldi	r27, 0x00	; 0
    59cc:	eb e2       	ldi	r30, 0x2B	; 43
    59ce:	f0 e0       	ldi	r31, 0x00	; 0
    59d0:	80 81       	ld	r24, Z
    59d2:	8d 7f       	andi	r24, 0xFD	; 253
    59d4:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    59d6:	85 e0       	ldi	r24, 0x05	; 5
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	9a 83       	std	Y+2, r25	; 0x02
    59dc:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    59de:	e0 e4       	ldi	r30, 0x40	; 64
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    59e4:	e9 e2       	ldi	r30, 0x29	; 41
    59e6:	f0 e0       	ldi	r31, 0x00	; 0
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    59ec:	ab e2       	ldi	r26, 0x2B	; 43
    59ee:	b0 e0       	ldi	r27, 0x00	; 0
    59f0:	eb e2       	ldi	r30, 0x2B	; 43
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	80 81       	ld	r24, Z
    59f6:	8e 7f       	andi	r24, 0xFE	; 254
    59f8:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    59fa:	8b 81       	ldd	r24, Y+3	; 0x03
    59fc:	8f 7b       	andi	r24, 0xBF	; 191
    59fe:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    5a00:	8b 81       	ldd	r24, Y+3	; 0x03
    5a02:	8f 7e       	andi	r24, 0xEF	; 239
    5a04:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    5a06:	8b 81       	ldd	r24, Y+3	; 0x03
    5a08:	8f 7d       	andi	r24, 0xDF	; 223
    5a0a:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    5a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a0e:	87 7f       	andi	r24, 0xF7	; 247
    5a10:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    5a12:	8b 81       	ldd	r24, Y+3	; 0x03
    5a14:	82 60       	ori	r24, 0x02	; 2
    5a16:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    5a18:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1a:	84 60       	ori	r24, 0x04	; 4
    5a1c:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    5a1e:	aa e2       	ldi	r26, 0x2A	; 42
    5a20:	b0 e0       	ldi	r27, 0x00	; 0
    5a22:	ea e2       	ldi	r30, 0x2A	; 42
    5a24:	f0 e0       	ldi	r31, 0x00	; 0
    5a26:	80 81       	ld	r24, Z
    5a28:	8b 7f       	andi	r24, 0xFB	; 251
    5a2a:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    5a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2e:	80 68       	ori	r24, 0x80	; 128
    5a30:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    5a32:	e0 e4       	ldi	r30, 0x40	; 64
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	8b 81       	ldd	r24, Y+3	; 0x03
    5a38:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    5a3a:	aa e2       	ldi	r26, 0x2A	; 42
    5a3c:	b0 e0       	ldi	r27, 0x00	; 0
    5a3e:	ea e2       	ldi	r30, 0x2A	; 42
    5a40:	f0 e0       	ldi	r31, 0x00	; 0
    5a42:	80 81       	ld	r24, Z
    5a44:	8f 77       	andi	r24, 0x7F	; 127
    5a46:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    5a48:	aa e2       	ldi	r26, 0x2A	; 42
    5a4a:	b0 e0       	ldi	r27, 0x00	; 0
    5a4c:	ea e2       	ldi	r30, 0x2A	; 42
    5a4e:	f0 e0       	ldi	r31, 0x00	; 0
    5a50:	80 81       	ld	r24, Z
    5a52:	8f 7b       	andi	r24, 0xBF	; 191
    5a54:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    5a56:	aa e2       	ldi	r26, 0x2A	; 42
    5a58:	b0 e0       	ldi	r27, 0x00	; 0
    5a5a:	ea e2       	ldi	r30, 0x2A	; 42
    5a5c:	f0 e0       	ldi	r31, 0x00	; 0
    5a5e:	80 81       	ld	r24, Z
    5a60:	8f 7d       	andi	r24, 0xDF	; 223
    5a62:	8c 93       	st	X, r24
#endif

  /*Receive Enable*/
#if USART_RECEIVER_ENABLE == EABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    5a64:	aa e2       	ldi	r26, 0x2A	; 42
    5a66:	b0 e0       	ldi	r27, 0x00	; 0
    5a68:	ea e2       	ldi	r30, 0x2A	; 42
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	80 81       	ld	r24, Z
    5a6e:	80 61       	ori	r24, 0x10	; 16
    5a70:	8c 93       	st	X, r24
#endif

  /*Transmitter Enable*/
#if USART_TRANSMITTER_ENABLE == EABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    5a72:	aa e2       	ldi	r26, 0x2A	; 42
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	ea e2       	ldi	r30, 0x2A	; 42
    5a78:	f0 e0       	ldi	r31, 0x00	; 0
    5a7a:	80 81       	ld	r24, Z
    5a7c:	88 60       	ori	r24, 0x08	; 8
    5a7e:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    5a80:	0f 90       	pop	r0
    5a82:	0f 90       	pop	r0
    5a84:	0f 90       	pop	r0
    5a86:	cf 91       	pop	r28
    5a88:	df 91       	pop	r29
    5a8a:	08 95       	ret

00005a8c <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    5a8c:	df 93       	push	r29
    5a8e:	cf 93       	push	r28
    5a90:	00 d0       	rcall	.+0      	; 0x5a92 <USART_u8SendData+0x6>
    5a92:	00 d0       	rcall	.+0      	; 0x5a94 <USART_u8SendData+0x8>
    5a94:	00 d0       	rcall	.+0      	; 0x5a96 <USART_u8SendData+0xa>
    5a96:	cd b7       	in	r28, 0x3d	; 61
    5a98:	de b7       	in	r29, 0x3e	; 62
    5a9a:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    5a9c:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    5a9e:	19 82       	std	Y+1, r1	; 0x01
    5aa0:	1a 82       	std	Y+2, r1	; 0x02
    5aa2:	1b 82       	std	Y+3, r1	; 0x03
    5aa4:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
    5aa6:	80 91 ac 02 	lds	r24, 0x02AC
    5aaa:	88 23       	and	r24, r24
    5aac:	09 f0       	breq	.+2      	; 0x5ab0 <USART_u8SendData+0x24>
    5aae:	44 c0       	rjmp	.+136    	; 0x5b38 <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	80 93 ac 02 	sts	0x02AC, r24
    5ab6:	0b c0       	rjmp	.+22     	; 0x5ace <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((GET_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
    5ab8:	89 81       	ldd	r24, Y+1	; 0x01
    5aba:	9a 81       	ldd	r25, Y+2	; 0x02
    5abc:	ab 81       	ldd	r26, Y+3	; 0x03
    5abe:	bc 81       	ldd	r27, Y+4	; 0x04
    5ac0:	01 96       	adiw	r24, 0x01	; 1
    5ac2:	a1 1d       	adc	r26, r1
    5ac4:	b1 1d       	adc	r27, r1
    5ac6:	89 83       	std	Y+1, r24	; 0x01
    5ac8:	9a 83       	std	Y+2, r25	; 0x02
    5aca:	ab 83       	std	Y+3, r26	; 0x03
    5acc:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((GET_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    5ace:	eb e2       	ldi	r30, 0x2B	; 43
    5ad0:	f0 e0       	ldi	r31, 0x00	; 0
    5ad2:	80 81       	ld	r24, Z
    5ad4:	88 2f       	mov	r24, r24
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	80 72       	andi	r24, 0x20	; 32
    5ada:	90 70       	andi	r25, 0x00	; 0
    5adc:	95 95       	asr	r25
    5ade:	87 95       	ror	r24
    5ae0:	95 95       	asr	r25
    5ae2:	87 95       	ror	r24
    5ae4:	95 95       	asr	r25
    5ae6:	87 95       	ror	r24
    5ae8:	95 95       	asr	r25
    5aea:	87 95       	ror	r24
    5aec:	95 95       	asr	r25
    5aee:	87 95       	ror	r24
    5af0:	00 97       	sbiw	r24, 0x00	; 0
    5af2:	61 f4       	brne	.+24     	; 0x5b0c <USART_u8SendData+0x80>
    5af4:	89 81       	ldd	r24, Y+1	; 0x01
    5af6:	9a 81       	ldd	r25, Y+2	; 0x02
    5af8:	ab 81       	ldd	r26, Y+3	; 0x03
    5afa:	bc 81       	ldd	r27, Y+4	; 0x04
    5afc:	80 31       	cpi	r24, 0x10	; 16
    5afe:	27 e2       	ldi	r18, 0x27	; 39
    5b00:	92 07       	cpc	r25, r18
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	a2 07       	cpc	r26, r18
    5b06:	20 e0       	ldi	r18, 0x00	; 0
    5b08:	b2 07       	cpc	r27, r18
    5b0a:	b1 f6       	brne	.-84     	; 0x5ab8 <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    5b0c:	89 81       	ldd	r24, Y+1	; 0x01
    5b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b10:	ab 81       	ldd	r26, Y+3	; 0x03
    5b12:	bc 81       	ldd	r27, Y+4	; 0x04
    5b14:	80 31       	cpi	r24, 0x10	; 16
    5b16:	27 e2       	ldi	r18, 0x27	; 39
    5b18:	92 07       	cpc	r25, r18
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	a2 07       	cpc	r26, r18
    5b1e:	20 e0       	ldi	r18, 0x00	; 0
    5b20:	b2 07       	cpc	r27, r18
    5b22:	19 f4       	brne	.+6      	; 0x5b2a <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    5b24:	84 e0       	ldi	r24, 0x04	; 4
    5b26:	8d 83       	std	Y+5, r24	; 0x05
    5b28:	04 c0       	rjmp	.+8      	; 0x5b32 <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
    5b2a:	ec e2       	ldi	r30, 0x2C	; 44
    5b2c:	f0 e0       	ldi	r31, 0x00	; 0
    5b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    5b30:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
    5b32:	10 92 ac 02 	sts	0x02AC, r1
    5b36:	02 c0       	rjmp	.+4      	; 0x5b3c <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    5b38:	83 e0       	ldi	r24, 0x03	; 3
    5b3a:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    5b3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5b3e:	26 96       	adiw	r28, 0x06	; 6
    5b40:	0f b6       	in	r0, 0x3f	; 63
    5b42:	f8 94       	cli
    5b44:	de bf       	out	0x3e, r29	; 62
    5b46:	0f be       	out	0x3f, r0	; 63
    5b48:	cd bf       	out	0x3d, r28	; 61
    5b4a:	cf 91       	pop	r28
    5b4c:	df 91       	pop	r29
    5b4e:	08 95       	ret

00005b50 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    5b50:	df 93       	push	r29
    5b52:	cf 93       	push	r28
    5b54:	cd b7       	in	r28, 0x3d	; 61
    5b56:	de b7       	in	r29, 0x3e	; 62
    5b58:	27 97       	sbiw	r28, 0x07	; 7
    5b5a:	0f b6       	in	r0, 0x3f	; 63
    5b5c:	f8 94       	cli
    5b5e:	de bf       	out	0x3e, r29	; 62
    5b60:	0f be       	out	0x3f, r0	; 63
    5b62:	cd bf       	out	0x3d, r28	; 61
    5b64:	9f 83       	std	Y+7, r25	; 0x07
    5b66:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    5b68:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    5b6a:	19 82       	std	Y+1, r1	; 0x01
    5b6c:	1a 82       	std	Y+2, r1	; 0x02
    5b6e:	1b 82       	std	Y+3, r1	; 0x03
    5b70:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
    5b72:	8e 81       	ldd	r24, Y+6	; 0x06
    5b74:	9f 81       	ldd	r25, Y+7	; 0x07
    5b76:	00 97       	sbiw	r24, 0x00	; 0
    5b78:	09 f4       	brne	.+2      	; 0x5b7c <USART_u8ReceiveData+0x2c>
    5b7a:	46 c0       	rjmp	.+140    	; 0x5c08 <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
    5b7c:	80 91 ac 02 	lds	r24, 0x02AC
    5b80:	88 23       	and	r24, r24
    5b82:	09 f0       	breq	.+2      	; 0x5b86 <USART_u8ReceiveData+0x36>
    5b84:	3e c0       	rjmp	.+124    	; 0x5c02 <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	80 93 ac 02 	sts	0x02AC, r24
    5b8c:	0b c0       	rjmp	.+22     	; 0x5ba4 <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((GET_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
    5b8e:	89 81       	ldd	r24, Y+1	; 0x01
    5b90:	9a 81       	ldd	r25, Y+2	; 0x02
    5b92:	ab 81       	ldd	r26, Y+3	; 0x03
    5b94:	bc 81       	ldd	r27, Y+4	; 0x04
    5b96:	01 96       	adiw	r24, 0x01	; 1
    5b98:	a1 1d       	adc	r26, r1
    5b9a:	b1 1d       	adc	r27, r1
    5b9c:	89 83       	std	Y+1, r24	; 0x01
    5b9e:	9a 83       	std	Y+2, r25	; 0x02
    5ba0:	ab 83       	std	Y+3, r26	; 0x03
    5ba2:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((GET_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    5ba4:	eb e2       	ldi	r30, 0x2B	; 43
    5ba6:	f0 e0       	ldi	r31, 0x00	; 0
    5ba8:	80 81       	ld	r24, Z
    5baa:	88 1f       	adc	r24, r24
    5bac:	88 27       	eor	r24, r24
    5bae:	88 1f       	adc	r24, r24
    5bb0:	88 2f       	mov	r24, r24
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	90 70       	andi	r25, 0x00	; 0
    5bb6:	00 97       	sbiw	r24, 0x00	; 0
    5bb8:	61 f4       	brne	.+24     	; 0x5bd2 <USART_u8ReceiveData+0x82>
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    5bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    5bc2:	80 31       	cpi	r24, 0x10	; 16
    5bc4:	27 e2       	ldi	r18, 0x27	; 39
    5bc6:	92 07       	cpc	r25, r18
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	a2 07       	cpc	r26, r18
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	b2 07       	cpc	r27, r18
    5bd0:	f1 f6       	brne	.-68     	; 0x5b8e <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    5bd2:	89 81       	ldd	r24, Y+1	; 0x01
    5bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd6:	ab 81       	ldd	r26, Y+3	; 0x03
    5bd8:	bc 81       	ldd	r27, Y+4	; 0x04
    5bda:	80 31       	cpi	r24, 0x10	; 16
    5bdc:	27 e2       	ldi	r18, 0x27	; 39
    5bde:	92 07       	cpc	r25, r18
    5be0:	20 e0       	ldi	r18, 0x00	; 0
    5be2:	a2 07       	cpc	r26, r18
    5be4:	20 e0       	ldi	r18, 0x00	; 0
    5be6:	b2 07       	cpc	r27, r18
    5be8:	19 f4       	brne	.+6      	; 0x5bf0 <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    5bea:	84 e0       	ldi	r24, 0x04	; 4
    5bec:	8d 83       	std	Y+5, r24	; 0x05
    5bee:	06 c0       	rjmp	.+12     	; 0x5bfc <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    5bf0:	ec e2       	ldi	r30, 0x2C	; 44
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	80 81       	ld	r24, Z
    5bf6:	ee 81       	ldd	r30, Y+6	; 0x06
    5bf8:	ff 81       	ldd	r31, Y+7	; 0x07
    5bfa:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
    5bfc:	10 92 ac 02 	sts	0x02AC, r1
    5c00:	05 c0       	rjmp	.+10     	; 0x5c0c <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    5c02:	83 e0       	ldi	r24, 0x03	; 3
    5c04:	8d 83       	std	Y+5, r24	; 0x05
    5c06:	02 c0       	rjmp	.+4      	; 0x5c0c <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    5c08:	82 e0       	ldi	r24, 0x02	; 2
    5c0a:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    5c0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5c0e:	27 96       	adiw	r28, 0x07	; 7
    5c10:	0f b6       	in	r0, 0x3f	; 63
    5c12:	f8 94       	cli
    5c14:	de bf       	out	0x3e, r29	; 62
    5c16:	0f be       	out	0x3f, r0	; 63
    5c18:	cd bf       	out	0x3d, r28	; 61
    5c1a:	cf 91       	pop	r28
    5c1c:	df 91       	pop	r29
    5c1e:	08 95       	ret

00005c20 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    5c20:	df 93       	push	r29
    5c22:	cf 93       	push	r28
    5c24:	cd b7       	in	r28, 0x3d	; 61
    5c26:	de b7       	in	r29, 0x3e	; 62
    5c28:	65 97       	sbiw	r28, 0x15	; 21
    5c2a:	0f b6       	in	r0, 0x3f	; 63
    5c2c:	f8 94       	cli
    5c2e:	de bf       	out	0x3e, r29	; 62
    5c30:	0f be       	out	0x3f, r0	; 63
    5c32:	cd bf       	out	0x3d, r28	; 61
    5c34:	9d 8b       	std	Y+21, r25	; 0x15
    5c36:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_u8ErrorState = OK;
    5c38:	1b 8a       	std	Y+19, r1	; 0x13

  u32 Local_u32Index = 0;
    5c3a:	1f 86       	std	Y+15, r1	; 0x0f
    5c3c:	18 8a       	std	Y+16, r1	; 0x10
    5c3e:	19 8a       	std	Y+17, r1	; 0x11
    5c40:	1a 8a       	std	Y+18, r1	; 0x12

  if (Copy_pu8String != NULL)
    5c42:	8c 89       	ldd	r24, Y+20	; 0x14
    5c44:	9d 89       	ldd	r25, Y+21	; 0x15
    5c46:	00 97       	sbiw	r24, 0x00	; 0
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <USART_u8SendStringSynch+0x2c>
    5c4a:	98 c0       	rjmp	.+304    	; 0x5d7c <USART_u8SendStringSynch+0x15c>
    5c4c:	8b c0       	rjmp	.+278    	; 0x5d64 <USART_u8SendStringSynch+0x144>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    5c4e:	2f 85       	ldd	r18, Y+15	; 0x0f
    5c50:	38 89       	ldd	r19, Y+16	; 0x10
    5c52:	8c 89       	ldd	r24, Y+20	; 0x14
    5c54:	9d 89       	ldd	r25, Y+21	; 0x15
    5c56:	fc 01       	movw	r30, r24
    5c58:	e2 0f       	add	r30, r18
    5c5a:	f3 1f       	adc	r31, r19
    5c5c:	80 81       	ld	r24, Z
    5c5e:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <USART_u8SendData>
    5c62:	8b 8b       	std	Y+19, r24	; 0x13
    5c64:	80 e0       	ldi	r24, 0x00	; 0
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	a8 ec       	ldi	r26, 0xC8	; 200
    5c6a:	b2 e4       	ldi	r27, 0x42	; 66
    5c6c:	8b 87       	std	Y+11, r24	; 0x0b
    5c6e:	9c 87       	std	Y+12, r25	; 0x0c
    5c70:	ad 87       	std	Y+13, r26	; 0x0d
    5c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c7c:	20 e0       	ldi	r18, 0x00	; 0
    5c7e:	30 e0       	ldi	r19, 0x00	; 0
    5c80:	4a ef       	ldi	r20, 0xFA	; 250
    5c82:	54 e4       	ldi	r21, 0x44	; 68
    5c84:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	8f 83       	std	Y+7, r24	; 0x07
    5c8e:	98 87       	std	Y+8, r25	; 0x08
    5c90:	a9 87       	std	Y+9, r26	; 0x09
    5c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c94:	6f 81       	ldd	r22, Y+7	; 0x07
    5c96:	78 85       	ldd	r23, Y+8	; 0x08
    5c98:	89 85       	ldd	r24, Y+9	; 0x09
    5c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	40 e8       	ldi	r20, 0x80	; 128
    5ca2:	5f e3       	ldi	r21, 0x3F	; 63
    5ca4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5ca8:	88 23       	and	r24, r24
    5caa:	2c f4       	brge	.+10     	; 0x5cb6 <USART_u8SendStringSynch+0x96>
		__ticks = 1;
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	9e 83       	std	Y+6, r25	; 0x06
    5cb2:	8d 83       	std	Y+5, r24	; 0x05
    5cb4:	3f c0       	rjmp	.+126    	; 0x5d34 <USART_u8SendStringSynch+0x114>
	else if (__tmp > 65535)
    5cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    5cb8:	78 85       	ldd	r23, Y+8	; 0x08
    5cba:	89 85       	ldd	r24, Y+9	; 0x09
    5cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	3f ef       	ldi	r19, 0xFF	; 255
    5cc2:	4f e7       	ldi	r20, 0x7F	; 127
    5cc4:	57 e4       	ldi	r21, 0x47	; 71
    5cc6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5cca:	18 16       	cp	r1, r24
    5ccc:	4c f5       	brge	.+82     	; 0x5d20 <USART_u8SendStringSynch+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	40 e2       	ldi	r20, 0x20	; 32
    5cdc:	51 e4       	ldi	r21, 0x41	; 65
    5cde:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	bc 01       	movw	r22, r24
    5ce8:	cd 01       	movw	r24, r26
    5cea:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cee:	dc 01       	movw	r26, r24
    5cf0:	cb 01       	movw	r24, r22
    5cf2:	9e 83       	std	Y+6, r25	; 0x06
    5cf4:	8d 83       	std	Y+5, r24	; 0x05
    5cf6:	0f c0       	rjmp	.+30     	; 0x5d16 <USART_u8SendStringSynch+0xf6>
    5cf8:	88 ec       	ldi	r24, 0xC8	; 200
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	9c 83       	std	Y+4, r25	; 0x04
    5cfe:	8b 83       	std	Y+3, r24	; 0x03
    5d00:	8b 81       	ldd	r24, Y+3	; 0x03
    5d02:	9c 81       	ldd	r25, Y+4	; 0x04
    5d04:	01 97       	sbiw	r24, 0x01	; 1
    5d06:	f1 f7       	brne	.-4      	; 0x5d04 <USART_u8SendStringSynch+0xe4>
    5d08:	9c 83       	std	Y+4, r25	; 0x04
    5d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d10:	01 97       	sbiw	r24, 0x01	; 1
    5d12:	9e 83       	std	Y+6, r25	; 0x06
    5d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d16:	8d 81       	ldd	r24, Y+5	; 0x05
    5d18:	9e 81       	ldd	r25, Y+6	; 0x06
    5d1a:	00 97       	sbiw	r24, 0x00	; 0
    5d1c:	69 f7       	brne	.-38     	; 0x5cf8 <USART_u8SendStringSynch+0xd8>
    5d1e:	14 c0       	rjmp	.+40     	; 0x5d48 <USART_u8SendStringSynch+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d20:	6f 81       	ldd	r22, Y+7	; 0x07
    5d22:	78 85       	ldd	r23, Y+8	; 0x08
    5d24:	89 85       	ldd	r24, Y+9	; 0x09
    5d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d28:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	cb 01       	movw	r24, r22
    5d30:	9e 83       	std	Y+6, r25	; 0x06
    5d32:	8d 83       	std	Y+5, r24	; 0x05
    5d34:	8d 81       	ldd	r24, Y+5	; 0x05
    5d36:	9e 81       	ldd	r25, Y+6	; 0x06
    5d38:	9a 83       	std	Y+2, r25	; 0x02
    5d3a:	89 83       	std	Y+1, r24	; 0x01
    5d3c:	89 81       	ldd	r24, Y+1	; 0x01
    5d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d40:	01 97       	sbiw	r24, 0x01	; 1
    5d42:	f1 f7       	brne	.-4      	; 0x5d40 <USART_u8SendStringSynch+0x120>
    5d44:	9a 83       	std	Y+2, r25	; 0x02
    5d46:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(100);
      Local_u32Index++;
    5d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d4a:	98 89       	ldd	r25, Y+16	; 0x10
    5d4c:	a9 89       	ldd	r26, Y+17	; 0x11
    5d4e:	ba 89       	ldd	r27, Y+18	; 0x12
    5d50:	01 96       	adiw	r24, 0x01	; 1
    5d52:	a1 1d       	adc	r26, r1
    5d54:	b1 1d       	adc	r27, r1
    5d56:	8f 87       	std	Y+15, r24	; 0x0f
    5d58:	98 8b       	std	Y+16, r25	; 0x10
    5d5a:	a9 8b       	std	Y+17, r26	; 0x11
    5d5c:	ba 8b       	std	Y+18, r27	; 0x12
      if (Local_u8ErrorState != OK)
    5d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d60:	88 23       	and	r24, r24
    5d62:	71 f4       	brne	.+28     	; 0x5d80 <USART_u8SendStringSynch+0x160>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    5d64:	2f 85       	ldd	r18, Y+15	; 0x0f
    5d66:	38 89       	ldd	r19, Y+16	; 0x10
    5d68:	8c 89       	ldd	r24, Y+20	; 0x14
    5d6a:	9d 89       	ldd	r25, Y+21	; 0x15
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	e2 0f       	add	r30, r18
    5d70:	f3 1f       	adc	r31, r19
    5d72:	80 81       	ld	r24, Z
    5d74:	88 23       	and	r24, r24
    5d76:	09 f0       	breq	.+2      	; 0x5d7a <USART_u8SendStringSynch+0x15a>
    5d78:	6a cf       	rjmp	.-300    	; 0x5c4e <USART_u8SendStringSynch+0x2e>
    5d7a:	02 c0       	rjmp	.+4      	; 0x5d80 <USART_u8SendStringSynch+0x160>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    5d7c:	82 e0       	ldi	r24, 0x02	; 2
    5d7e:	8b 8b       	std	Y+19, r24	; 0x13
  }

  return Local_u8ErrorState;
    5d80:	8b 89       	ldd	r24, Y+19	; 0x13
}
    5d82:	65 96       	adiw	r28, 0x15	; 21
    5d84:	0f b6       	in	r0, 0x3f	; 63
    5d86:	f8 94       	cli
    5d88:	de bf       	out	0x3e, r29	; 62
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	cd bf       	out	0x3d, r28	; 61
    5d8e:	cf 91       	pop	r28
    5d90:	df 91       	pop	r29
    5d92:	08 95       	ret

00005d94 <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    5d94:	df 93       	push	r29
    5d96:	cf 93       	push	r28
    5d98:	00 d0       	rcall	.+0      	; 0x5d9a <USART_u8SendStringAsynch+0x6>
    5d9a:	00 d0       	rcall	.+0      	; 0x5d9c <USART_u8SendStringAsynch+0x8>
    5d9c:	0f 92       	push	r0
    5d9e:	cd b7       	in	r28, 0x3d	; 61
    5da0:	de b7       	in	r29, 0x3e	; 62
    5da2:	9b 83       	std	Y+3, r25	; 0x03
    5da4:	8a 83       	std	Y+2, r24	; 0x02
    5da6:	7d 83       	std	Y+5, r23	; 0x05
    5da8:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    5daa:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    5dac:	80 91 ac 02 	lds	r24, 0x02AC
    5db0:	88 23       	and	r24, r24
    5db2:	99 f5       	brne	.+102    	; 0x5e1a <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    5db4:	8a 81       	ldd	r24, Y+2	; 0x02
    5db6:	9b 81       	ldd	r25, Y+3	; 0x03
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	61 f1       	breq	.+88     	; 0x5e14 <USART_u8SendStringAsynch+0x80>
    5dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    5dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    5dc0:	00 97       	sbiw	r24, 0x00	; 0
    5dc2:	41 f1       	breq	.+80     	; 0x5e14 <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	80 93 ac 02 	sts	0x02AC, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    5dca:	8a 81       	ldd	r24, Y+2	; 0x02
    5dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    5dce:	90 93 a7 02 	sts	0x02A7, r25
    5dd2:	80 93 a6 02 	sts	0x02A6, r24
      USART_pvNotificationFunc = NotificationFunc;
    5dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    5dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    5dda:	90 93 ab 02 	sts	0x02AB, r25
    5dde:	80 93 aa 02 	sts	0x02AA, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    5de2:	10 92 ae 02 	sts	0x02AE, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    5de6:	ac e2       	ldi	r26, 0x2C	; 44
    5de8:	b0 e0       	ldi	r27, 0x00	; 0
    5dea:	20 91 a6 02 	lds	r18, 0x02A6
    5dee:	30 91 a7 02 	lds	r19, 0x02A7
    5df2:	80 91 ae 02 	lds	r24, 0x02AE
    5df6:	88 2f       	mov	r24, r24
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	f9 01       	movw	r30, r18
    5dfc:	e8 0f       	add	r30, r24
    5dfe:	f9 1f       	adc	r31, r25
    5e00:	80 81       	ld	r24, Z
    5e02:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    5e04:	aa e2       	ldi	r26, 0x2A	; 42
    5e06:	b0 e0       	ldi	r27, 0x00	; 0
    5e08:	ea e2       	ldi	r30, 0x2A	; 42
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	80 81       	ld	r24, Z
    5e0e:	80 64       	ori	r24, 0x40	; 64
    5e10:	8c 93       	st	X, r24
    5e12:	05 c0       	rjmp	.+10     	; 0x5e1e <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    5e14:	82 e0       	ldi	r24, 0x02	; 2
    5e16:	89 83       	std	Y+1, r24	; 0x01
    5e18:	02 c0       	rjmp	.+4      	; 0x5e1e <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    5e1a:	83 e0       	ldi	r24, 0x03	; 3
    5e1c:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    5e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5e20:	0f 90       	pop	r0
    5e22:	0f 90       	pop	r0
    5e24:	0f 90       	pop	r0
    5e26:	0f 90       	pop	r0
    5e28:	0f 90       	pop	r0
    5e2a:	cf 91       	pop	r28
    5e2c:	df 91       	pop	r29
    5e2e:	08 95       	ret

00005e30 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    5e30:	df 93       	push	r29
    5e32:	cf 93       	push	r28
    5e34:	cd b7       	in	r28, 0x3d	; 61
    5e36:	de b7       	in	r29, 0x3e	; 62
    5e38:	2b 97       	sbiw	r28, 0x0b	; 11
    5e3a:	0f b6       	in	r0, 0x3f	; 63
    5e3c:	f8 94       	cli
    5e3e:	de bf       	out	0x3e, r29	; 62
    5e40:	0f be       	out	0x3f, r0	; 63
    5e42:	cd bf       	out	0x3d, r28	; 61
    5e44:	9f 83       	std	Y+7, r25	; 0x07
    5e46:	8e 83       	std	Y+6, r24	; 0x06
    5e48:	48 87       	std	Y+8, r20	; 0x08
    5e4a:	59 87       	std	Y+9, r21	; 0x09
    5e4c:	6a 87       	std	Y+10, r22	; 0x0a
    5e4e:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    5e50:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    5e52:	8e 81       	ldd	r24, Y+6	; 0x06
    5e54:	9f 81       	ldd	r25, Y+7	; 0x07
    5e56:	00 97       	sbiw	r24, 0x00	; 0
    5e58:	51 f1       	breq	.+84     	; 0x5eae <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    5e5a:	19 82       	std	Y+1, r1	; 0x01
    5e5c:	1a 82       	std	Y+2, r1	; 0x02
    5e5e:	1b 82       	std	Y+3, r1	; 0x03
    5e60:	1c 82       	std	Y+4, r1	; 0x04
    5e62:	17 c0       	rjmp	.+46     	; 0x5e92 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    5e64:	29 81       	ldd	r18, Y+1	; 0x01
    5e66:	3a 81       	ldd	r19, Y+2	; 0x02
    5e68:	8e 81       	ldd	r24, Y+6	; 0x06
    5e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    5e6c:	82 0f       	add	r24, r18
    5e6e:	93 1f       	adc	r25, r19
    5e70:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
    5e74:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
    5e76:	8d 81       	ldd	r24, Y+5	; 0x05
    5e78:	88 23       	and	r24, r24
    5e7a:	d9 f4       	brne	.+54     	; 0x5eb2 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    5e7c:	89 81       	ldd	r24, Y+1	; 0x01
    5e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e80:	ab 81       	ldd	r26, Y+3	; 0x03
    5e82:	bc 81       	ldd	r27, Y+4	; 0x04
    5e84:	01 96       	adiw	r24, 0x01	; 1
    5e86:	a1 1d       	adc	r26, r1
    5e88:	b1 1d       	adc	r27, r1
    5e8a:	89 83       	std	Y+1, r24	; 0x01
    5e8c:	9a 83       	std	Y+2, r25	; 0x02
    5e8e:	ab 83       	std	Y+3, r26	; 0x03
    5e90:	bc 83       	std	Y+4, r27	; 0x04
    5e92:	29 81       	ldd	r18, Y+1	; 0x01
    5e94:	3a 81       	ldd	r19, Y+2	; 0x02
    5e96:	4b 81       	ldd	r20, Y+3	; 0x03
    5e98:	5c 81       	ldd	r21, Y+4	; 0x04
    5e9a:	88 85       	ldd	r24, Y+8	; 0x08
    5e9c:	99 85       	ldd	r25, Y+9	; 0x09
    5e9e:	aa 85       	ldd	r26, Y+10	; 0x0a
    5ea0:	bb 85       	ldd	r27, Y+11	; 0x0b
    5ea2:	28 17       	cp	r18, r24
    5ea4:	39 07       	cpc	r19, r25
    5ea6:	4a 07       	cpc	r20, r26
    5ea8:	5b 07       	cpc	r21, r27
    5eaa:	e0 f2       	brcs	.-72     	; 0x5e64 <USART_u8ReceiveBufferSynch+0x34>
    5eac:	02 c0       	rjmp	.+4      	; 0x5eb2 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    5eae:	82 e0       	ldi	r24, 0x02	; 2
    5eb0:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    5eb2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5eb4:	2b 96       	adiw	r28, 0x0b	; 11
    5eb6:	0f b6       	in	r0, 0x3f	; 63
    5eb8:	f8 94       	cli
    5eba:	de bf       	out	0x3e, r29	; 62
    5ebc:	0f be       	out	0x3f, r0	; 63
    5ebe:	cd bf       	out	0x3d, r28	; 61
    5ec0:	cf 91       	pop	r28
    5ec2:	df 91       	pop	r29
    5ec4:	08 95       	ret

00005ec6 <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    5ec6:	df 93       	push	r29
    5ec8:	cf 93       	push	r28
    5eca:	cd b7       	in	r28, 0x3d	; 61
    5ecc:	de b7       	in	r29, 0x3e	; 62
    5ece:	29 97       	sbiw	r28, 0x09	; 9
    5ed0:	0f b6       	in	r0, 0x3f	; 63
    5ed2:	f8 94       	cli
    5ed4:	de bf       	out	0x3e, r29	; 62
    5ed6:	0f be       	out	0x3f, r0	; 63
    5ed8:	cd bf       	out	0x3d, r28	; 61
    5eda:	9b 83       	std	Y+3, r25	; 0x03
    5edc:	8a 83       	std	Y+2, r24	; 0x02
    5ede:	4c 83       	std	Y+4, r20	; 0x04
    5ee0:	5d 83       	std	Y+5, r21	; 0x05
    5ee2:	6e 83       	std	Y+6, r22	; 0x06
    5ee4:	7f 83       	std	Y+7, r23	; 0x07
    5ee6:	39 87       	std	Y+9, r19	; 0x09
    5ee8:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    5eea:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    5eec:	80 91 ac 02 	lds	r24, 0x02AC
    5ef0:	88 23       	and	r24, r24
    5ef2:	39 f5       	brne	.+78     	; 0x5f42 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    5ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ef8:	00 97       	sbiw	r24, 0x00	; 0
    5efa:	01 f1       	breq	.+64     	; 0x5f3c <USART_u8ReceiveBufferAsynch+0x76>
    5efc:	88 85       	ldd	r24, Y+8	; 0x08
    5efe:	99 85       	ldd	r25, Y+9	; 0x09
    5f00:	00 97       	sbiw	r24, 0x00	; 0
    5f02:	e1 f0       	breq	.+56     	; 0x5f3c <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	80 93 ac 02 	sts	0x02AC, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    5f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5f0e:	90 93 a9 02 	sts	0x02A9, r25
    5f12:	80 93 a8 02 	sts	0x02A8, r24
      USART_pvNotificationFunc = NotificationFunc;
    5f16:	88 85       	ldd	r24, Y+8	; 0x08
    5f18:	99 85       	ldd	r25, Y+9	; 0x09
    5f1a:	90 93 ab 02 	sts	0x02AB, r25
    5f1e:	80 93 aa 02 	sts	0x02AA, r24
      USART_u8BufferSize = Copy_u32BufferSize;
    5f22:	8c 81       	ldd	r24, Y+4	; 0x04
    5f24:	80 93 ad 02 	sts	0x02AD, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    5f28:	10 92 ae 02 	sts	0x02AE, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    5f2c:	aa e2       	ldi	r26, 0x2A	; 42
    5f2e:	b0 e0       	ldi	r27, 0x00	; 0
    5f30:	ea e2       	ldi	r30, 0x2A	; 42
    5f32:	f0 e0       	ldi	r31, 0x00	; 0
    5f34:	80 81       	ld	r24, Z
    5f36:	80 68       	ori	r24, 0x80	; 128
    5f38:	8c 93       	st	X, r24
    5f3a:	05 c0       	rjmp	.+10     	; 0x5f46 <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    5f3c:	82 e0       	ldi	r24, 0x02	; 2
    5f3e:	89 83       	std	Y+1, r24	; 0x01
    5f40:	02 c0       	rjmp	.+4      	; 0x5f46 <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    5f42:	83 e0       	ldi	r24, 0x03	; 3
    5f44:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f48:	29 96       	adiw	r28, 0x09	; 9
    5f4a:	0f b6       	in	r0, 0x3f	; 63
    5f4c:	f8 94       	cli
    5f4e:	de bf       	out	0x3e, r29	; 62
    5f50:	0f be       	out	0x3f, r0	; 63
    5f52:	cd bf       	out	0x3d, r28	; 61
    5f54:	cf 91       	pop	r28
    5f56:	df 91       	pop	r29
    5f58:	08 95       	ret

00005f5a <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    5f5a:	1f 92       	push	r1
    5f5c:	0f 92       	push	r0
    5f5e:	0f b6       	in	r0, 0x3f	; 63
    5f60:	0f 92       	push	r0
    5f62:	11 24       	eor	r1, r1
    5f64:	2f 93       	push	r18
    5f66:	3f 93       	push	r19
    5f68:	4f 93       	push	r20
    5f6a:	5f 93       	push	r21
    5f6c:	6f 93       	push	r22
    5f6e:	7f 93       	push	r23
    5f70:	8f 93       	push	r24
    5f72:	9f 93       	push	r25
    5f74:	af 93       	push	r26
    5f76:	bf 93       	push	r27
    5f78:	ef 93       	push	r30
    5f7a:	ff 93       	push	r31
    5f7c:	df 93       	push	r29
    5f7e:	cf 93       	push	r28
    5f80:	cd b7       	in	r28, 0x3d	; 61
    5f82:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    5f84:	20 91 a8 02 	lds	r18, 0x02A8
    5f88:	30 91 a9 02 	lds	r19, 0x02A9
    5f8c:	80 91 ae 02 	lds	r24, 0x02AE
    5f90:	88 2f       	mov	r24, r24
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	d9 01       	movw	r26, r18
    5f96:	a8 0f       	add	r26, r24
    5f98:	b9 1f       	adc	r27, r25
    5f9a:	ec e2       	ldi	r30, 0x2C	; 44
    5f9c:	f0 e0       	ldi	r31, 0x00	; 0
    5f9e:	80 81       	ld	r24, Z
    5fa0:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    5fa2:	80 91 ae 02 	lds	r24, 0x02AE
    5fa6:	8f 5f       	subi	r24, 0xFF	; 255
    5fa8:	80 93 ae 02 	sts	0x02AE, r24

  if (USART_u8Index == USART_u8BufferSize)
    5fac:	90 91 ae 02 	lds	r25, 0x02AE
    5fb0:	80 91 ad 02 	lds	r24, 0x02AD
    5fb4:	98 17       	cp	r25, r24
    5fb6:	b1 f4       	brne	.+44     	; 0x5fe4 <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    5fb8:	10 92 ae 02 	sts	0x02AE, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    5fbc:	10 92 ac 02 	sts	0x02AC, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    5fc0:	80 91 aa 02 	lds	r24, 0x02AA
    5fc4:	90 91 ab 02 	lds	r25, 0x02AB
    5fc8:	00 97       	sbiw	r24, 0x00	; 0
    5fca:	29 f0       	breq	.+10     	; 0x5fd6 <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    5fcc:	e0 91 aa 02 	lds	r30, 0x02AA
    5fd0:	f0 91 ab 02 	lds	r31, 0x02AB
    5fd4:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    5fd6:	aa e2       	ldi	r26, 0x2A	; 42
    5fd8:	b0 e0       	ldi	r27, 0x00	; 0
    5fda:	ea e2       	ldi	r30, 0x2A	; 42
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	80 81       	ld	r24, Z
    5fe0:	8f 77       	andi	r24, 0x7F	; 127
    5fe2:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    5fe4:	cf 91       	pop	r28
    5fe6:	df 91       	pop	r29
    5fe8:	ff 91       	pop	r31
    5fea:	ef 91       	pop	r30
    5fec:	bf 91       	pop	r27
    5fee:	af 91       	pop	r26
    5ff0:	9f 91       	pop	r25
    5ff2:	8f 91       	pop	r24
    5ff4:	7f 91       	pop	r23
    5ff6:	6f 91       	pop	r22
    5ff8:	5f 91       	pop	r21
    5ffa:	4f 91       	pop	r20
    5ffc:	3f 91       	pop	r19
    5ffe:	2f 91       	pop	r18
    6000:	0f 90       	pop	r0
    6002:	0f be       	out	0x3f, r0	; 63
    6004:	0f 90       	pop	r0
    6006:	1f 90       	pop	r1
    6008:	18 95       	reti

0000600a <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    600a:	1f 92       	push	r1
    600c:	0f 92       	push	r0
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	0f 92       	push	r0
    6012:	11 24       	eor	r1, r1
    6014:	2f 93       	push	r18
    6016:	3f 93       	push	r19
    6018:	4f 93       	push	r20
    601a:	5f 93       	push	r21
    601c:	6f 93       	push	r22
    601e:	7f 93       	push	r23
    6020:	8f 93       	push	r24
    6022:	9f 93       	push	r25
    6024:	af 93       	push	r26
    6026:	bf 93       	push	r27
    6028:	ef 93       	push	r30
    602a:	ff 93       	push	r31
    602c:	df 93       	push	r29
    602e:	cf 93       	push	r28
    6030:	cd b7       	in	r28, 0x3d	; 61
    6032:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    6034:	80 91 ae 02 	lds	r24, 0x02AE
    6038:	8f 5f       	subi	r24, 0xFF	; 255
    603a:	80 93 ae 02 	sts	0x02AE, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    603e:	20 91 a6 02 	lds	r18, 0x02A6
    6042:	30 91 a7 02 	lds	r19, 0x02A7
    6046:	80 91 ae 02 	lds	r24, 0x02AE
    604a:	88 2f       	mov	r24, r24
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	f9 01       	movw	r30, r18
    6050:	e8 0f       	add	r30, r24
    6052:	f9 1f       	adc	r31, r25
    6054:	80 81       	ld	r24, Z
    6056:	88 23       	and	r24, r24
    6058:	b9 f4       	brne	.+46     	; 0x6088 <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    605a:	10 92 ae 02 	sts	0x02AE, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    605e:	10 92 ac 02 	sts	0x02AC, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    6062:	80 91 aa 02 	lds	r24, 0x02AA
    6066:	90 91 ab 02 	lds	r25, 0x02AB
    606a:	00 97       	sbiw	r24, 0x00	; 0
    606c:	29 f0       	breq	.+10     	; 0x6078 <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    606e:	e0 91 aa 02 	lds	r30, 0x02AA
    6072:	f0 91 ab 02 	lds	r31, 0x02AB
    6076:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    6078:	aa e2       	ldi	r26, 0x2A	; 42
    607a:	b0 e0       	ldi	r27, 0x00	; 0
    607c:	ea e2       	ldi	r30, 0x2A	; 42
    607e:	f0 e0       	ldi	r31, 0x00	; 0
    6080:	80 81       	ld	r24, Z
    6082:	8f 7b       	andi	r24, 0xBF	; 191
    6084:	8c 93       	st	X, r24
    6086:	0f c0       	rjmp	.+30     	; 0x60a6 <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    6088:	ac e2       	ldi	r26, 0x2C	; 44
    608a:	b0 e0       	ldi	r27, 0x00	; 0
    608c:	20 91 a6 02 	lds	r18, 0x02A6
    6090:	30 91 a7 02 	lds	r19, 0x02A7
    6094:	80 91 ae 02 	lds	r24, 0x02AE
    6098:	88 2f       	mov	r24, r24
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	f9 01       	movw	r30, r18
    609e:	e8 0f       	add	r30, r24
    60a0:	f9 1f       	adc	r31, r25
    60a2:	80 81       	ld	r24, Z
    60a4:	8c 93       	st	X, r24
  }
}
    60a6:	cf 91       	pop	r28
    60a8:	df 91       	pop	r29
    60aa:	ff 91       	pop	r31
    60ac:	ef 91       	pop	r30
    60ae:	bf 91       	pop	r27
    60b0:	af 91       	pop	r26
    60b2:	9f 91       	pop	r25
    60b4:	8f 91       	pop	r24
    60b6:	7f 91       	pop	r23
    60b8:	6f 91       	pop	r22
    60ba:	5f 91       	pop	r21
    60bc:	4f 91       	pop	r20
    60be:	3f 91       	pop	r19
    60c0:	2f 91       	pop	r18
    60c2:	0f 90       	pop	r0
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	0f 90       	pop	r0
    60c8:	1f 90       	pop	r1
    60ca:	18 95       	reti

000060cc <APP>:
u8 LOC1 = 0;
u8 check = NOTPRESSED;
u8 val=0;
LED_Type ledg = {LED_PORTD,LED_PIN2,ACTIVE_HIGH};
LED_Type BUZ = {LED_PORTD,LED_PIN3,ACTIVE_HIGH};
void APP(){
    60cc:	df 93       	push	r29
    60ce:	cf 93       	push	r28
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
	LCD_vInit();
    60d4:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_vInit>
	KPD_Init();
    60d8:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <KPD_Init>
	DIO_vSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
    60dc:	83 e0       	ldi	r24, 0x03	; 3
    60de:	65 e0       	ldi	r22, 0x05	; 5
    60e0:	41 e0       	ldi	r20, 0x01	; 1
    60e2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	TIMER1_vInit();
    60e6:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <TIMER1_vInit>
	DIO_vSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    60ea:	80 e0       	ldi	r24, 0x00	; 0
    60ec:	60 e0       	ldi	r22, 0x00	; 0
    60ee:	40 e0       	ldi	r20, 0x00	; 0
    60f0:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <DIO_vSetPinDirection>
	USART_vInit();
    60f4:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <USART_vInit>
	LED_vInit(ledg);
    60f8:	60 91 82 02 	lds	r22, 0x0282
    60fc:	70 91 83 02 	lds	r23, 0x0283
    6100:	80 91 84 02 	lds	r24, 0x0284
    6104:	0e 94 32 28 	call	0x5064	; 0x5064 <LED_vInit>
	LED_vInit(BUZ);
    6108:	60 91 85 02 	lds	r22, 0x0285
    610c:	70 91 86 02 	lds	r23, 0x0286
    6110:	80 91 87 02 	lds	r24, 0x0287
    6114:	0e 94 32 28 	call	0x5064	; 0x5064 <LED_vInit>

}
    6118:	cf 91       	pop	r28
    611a:	df 91       	pop	r29
    611c:	08 95       	ret

0000611e <main>:
void main ()
{
    611e:	1f 93       	push	r17
    6120:	df 93       	push	r29
    6122:	cf 93       	push	r28
    6124:	cd b7       	in	r28, 0x3d	; 61
    6126:	de b7       	in	r29, 0x3e	; 62
    6128:	e0 97       	sbiw	r28, 0x30	; 48
    612a:	0f b6       	in	r0, 0x3f	; 63
    612c:	f8 94       	cli
    612e:	de bf       	out	0x3e, r29	; 62
    6130:	0f be       	out	0x3f, r0	; 63
    6132:	cd bf       	out	0x3d, r28	; 61
	APP();
    6134:	0e 94 66 30 	call	0x60cc	; 0x60cc <APP>
	if(EEROM_VoidReadDataFromAddress(0)==NOTPRESSED &&
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6140:	8f 3f       	cpi	r24, 0xFF	; 255
    6142:	09 f0       	breq	.+2      	; 0x6146 <main+0x28>
    6144:	61 c0       	rjmp	.+194    	; 0x6208 <main+0xea>
    6146:	81 e0       	ldi	r24, 0x01	; 1
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    614e:	8f 3f       	cpi	r24, 0xFF	; 255
    6150:	09 f0       	breq	.+2      	; 0x6154 <main+0x36>
    6152:	5a c0       	rjmp	.+180    	; 0x6208 <main+0xea>
    6154:	82 e0       	ldi	r24, 0x02	; 2
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    615c:	8f 3f       	cpi	r24, 0xFF	; 255
    615e:	09 f0       	breq	.+2      	; 0x6162 <main+0x44>
    6160:	53 c0       	rjmp	.+166    	; 0x6208 <main+0xea>
    6162:	83 e0       	ldi	r24, 0x03	; 3
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    616a:	8f 3f       	cpi	r24, 0xFF	; 255
    616c:	09 f0       	breq	.+2      	; 0x6170 <main+0x52>
    616e:	4c c0       	rjmp	.+152    	; 0x6208 <main+0xea>
    6170:	84 e0       	ldi	r24, 0x04	; 4
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6178:	8f 3f       	cpi	r24, 0xFF	; 255
    617a:	09 f0       	breq	.+2      	; 0x617e <main+0x60>
    617c:	45 c0       	rjmp	.+138    	; 0x6208 <main+0xea>
    617e:	85 e0       	ldi	r24, 0x05	; 5
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6186:	8f 3f       	cpi	r24, 0xFF	; 255
    6188:	09 f0       	breq	.+2      	; 0x618c <main+0x6e>
    618a:	3e c0       	rjmp	.+124    	; 0x6208 <main+0xea>
    618c:	86 e0       	ldi	r24, 0x06	; 6
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6194:	8f 3f       	cpi	r24, 0xFF	; 255
    6196:	c1 f5       	brne	.+112    	; 0x6208 <main+0xea>
    6198:	87 e0       	ldi	r24, 0x07	; 7
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61a0:	8f 3f       	cpi	r24, 0xFF	; 255
    61a2:	91 f5       	brne	.+100    	; 0x6208 <main+0xea>
    61a4:	88 e0       	ldi	r24, 0x08	; 8
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61ac:	8f 3f       	cpi	r24, 0xFF	; 255
    61ae:	61 f5       	brne	.+88     	; 0x6208 <main+0xea>
    61b0:	89 e0       	ldi	r24, 0x09	; 9
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61b8:	8f 3f       	cpi	r24, 0xFF	; 255
    61ba:	31 f5       	brne	.+76     	; 0x6208 <main+0xea>
    61bc:	8a e0       	ldi	r24, 0x0A	; 10
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61c4:	8f 3f       	cpi	r24, 0xFF	; 255
    61c6:	01 f5       	brne	.+64     	; 0x6208 <main+0xea>
    61c8:	8b e0       	ldi	r24, 0x0B	; 11
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61d0:	8f 3f       	cpi	r24, 0xFF	; 255
    61d2:	d1 f4       	brne	.+52     	; 0x6208 <main+0xea>
    61d4:	8c e0       	ldi	r24, 0x0C	; 12
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61dc:	8f 3f       	cpi	r24, 0xFF	; 255
    61de:	a1 f4       	brne	.+40     	; 0x6208 <main+0xea>
    61e0:	8d e0       	ldi	r24, 0x0D	; 13
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61e8:	8f 3f       	cpi	r24, 0xFF	; 255
    61ea:	71 f4       	brne	.+28     	; 0x6208 <main+0xea>
    61ec:	8e e0       	ldi	r24, 0x0E	; 14
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    61f4:	8f 3f       	cpi	r24, 0xFF	; 255
    61f6:	41 f4       	brne	.+16     	; 0x6208 <main+0xea>
    61f8:	8f e0       	ldi	r24, 0x0F	; 15
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6200:	8f 3f       	cpi	r24, 0xFF	; 255
    6202:	11 f4       	brne	.+4      	; 0x6208 <main+0xea>
			EEROM_VoidReadDataFromAddress(12)==NOTPRESSED &&
			EEROM_VoidReadDataFromAddress(13)==NOTPRESSED &&
			EEROM_VoidReadDataFromAddress(14)==NOTPRESSED &&
			EEROM_VoidReadDataFromAddress(15)==NOTPRESSED )
	{
		ENTER_USER();
    6204:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <ENTER_USER>
	}
	if(EEROM_VoidReadDataFromAddress(16)==NOTPRESSED &&
    6208:	80 e1       	ldi	r24, 0x10	; 16
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6210:	8f 3f       	cpi	r24, 0xFF	; 255
    6212:	09 f0       	breq	.+2      	; 0x6216 <main+0xf8>
    6214:	89 c0       	rjmp	.+274    	; 0x6328 <main+0x20a>
    6216:	81 e1       	ldi	r24, 0x11	; 17
    6218:	90 e0       	ldi	r25, 0x00	; 0
    621a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    621e:	8f 3f       	cpi	r24, 0xFF	; 255
    6220:	09 f0       	breq	.+2      	; 0x6224 <main+0x106>
    6222:	82 c0       	rjmp	.+260    	; 0x6328 <main+0x20a>
    6224:	82 e1       	ldi	r24, 0x12	; 18
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    622c:	8f 3f       	cpi	r24, 0xFF	; 255
    622e:	09 f0       	breq	.+2      	; 0x6232 <main+0x114>
    6230:	7b c0       	rjmp	.+246    	; 0x6328 <main+0x20a>
    6232:	83 e1       	ldi	r24, 0x13	; 19
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    623a:	8f 3f       	cpi	r24, 0xFF	; 255
    623c:	09 f0       	breq	.+2      	; 0x6240 <main+0x122>
    623e:	74 c0       	rjmp	.+232    	; 0x6328 <main+0x20a>
			EEROM_VoidReadDataFromAddress(17)==NOTPRESSED &&
			EEROM_VoidReadDataFromAddress(18)==NOTPRESSED &&
			EEROM_VoidReadDataFromAddress(19)==NOTPRESSED )
	{
		ENTER_PASS();
    6240:	0e 94 75 34 	call	0x68ea	; 0x68ea <ENTER_PASS>
    6244:	80 e0       	ldi	r24, 0x00	; 0
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	aa e7       	ldi	r26, 0x7A	; 122
    624a:	b4 e4       	ldi	r27, 0x44	; 68
    624c:	8f a3       	std	Y+39, r24	; 0x27
    624e:	98 a7       	std	Y+40, r25	; 0x28
    6250:	a9 a7       	std	Y+41, r26	; 0x29
    6252:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6254:	6f a1       	ldd	r22, Y+39	; 0x27
    6256:	78 a5       	ldd	r23, Y+40	; 0x28
    6258:	89 a5       	ldd	r24, Y+41	; 0x29
    625a:	9a a5       	ldd	r25, Y+42	; 0x2a
    625c:	20 e0       	ldi	r18, 0x00	; 0
    625e:	30 e0       	ldi	r19, 0x00	; 0
    6260:	4a ef       	ldi	r20, 0xFA	; 250
    6262:	54 e4       	ldi	r21, 0x44	; 68
    6264:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	8b a3       	std	Y+35, r24	; 0x23
    626e:	9c a3       	std	Y+36, r25	; 0x24
    6270:	ad a3       	std	Y+37, r26	; 0x25
    6272:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6274:	6b a1       	ldd	r22, Y+35	; 0x23
    6276:	7c a1       	ldd	r23, Y+36	; 0x24
    6278:	8d a1       	ldd	r24, Y+37	; 0x25
    627a:	9e a1       	ldd	r25, Y+38	; 0x26
    627c:	20 e0       	ldi	r18, 0x00	; 0
    627e:	30 e0       	ldi	r19, 0x00	; 0
    6280:	40 e8       	ldi	r20, 0x80	; 128
    6282:	5f e3       	ldi	r21, 0x3F	; 63
    6284:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6288:	88 23       	and	r24, r24
    628a:	2c f4       	brge	.+10     	; 0x6296 <main+0x178>
		__ticks = 1;
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	9a a3       	std	Y+34, r25	; 0x22
    6292:	89 a3       	std	Y+33, r24	; 0x21
    6294:	3f c0       	rjmp	.+126    	; 0x6314 <main+0x1f6>
	else if (__tmp > 65535)
    6296:	6b a1       	ldd	r22, Y+35	; 0x23
    6298:	7c a1       	ldd	r23, Y+36	; 0x24
    629a:	8d a1       	ldd	r24, Y+37	; 0x25
    629c:	9e a1       	ldd	r25, Y+38	; 0x26
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	3f ef       	ldi	r19, 0xFF	; 255
    62a2:	4f e7       	ldi	r20, 0x7F	; 127
    62a4:	57 e4       	ldi	r21, 0x47	; 71
    62a6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    62aa:	18 16       	cp	r1, r24
    62ac:	4c f5       	brge	.+82     	; 0x6300 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62ae:	6f a1       	ldd	r22, Y+39	; 0x27
    62b0:	78 a5       	ldd	r23, Y+40	; 0x28
    62b2:	89 a5       	ldd	r24, Y+41	; 0x29
    62b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    62b6:	20 e0       	ldi	r18, 0x00	; 0
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	40 e2       	ldi	r20, 0x20	; 32
    62bc:	51 e4       	ldi	r21, 0x41	; 65
    62be:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    62c2:	dc 01       	movw	r26, r24
    62c4:	cb 01       	movw	r24, r22
    62c6:	bc 01       	movw	r22, r24
    62c8:	cd 01       	movw	r24, r26
    62ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    62ce:	dc 01       	movw	r26, r24
    62d0:	cb 01       	movw	r24, r22
    62d2:	9a a3       	std	Y+34, r25	; 0x22
    62d4:	89 a3       	std	Y+33, r24	; 0x21
    62d6:	0f c0       	rjmp	.+30     	; 0x62f6 <main+0x1d8>
    62d8:	88 ec       	ldi	r24, 0xC8	; 200
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	98 a3       	std	Y+32, r25	; 0x20
    62de:	8f 8f       	std	Y+31, r24	; 0x1f
    62e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62e2:	98 a1       	ldd	r25, Y+32	; 0x20
    62e4:	01 97       	sbiw	r24, 0x01	; 1
    62e6:	f1 f7       	brne	.-4      	; 0x62e4 <main+0x1c6>
    62e8:	98 a3       	std	Y+32, r25	; 0x20
    62ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ec:	89 a1       	ldd	r24, Y+33	; 0x21
    62ee:	9a a1       	ldd	r25, Y+34	; 0x22
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	9a a3       	std	Y+34, r25	; 0x22
    62f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62f6:	89 a1       	ldd	r24, Y+33	; 0x21
    62f8:	9a a1       	ldd	r25, Y+34	; 0x22
    62fa:	00 97       	sbiw	r24, 0x00	; 0
    62fc:	69 f7       	brne	.-38     	; 0x62d8 <main+0x1ba>
    62fe:	14 c0       	rjmp	.+40     	; 0x6328 <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6300:	6b a1       	ldd	r22, Y+35	; 0x23
    6302:	7c a1       	ldd	r23, Y+36	; 0x24
    6304:	8d a1       	ldd	r24, Y+37	; 0x25
    6306:	9e a1       	ldd	r25, Y+38	; 0x26
    6308:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    630c:	dc 01       	movw	r26, r24
    630e:	cb 01       	movw	r24, r22
    6310:	9a a3       	std	Y+34, r25	; 0x22
    6312:	89 a3       	std	Y+33, r24	; 0x21
    6314:	89 a1       	ldd	r24, Y+33	; 0x21
    6316:	9a a1       	ldd	r25, Y+34	; 0x22
    6318:	9e 8f       	std	Y+30, r25	; 0x1e
    631a:	8d 8f       	std	Y+29, r24	; 0x1d
    631c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    631e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6320:	01 97       	sbiw	r24, 0x01	; 1
    6322:	f1 f7       	brne	.-4      	; 0x6320 <main+0x202>
    6324:	9e 8f       	std	Y+30, r25	; 0x1e
    6326:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
	}
	LCD_vClearScreen();
    6328:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	TEST_USER ();
    632c:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <TEST_USER>
	TEST_PASS ();
    6330:	0e 94 18 36 	call	0x6c30	; 0x6c30 <TEST_PASS>
	do {

		for(u8 i=0; i<16; i++)
    6334:	1e a6       	std	Y+46, r1	; 0x2e
    6336:	18 c0       	rjmp	.+48     	; 0x6368 <main+0x24a>
		{
			if(user[i]==EEROM_VoidReadDataFromAddress(i))
    6338:	8e a5       	ldd	r24, Y+46	; 0x2e
    633a:	88 2f       	mov	r24, r24
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	fc 01       	movw	r30, r24
    6340:	ee 54       	subi	r30, 0x4E	; 78
    6342:	fd 4f       	sbci	r31, 0xFD	; 253
    6344:	10 81       	ld	r17, Z
    6346:	8e a5       	ldd	r24, Y+46	; 0x2e
    6348:	88 2f       	mov	r24, r24
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    6350:	18 17       	cp	r17, r24
    6352:	39 f4       	brne	.+14     	; 0x6362 <main+0x244>
			{
				LOC=1;
    6354:	81 e0       	ldi	r24, 0x01	; 1
    6356:	80 93 af 02 	sts	0x02AF, r24
	LCD_vClearScreen();
	TEST_USER ();
	TEST_PASS ();
	do {

		for(u8 i=0; i<16; i++)
    635a:	8e a5       	ldd	r24, Y+46	; 0x2e
    635c:	8f 5f       	subi	r24, 0xFF	; 255
    635e:	8e a7       	std	Y+46, r24	; 0x2e
    6360:	03 c0       	rjmp	.+6      	; 0x6368 <main+0x24a>
			{
				LOC=1;
			}
			else
			{
				LOC=0;
    6362:	10 92 af 02 	sts	0x02AF, r1
    6366:	03 c0       	rjmp	.+6      	; 0x636e <main+0x250>
	LCD_vClearScreen();
	TEST_USER ();
	TEST_PASS ();
	do {

		for(u8 i=0; i<16; i++)
    6368:	8e a5       	ldd	r24, Y+46	; 0x2e
    636a:	80 31       	cpi	r24, 0x10	; 16
    636c:	28 f3       	brcs	.-54     	; 0x6338 <main+0x21a>
			{
				LOC=0;
				break;
			}
		}
		for(u8 i=16,j =0; i<20 , j<4; i++ , j++)
    636e:	80 e1       	ldi	r24, 0x10	; 16
    6370:	8d a7       	std	Y+45, r24	; 0x2d
    6372:	1c a6       	std	Y+44, r1	; 0x2c
    6374:	1b c0       	rjmp	.+54     	; 0x63ac <main+0x28e>
		{
			if(pass[j]==EEROM_VoidReadDataFromAddress(i))
    6376:	8c a5       	ldd	r24, Y+44	; 0x2c
    6378:	88 2f       	mov	r24, r24
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	fc 01       	movw	r30, r24
    637e:	ee 53       	subi	r30, 0x3E	; 62
    6380:	fd 4f       	sbci	r31, 0xFD	; 253
    6382:	10 81       	ld	r17, Z
    6384:	8d a5       	ldd	r24, Y+45	; 0x2d
    6386:	88 2f       	mov	r24, r24
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    638e:	18 17       	cp	r17, r24
    6390:	51 f4       	brne	.+20     	; 0x63a6 <main+0x288>
			{
				LOC1=1;
    6392:	81 e0       	ldi	r24, 0x01	; 1
    6394:	80 93 b0 02 	sts	0x02B0, r24
			{
				LOC=0;
				break;
			}
		}
		for(u8 i=16,j =0; i<20 , j<4; i++ , j++)
    6398:	8d a5       	ldd	r24, Y+45	; 0x2d
    639a:	8f 5f       	subi	r24, 0xFF	; 255
    639c:	8d a7       	std	Y+45, r24	; 0x2d
    639e:	8c a5       	ldd	r24, Y+44	; 0x2c
    63a0:	8f 5f       	subi	r24, 0xFF	; 255
    63a2:	8c a7       	std	Y+44, r24	; 0x2c
    63a4:	03 c0       	rjmp	.+6      	; 0x63ac <main+0x28e>
			{
				LOC1=1;
			}
			else
			{
				LOC1=0;
    63a6:	10 92 b0 02 	sts	0x02B0, r1
    63aa:	03 c0       	rjmp	.+6      	; 0x63b2 <main+0x294>
			{
				LOC=0;
				break;
			}
		}
		for(u8 i=16,j =0; i<20 , j<4; i++ , j++)
    63ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    63ae:	84 30       	cpi	r24, 0x04	; 4
    63b0:	10 f3       	brcs	.-60     	; 0x6376 <main+0x258>
			{
				LOC1=0;
				break;
			}
		}
		if(LOC==1 && LOC1==1)
    63b2:	80 91 af 02 	lds	r24, 0x02AF
    63b6:	81 30       	cpi	r24, 0x01	; 1
    63b8:	39 f4       	brne	.+14     	; 0x63c8 <main+0x2aa>
    63ba:	80 91 b0 02 	lds	r24, 0x02B0
    63be:	81 30       	cpi	r24, 0x01	; 1
    63c0:	19 f4       	brne	.+6      	; 0x63c8 <main+0x2aa>
		{
			check =0;
    63c2:	10 92 81 02 	sts	0x0281, r1
    63c6:	1b c0       	rjmp	.+54     	; 0x63fe <main+0x2e0>
		}
		else if (LOC==0 && LOC1==1)
    63c8:	80 91 af 02 	lds	r24, 0x02AF
    63cc:	88 23       	and	r24, r24
    63ce:	41 f4       	brne	.+16     	; 0x63e0 <main+0x2c2>
    63d0:	80 91 b0 02 	lds	r24, 0x02B0
    63d4:	81 30       	cpi	r24, 0x01	; 1
    63d6:	21 f4       	brne	.+8      	; 0x63e0 <main+0x2c2>
		{
			check=1;
    63d8:	81 e0       	ldi	r24, 0x01	; 1
    63da:	80 93 81 02 	sts	0x0281, r24
    63de:	0f c0       	rjmp	.+30     	; 0x63fe <main+0x2e0>
		}
		else if(LOC==1 && LOC1==0)
    63e0:	80 91 af 02 	lds	r24, 0x02AF
    63e4:	81 30       	cpi	r24, 0x01	; 1
    63e6:	41 f4       	brne	.+16     	; 0x63f8 <main+0x2da>
    63e8:	80 91 b0 02 	lds	r24, 0x02B0
    63ec:	88 23       	and	r24, r24
    63ee:	21 f4       	brne	.+8      	; 0x63f8 <main+0x2da>
		{
			check=2;
    63f0:	82 e0       	ldi	r24, 0x02	; 2
    63f2:	80 93 81 02 	sts	0x0281, r24
    63f6:	03 c0       	rjmp	.+6      	; 0x63fe <main+0x2e0>
		}
		else
		{
			check=3;
    63f8:	83 e0       	ldi	r24, 0x03	; 3
    63fa:	80 93 81 02 	sts	0x0281, r24
		}
		if(x==0)
    63fe:	80 91 8b 02 	lds	r24, 0x028B
    6402:	88 23       	and	r24, r24
    6404:	09 f4       	brne	.+2      	; 0x6408 <main+0x2ea>
    6406:	aa c0       	rjmp	.+340    	; 0x655c <main+0x43e>
		{
			break;
		}

		switch (check) {
    6408:	80 91 81 02 	lds	r24, 0x0281
    640c:	28 2f       	mov	r18, r24
    640e:	30 e0       	ldi	r19, 0x00	; 0
    6410:	38 ab       	std	Y+48, r19	; 0x30
    6412:	2f a7       	std	Y+47, r18	; 0x2f
    6414:	8f a5       	ldd	r24, Y+47	; 0x2f
    6416:	98 a9       	ldd	r25, Y+48	; 0x30
    6418:	81 30       	cpi	r24, 0x01	; 1
    641a:	91 05       	cpc	r25, r1
    641c:	09 f4       	brne	.+2      	; 0x6420 <main+0x302>
    641e:	91 c0       	rjmp	.+290    	; 0x6542 <main+0x424>
    6420:	2f a5       	ldd	r18, Y+47	; 0x2f
    6422:	38 a9       	ldd	r19, Y+48	; 0x30
    6424:	22 30       	cpi	r18, 0x02	; 2
    6426:	31 05       	cpc	r19, r1
    6428:	2c f4       	brge	.+10     	; 0x6434 <main+0x316>
    642a:	8f a5       	ldd	r24, Y+47	; 0x2f
    642c:	98 a9       	ldd	r25, Y+48	; 0x30
    642e:	00 97       	sbiw	r24, 0x00	; 0
    6430:	71 f0       	breq	.+28     	; 0x644e <main+0x330>
    6432:	8f c0       	rjmp	.+286    	; 0x6552 <main+0x434>
    6434:	2f a5       	ldd	r18, Y+47	; 0x2f
    6436:	38 a9       	ldd	r19, Y+48	; 0x30
    6438:	22 30       	cpi	r18, 0x02	; 2
    643a:	31 05       	cpc	r19, r1
    643c:	09 f4       	brne	.+2      	; 0x6440 <main+0x322>
    643e:	84 c0       	rjmp	.+264    	; 0x6548 <main+0x42a>
    6440:	8f a5       	ldd	r24, Y+47	; 0x2f
    6442:	98 a9       	ldd	r25, Y+48	; 0x30
    6444:	83 30       	cpi	r24, 0x03	; 3
    6446:	91 05       	cpc	r25, r1
    6448:	09 f4       	brne	.+2      	; 0x644c <main+0x32e>
    644a:	81 c0       	rjmp	.+258    	; 0x654e <main+0x430>
    644c:	82 c0       	rjmp	.+260    	; 0x6552 <main+0x434>
		case 0:
			LCD_vSendString("Entered SUCCESSFULLY");
    644e:	80 e6       	ldi	r24, 0x60	; 96
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
			flag1=1;
    6456:	81 e0       	ldi	r24, 0x01	; 1
    6458:	80 93 c7 02 	sts	0x02C7, r24
    645c:	80 e0       	ldi	r24, 0x00	; 0
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	aa e7       	ldi	r26, 0x7A	; 122
    6462:	b4 e4       	ldi	r27, 0x44	; 68
    6464:	89 8f       	std	Y+25, r24	; 0x19
    6466:	9a 8f       	std	Y+26, r25	; 0x1a
    6468:	ab 8f       	std	Y+27, r26	; 0x1b
    646a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    646c:	69 8d       	ldd	r22, Y+25	; 0x19
    646e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	4a ef       	ldi	r20, 0xFA	; 250
    647a:	54 e4       	ldi	r21, 0x44	; 68
    647c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6480:	dc 01       	movw	r26, r24
    6482:	cb 01       	movw	r24, r22
    6484:	8d 8b       	std	Y+21, r24	; 0x15
    6486:	9e 8b       	std	Y+22, r25	; 0x16
    6488:	af 8b       	std	Y+23, r26	; 0x17
    648a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    648c:	6d 89       	ldd	r22, Y+21	; 0x15
    648e:	7e 89       	ldd	r23, Y+22	; 0x16
    6490:	8f 89       	ldd	r24, Y+23	; 0x17
    6492:	98 8d       	ldd	r25, Y+24	; 0x18
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	30 e0       	ldi	r19, 0x00	; 0
    6498:	40 e8       	ldi	r20, 0x80	; 128
    649a:	5f e3       	ldi	r21, 0x3F	; 63
    649c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    64a0:	88 23       	and	r24, r24
    64a2:	2c f4       	brge	.+10     	; 0x64ae <main+0x390>
		__ticks = 1;
    64a4:	81 e0       	ldi	r24, 0x01	; 1
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	9c 8b       	std	Y+20, r25	; 0x14
    64aa:	8b 8b       	std	Y+19, r24	; 0x13
    64ac:	3f c0       	rjmp	.+126    	; 0x652c <main+0x40e>
	else if (__tmp > 65535)
    64ae:	6d 89       	ldd	r22, Y+21	; 0x15
    64b0:	7e 89       	ldd	r23, Y+22	; 0x16
    64b2:	8f 89       	ldd	r24, Y+23	; 0x17
    64b4:	98 8d       	ldd	r25, Y+24	; 0x18
    64b6:	20 e0       	ldi	r18, 0x00	; 0
    64b8:	3f ef       	ldi	r19, 0xFF	; 255
    64ba:	4f e7       	ldi	r20, 0x7F	; 127
    64bc:	57 e4       	ldi	r21, 0x47	; 71
    64be:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    64c2:	18 16       	cp	r1, r24
    64c4:	4c f5       	brge	.+82     	; 0x6518 <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64c6:	69 8d       	ldd	r22, Y+25	; 0x19
    64c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64ce:	20 e0       	ldi	r18, 0x00	; 0
    64d0:	30 e0       	ldi	r19, 0x00	; 0
    64d2:	40 e2       	ldi	r20, 0x20	; 32
    64d4:	51 e4       	ldi	r21, 0x41	; 65
    64d6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    64da:	dc 01       	movw	r26, r24
    64dc:	cb 01       	movw	r24, r22
    64de:	bc 01       	movw	r22, r24
    64e0:	cd 01       	movw	r24, r26
    64e2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64e6:	dc 01       	movw	r26, r24
    64e8:	cb 01       	movw	r24, r22
    64ea:	9c 8b       	std	Y+20, r25	; 0x14
    64ec:	8b 8b       	std	Y+19, r24	; 0x13
    64ee:	0f c0       	rjmp	.+30     	; 0x650e <main+0x3f0>
    64f0:	88 ec       	ldi	r24, 0xC8	; 200
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	9a 8b       	std	Y+18, r25	; 0x12
    64f6:	89 8b       	std	Y+17, r24	; 0x11
    64f8:	89 89       	ldd	r24, Y+17	; 0x11
    64fa:	9a 89       	ldd	r25, Y+18	; 0x12
    64fc:	01 97       	sbiw	r24, 0x01	; 1
    64fe:	f1 f7       	brne	.-4      	; 0x64fc <main+0x3de>
    6500:	9a 8b       	std	Y+18, r25	; 0x12
    6502:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6504:	8b 89       	ldd	r24, Y+19	; 0x13
    6506:	9c 89       	ldd	r25, Y+20	; 0x14
    6508:	01 97       	sbiw	r24, 0x01	; 1
    650a:	9c 8b       	std	Y+20, r25	; 0x14
    650c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    650e:	8b 89       	ldd	r24, Y+19	; 0x13
    6510:	9c 89       	ldd	r25, Y+20	; 0x14
    6512:	00 97       	sbiw	r24, 0x00	; 0
    6514:	69 f7       	brne	.-38     	; 0x64f0 <main+0x3d2>
    6516:	1d c0       	rjmp	.+58     	; 0x6552 <main+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6518:	6d 89       	ldd	r22, Y+21	; 0x15
    651a:	7e 89       	ldd	r23, Y+22	; 0x16
    651c:	8f 89       	ldd	r24, Y+23	; 0x17
    651e:	98 8d       	ldd	r25, Y+24	; 0x18
    6520:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6524:	dc 01       	movw	r26, r24
    6526:	cb 01       	movw	r24, r22
    6528:	9c 8b       	std	Y+20, r25	; 0x14
    652a:	8b 8b       	std	Y+19, r24	; 0x13
    652c:	8b 89       	ldd	r24, Y+19	; 0x13
    652e:	9c 89       	ldd	r25, Y+20	; 0x14
    6530:	98 8b       	std	Y+16, r25	; 0x10
    6532:	8f 87       	std	Y+15, r24	; 0x0f
    6534:	8f 85       	ldd	r24, Y+15	; 0x0f
    6536:	98 89       	ldd	r25, Y+16	; 0x10
    6538:	01 97       	sbiw	r24, 0x01	; 1
    653a:	f1 f7       	brne	.-4      	; 0x6538 <main+0x41a>
    653c:	98 8b       	std	Y+16, r25	; 0x10
    653e:	8f 87       	std	Y+15, r24	; 0x0f
    6540:	08 c0       	rjmp	.+16     	; 0x6552 <main+0x434>
			_delay_ms(1000);
			break;
		case 1:
			CHECK_USER();
    6542:	0e 94 d5 36 	call	0x6daa	; 0x6daa <CHECK_USER>
    6546:	05 c0       	rjmp	.+10     	; 0x6552 <main+0x434>
			break;
		case 2:
			CHECK_PASS();
    6548:	0e 94 36 38 	call	0x706c	; 0x706c <CHECK_PASS>
    654c:	02 c0       	rjmp	.+4      	; 0x6552 <main+0x434>
			break;
		case 3:
			CHECK_USER_PASS();
    654e:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <CHECK_USER_PASS>
		default:
			break;
		}


	} while (flag1==0);
    6552:	80 91 c7 02 	lds	r24, 0x02C7
    6556:	88 23       	and	r24, r24
    6558:	09 f4       	brne	.+2      	; 0x655c <main+0x43e>
    655a:	ec ce       	rjmp	.-552    	; 0x6334 <main+0x216>
	LCD_vClearScreen();
    655c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	if(x==0)
    6560:	80 91 8b 02 	lds	r24, 0x028B
    6564:	88 23       	and	r24, r24
    6566:	69 f4       	brne	.+26     	; 0x6582 <main+0x464>
	{
		LCD_vSendString("Home closed .");
    6568:	85 e7       	ldi	r24, 0x75	; 117
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
		LED_vOn(BUZ);
    6570:	60 91 85 02 	lds	r22, 0x0285
    6574:	70 91 86 02 	lds	r23, 0x0286
    6578:	80 91 87 02 	lds	r24, 0x0287
    657c:	0e 94 47 28 	call	0x508e	; 0x508e <LED_vOn>
    6580:	91 c0       	rjmp	.+290    	; 0x66a4 <main+0x586>
	}
	else
	{
		LCD_vSendString("HELLO");
    6582:	83 e8       	ldi	r24, 0x83	; 131
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
		LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    658a:	82 e0       	ldi	r24, 0x02	; 2
    658c:	61 e0       	ldi	r22, 0x01	; 1
    658e:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
		for(u8 j=0 ; j<16 ; j++)
    6592:	1b a6       	std	Y+43, r1	; 0x2b
    6594:	12 c0       	rjmp	.+36     	; 0x65ba <main+0x49c>
		{
			typuser = EEROM_VoidReadDataFromAddress(j);
    6596:	8b a5       	ldd	r24, Y+43	; 0x2b
    6598:	88 2f       	mov	r24, r24
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <EEROM_VoidReadDataFromAddress>
    65a0:	80 93 c8 02 	sts	0x02C8, r24
			if(typuser != ' ')
    65a4:	80 91 c8 02 	lds	r24, 0x02C8
    65a8:	80 32       	cpi	r24, 0x20	; 32
    65aa:	51 f0       	breq	.+20     	; 0x65c0 <main+0x4a2>
			{
				LCD_vSendData(typuser);
    65ac:	80 91 c8 02 	lds	r24, 0x02C8
    65b0:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
	}
	else
	{
		LCD_vSendString("HELLO");
		LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
		for(u8 j=0 ; j<16 ; j++)
    65b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    65b6:	8f 5f       	subi	r24, 0xFF	; 255
    65b8:	8b a7       	std	Y+43, r24	; 0x2b
    65ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    65bc:	80 31       	cpi	r24, 0x10	; 16
    65be:	58 f3       	brcs	.-42     	; 0x6596 <main+0x478>
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	aa e7       	ldi	r26, 0x7A	; 122
    65c6:	b4 e4       	ldi	r27, 0x44	; 68
    65c8:	8b 87       	std	Y+11, r24	; 0x0b
    65ca:	9c 87       	std	Y+12, r25	; 0x0c
    65cc:	ad 87       	std	Y+13, r26	; 0x0d
    65ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    65d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    65d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    65d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    65d8:	20 e0       	ldi	r18, 0x00	; 0
    65da:	30 e0       	ldi	r19, 0x00	; 0
    65dc:	4a ef       	ldi	r20, 0xFA	; 250
    65de:	54 e4       	ldi	r21, 0x44	; 68
    65e0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    65e4:	dc 01       	movw	r26, r24
    65e6:	cb 01       	movw	r24, r22
    65e8:	8f 83       	std	Y+7, r24	; 0x07
    65ea:	98 87       	std	Y+8, r25	; 0x08
    65ec:	a9 87       	std	Y+9, r26	; 0x09
    65ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65f0:	6f 81       	ldd	r22, Y+7	; 0x07
    65f2:	78 85       	ldd	r23, Y+8	; 0x08
    65f4:	89 85       	ldd	r24, Y+9	; 0x09
    65f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    65f8:	20 e0       	ldi	r18, 0x00	; 0
    65fa:	30 e0       	ldi	r19, 0x00	; 0
    65fc:	40 e8       	ldi	r20, 0x80	; 128
    65fe:	5f e3       	ldi	r21, 0x3F	; 63
    6600:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6604:	88 23       	and	r24, r24
    6606:	2c f4       	brge	.+10     	; 0x6612 <main+0x4f4>
		__ticks = 1;
    6608:	81 e0       	ldi	r24, 0x01	; 1
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	9e 83       	std	Y+6, r25	; 0x06
    660e:	8d 83       	std	Y+5, r24	; 0x05
    6610:	3f c0       	rjmp	.+126    	; 0x6690 <main+0x572>
	else if (__tmp > 65535)
    6612:	6f 81       	ldd	r22, Y+7	; 0x07
    6614:	78 85       	ldd	r23, Y+8	; 0x08
    6616:	89 85       	ldd	r24, Y+9	; 0x09
    6618:	9a 85       	ldd	r25, Y+10	; 0x0a
    661a:	20 e0       	ldi	r18, 0x00	; 0
    661c:	3f ef       	ldi	r19, 0xFF	; 255
    661e:	4f e7       	ldi	r20, 0x7F	; 127
    6620:	57 e4       	ldi	r21, 0x47	; 71
    6622:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6626:	18 16       	cp	r1, r24
    6628:	4c f5       	brge	.+82     	; 0x667c <main+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    662a:	6b 85       	ldd	r22, Y+11	; 0x0b
    662c:	7c 85       	ldd	r23, Y+12	; 0x0c
    662e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6630:	9e 85       	ldd	r25, Y+14	; 0x0e
    6632:	20 e0       	ldi	r18, 0x00	; 0
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	40 e2       	ldi	r20, 0x20	; 32
    6638:	51 e4       	ldi	r21, 0x41	; 65
    663a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    663e:	dc 01       	movw	r26, r24
    6640:	cb 01       	movw	r24, r22
    6642:	bc 01       	movw	r22, r24
    6644:	cd 01       	movw	r24, r26
    6646:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    664a:	dc 01       	movw	r26, r24
    664c:	cb 01       	movw	r24, r22
    664e:	9e 83       	std	Y+6, r25	; 0x06
    6650:	8d 83       	std	Y+5, r24	; 0x05
    6652:	0f c0       	rjmp	.+30     	; 0x6672 <main+0x554>
    6654:	88 ec       	ldi	r24, 0xC8	; 200
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	9c 83       	std	Y+4, r25	; 0x04
    665a:	8b 83       	std	Y+3, r24	; 0x03
    665c:	8b 81       	ldd	r24, Y+3	; 0x03
    665e:	9c 81       	ldd	r25, Y+4	; 0x04
    6660:	01 97       	sbiw	r24, 0x01	; 1
    6662:	f1 f7       	brne	.-4      	; 0x6660 <main+0x542>
    6664:	9c 83       	std	Y+4, r25	; 0x04
    6666:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6668:	8d 81       	ldd	r24, Y+5	; 0x05
    666a:	9e 81       	ldd	r25, Y+6	; 0x06
    666c:	01 97       	sbiw	r24, 0x01	; 1
    666e:	9e 83       	std	Y+6, r25	; 0x06
    6670:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6672:	8d 81       	ldd	r24, Y+5	; 0x05
    6674:	9e 81       	ldd	r25, Y+6	; 0x06
    6676:	00 97       	sbiw	r24, 0x00	; 0
    6678:	69 f7       	brne	.-38     	; 0x6654 <main+0x536>
    667a:	14 c0       	rjmp	.+40     	; 0x66a4 <main+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    667c:	6f 81       	ldd	r22, Y+7	; 0x07
    667e:	78 85       	ldd	r23, Y+8	; 0x08
    6680:	89 85       	ldd	r24, Y+9	; 0x09
    6682:	9a 85       	ldd	r25, Y+10	; 0x0a
    6684:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6688:	dc 01       	movw	r26, r24
    668a:	cb 01       	movw	r24, r22
    668c:	9e 83       	std	Y+6, r25	; 0x06
    668e:	8d 83       	std	Y+5, r24	; 0x05
    6690:	8d 81       	ldd	r24, Y+5	; 0x05
    6692:	9e 81       	ldd	r25, Y+6	; 0x06
    6694:	9a 83       	std	Y+2, r25	; 0x02
    6696:	89 83       	std	Y+1, r24	; 0x01
    6698:	89 81       	ldd	r24, Y+1	; 0x01
    669a:	9a 81       	ldd	r25, Y+2	; 0x02
    669c:	01 97       	sbiw	r24, 0x01	; 1
    669e:	f1 f7       	brne	.-4      	; 0x669c <main+0x57e>
    66a0:	9a 83       	std	Y+2, r25	; 0x02
    66a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

	while (1)
	{
		val = DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0);
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	60 e0       	ldi	r22, 0x00	; 0
    66a8:	0e 94 2b 18 	call	0x3056	; 0x3056 <DIO_u8GetPinValue>
    66ac:	80 93 b1 02 	sts	0x02B1, r24

		if(val==1)
    66b0:	80 91 b1 02 	lds	r24, 0x02B1
    66b4:	81 30       	cpi	r24, 0x01	; 1
    66b6:	79 f4       	brne	.+30     	; 0x66d6 <main+0x5b8>
		{
			TIMER1_vSetCTCA(1.5);
    66b8:	60 e0       	ldi	r22, 0x00	; 0
    66ba:	70 e0       	ldi	r23, 0x00	; 0
    66bc:	80 ec       	ldi	r24, 0xC0	; 192
    66be:	9f e3       	ldi	r25, 0x3F	; 63
    66c0:	0e 94 ca 29 	call	0x5394	; 0x5394 <TIMER1_vSetCTCA>
			LED_vOn(ledg);
    66c4:	60 91 82 02 	lds	r22, 0x0282
    66c8:	70 91 83 02 	lds	r23, 0x0283
    66cc:	80 91 84 02 	lds	r24, 0x0284
    66d0:	0e 94 47 28 	call	0x508e	; 0x508e <LED_vOn>
    66d4:	e7 cf       	rjmp	.-50     	; 0x66a4 <main+0x586>
		}
		else
		{
			TIMER1_vSetCTCA(2);
    66d6:	60 e0       	ldi	r22, 0x00	; 0
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	80 e0       	ldi	r24, 0x00	; 0
    66dc:	90 e4       	ldi	r25, 0x40	; 64
    66de:	0e 94 ca 29 	call	0x5394	; 0x5394 <TIMER1_vSetCTCA>
			LED_vOff(ledg);
    66e2:	60 91 82 02 	lds	r22, 0x0282
    66e6:	70 91 83 02 	lds	r23, 0x0283
    66ea:	80 91 84 02 	lds	r24, 0x0284
    66ee:	0e 94 69 28 	call	0x50d2	; 0x50d2 <LED_vOff>
    66f2:	d8 cf       	rjmp	.-80     	; 0x66a4 <main+0x586>

000066f4 <ENTER_USER>:
u8 flag1 =0;
extern u8 corsal;
#define code BT

void ENTER_USER ()
{
    66f4:	df 93       	push	r29
    66f6:	cf 93       	push	r28
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	60 97       	sbiw	r28, 0x10	; 16
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	f8 94       	cli
    6702:	de bf       	out	0x3e, r29	; 62
    6704:	0f be       	out	0x3f, r0	; 63
    6706:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("HELLO");
    6708:	89 e8       	ldi	r24, 0x89	; 137
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6710:	82 e0       	ldi	r24, 0x02	; 2
    6712:	61 e0       	ldi	r22, 0x01	; 1
    6714:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	LCD_vSendString("Set Setup");
    6718:	8f e8       	ldi	r24, 0x8F	; 143
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    6720:	80 e0       	ldi	r24, 0x00	; 0
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	aa e7       	ldi	r26, 0x7A	; 122
    6726:	b4 e4       	ldi	r27, 0x44	; 68
    6728:	8b 87       	std	Y+11, r24	; 0x0b
    672a:	9c 87       	std	Y+12, r25	; 0x0c
    672c:	ad 87       	std	Y+13, r26	; 0x0d
    672e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6730:	6b 85       	ldd	r22, Y+11	; 0x0b
    6732:	7c 85       	ldd	r23, Y+12	; 0x0c
    6734:	8d 85       	ldd	r24, Y+13	; 0x0d
    6736:	9e 85       	ldd	r25, Y+14	; 0x0e
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	30 e0       	ldi	r19, 0x00	; 0
    673c:	4a ef       	ldi	r20, 0xFA	; 250
    673e:	54 e4       	ldi	r21, 0x44	; 68
    6740:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6744:	dc 01       	movw	r26, r24
    6746:	cb 01       	movw	r24, r22
    6748:	8f 83       	std	Y+7, r24	; 0x07
    674a:	98 87       	std	Y+8, r25	; 0x08
    674c:	a9 87       	std	Y+9, r26	; 0x09
    674e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6750:	6f 81       	ldd	r22, Y+7	; 0x07
    6752:	78 85       	ldd	r23, Y+8	; 0x08
    6754:	89 85       	ldd	r24, Y+9	; 0x09
    6756:	9a 85       	ldd	r25, Y+10	; 0x0a
    6758:	20 e0       	ldi	r18, 0x00	; 0
    675a:	30 e0       	ldi	r19, 0x00	; 0
    675c:	40 e8       	ldi	r20, 0x80	; 128
    675e:	5f e3       	ldi	r21, 0x3F	; 63
    6760:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6764:	88 23       	and	r24, r24
    6766:	2c f4       	brge	.+10     	; 0x6772 <ENTER_USER+0x7e>
		__ticks = 1;
    6768:	81 e0       	ldi	r24, 0x01	; 1
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	9e 83       	std	Y+6, r25	; 0x06
    676e:	8d 83       	std	Y+5, r24	; 0x05
    6770:	3f c0       	rjmp	.+126    	; 0x67f0 <ENTER_USER+0xfc>
	else if (__tmp > 65535)
    6772:	6f 81       	ldd	r22, Y+7	; 0x07
    6774:	78 85       	ldd	r23, Y+8	; 0x08
    6776:	89 85       	ldd	r24, Y+9	; 0x09
    6778:	9a 85       	ldd	r25, Y+10	; 0x0a
    677a:	20 e0       	ldi	r18, 0x00	; 0
    677c:	3f ef       	ldi	r19, 0xFF	; 255
    677e:	4f e7       	ldi	r20, 0x7F	; 127
    6780:	57 e4       	ldi	r21, 0x47	; 71
    6782:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6786:	18 16       	cp	r1, r24
    6788:	4c f5       	brge	.+82     	; 0x67dc <ENTER_USER+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    678a:	6b 85       	ldd	r22, Y+11	; 0x0b
    678c:	7c 85       	ldd	r23, Y+12	; 0x0c
    678e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6790:	9e 85       	ldd	r25, Y+14	; 0x0e
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	40 e2       	ldi	r20, 0x20	; 32
    6798:	51 e4       	ldi	r21, 0x41	; 65
    679a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    679e:	dc 01       	movw	r26, r24
    67a0:	cb 01       	movw	r24, r22
    67a2:	bc 01       	movw	r22, r24
    67a4:	cd 01       	movw	r24, r26
    67a6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    67aa:	dc 01       	movw	r26, r24
    67ac:	cb 01       	movw	r24, r22
    67ae:	9e 83       	std	Y+6, r25	; 0x06
    67b0:	8d 83       	std	Y+5, r24	; 0x05
    67b2:	0f c0       	rjmp	.+30     	; 0x67d2 <ENTER_USER+0xde>
    67b4:	88 ec       	ldi	r24, 0xC8	; 200
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	9c 83       	std	Y+4, r25	; 0x04
    67ba:	8b 83       	std	Y+3, r24	; 0x03
    67bc:	8b 81       	ldd	r24, Y+3	; 0x03
    67be:	9c 81       	ldd	r25, Y+4	; 0x04
    67c0:	01 97       	sbiw	r24, 0x01	; 1
    67c2:	f1 f7       	brne	.-4      	; 0x67c0 <ENTER_USER+0xcc>
    67c4:	9c 83       	std	Y+4, r25	; 0x04
    67c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67c8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ca:	9e 81       	ldd	r25, Y+6	; 0x06
    67cc:	01 97       	sbiw	r24, 0x01	; 1
    67ce:	9e 83       	std	Y+6, r25	; 0x06
    67d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67d2:	8d 81       	ldd	r24, Y+5	; 0x05
    67d4:	9e 81       	ldd	r25, Y+6	; 0x06
    67d6:	00 97       	sbiw	r24, 0x00	; 0
    67d8:	69 f7       	brne	.-38     	; 0x67b4 <ENTER_USER+0xc0>
    67da:	14 c0       	rjmp	.+40     	; 0x6804 <ENTER_USER+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67dc:	6f 81       	ldd	r22, Y+7	; 0x07
    67de:	78 85       	ldd	r23, Y+8	; 0x08
    67e0:	89 85       	ldd	r24, Y+9	; 0x09
    67e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    67e4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    67e8:	dc 01       	movw	r26, r24
    67ea:	cb 01       	movw	r24, r22
    67ec:	9e 83       	std	Y+6, r25	; 0x06
    67ee:	8d 83       	std	Y+5, r24	; 0x05
    67f0:	8d 81       	ldd	r24, Y+5	; 0x05
    67f2:	9e 81       	ldd	r25, Y+6	; 0x06
    67f4:	9a 83       	std	Y+2, r25	; 0x02
    67f6:	89 83       	std	Y+1, r24	; 0x01
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
    67fa:	9a 81       	ldd	r25, Y+2	; 0x02
    67fc:	01 97       	sbiw	r24, 0x01	; 1
    67fe:	f1 f7       	brne	.-4      	; 0x67fc <ENTER_USER+0x108>
    6800:	9a 83       	std	Y+2, r25	; 0x02
    6802:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vClearScreen();
    6804:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("creat Name");
    6808:	89 e9       	ldi	r24, 0x99	; 153
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6810:	82 e0       	ldi	r24, 0x02	; 2
    6812:	61 e0       	ldi	r22, 0x01	; 1
    6814:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=0; i<16 ; i++)
    6818:	18 8a       	std	Y+16, r1	; 0x10
    681a:	55 c0       	rjmp	.+170    	; 0x68c6 <ENTER_USER+0x1d2>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    681c:	80 e8       	ldi	r24, 0x80	; 128
    681e:	92 e0       	ldi	r25, 0x02	; 2
    6820:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    6824:	80 91 80 02 	lds	r24, 0x0280
    6828:	8f 3f       	cpi	r24, 0xFF	; 255
    682a:	c1 f3       	breq	.-16     	; 0x681c <ENTER_USER+0x128>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
    682c:	80 91 80 02 	lds	r24, 0x0280
    6830:	8d 33       	cpi	r24, 0x3D	; 61
    6832:	c1 f4       	brne	.+48     	; 0x6864 <ENTER_USER+0x170>
		{
			for(u8 j=i;j<16;j++)
    6834:	88 89       	ldd	r24, Y+16	; 0x10
    6836:	8f 87       	std	Y+15, r24	; 0x0f
    6838:	11 c0       	rjmp	.+34     	; 0x685c <ENTER_USER+0x168>
			{
				EEROM_VoidSendDataToAddress(j,NOTPRESSED);
    683a:	8f 85       	ldd	r24, Y+15	; 0x0f
    683c:	88 2f       	mov	r24, r24
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	6f ef       	ldi	r22, 0xFF	; 255
    6842:	0e 94 12 1c 	call	0x3824	; 0x3824 <EEROM_VoidSendDataToAddress>
				user[j]=NOTPRESSED;
    6846:	8f 85       	ldd	r24, Y+15	; 0x0f
    6848:	88 2f       	mov	r24, r24
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	fc 01       	movw	r30, r24
    684e:	ee 54       	subi	r30, 0x4E	; 78
    6850:	fd 4f       	sbci	r31, 0xFD	; 253
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	80 83       	st	Z, r24
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
		{
			for(u8 j=i;j<16;j++)
    6856:	8f 85       	ldd	r24, Y+15	; 0x0f
    6858:	8f 5f       	subi	r24, 0xFF	; 255
    685a:	8f 87       	std	Y+15, r24	; 0x0f
    685c:	8f 85       	ldd	r24, Y+15	; 0x0f
    685e:	80 31       	cpi	r24, 0x10	; 16
    6860:	60 f3       	brcs	.-40     	; 0x683a <ENTER_USER+0x146>
    6862:	35 c0       	rjmp	.+106    	; 0x68ce <ENTER_USER+0x1da>
				EEROM_VoidSendDataToAddress(j,NOTPRESSED);
				user[j]=NOTPRESSED;
			}
			break;
		}
		else if (corsal== ' ')
    6864:	80 91 80 02 	lds	r24, 0x0280
    6868:	80 32       	cpi	r24, 0x20	; 32
    686a:	91 f4       	brne	.+36     	; 0x6890 <ENTER_USER+0x19c>
		{
			LCD_vSendData(' ');
    686c:	80 e2       	ldi	r24, 0x20	; 32
    686e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i]=' ';
    6872:	88 89       	ldd	r24, Y+16	; 0x10
    6874:	88 2f       	mov	r24, r24
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	fc 01       	movw	r30, r24
    687a:	ee 54       	subi	r30, 0x4E	; 78
    687c:	fd 4f       	sbci	r31, 0xFD	; 253
    687e:	80 e2       	ldi	r24, 0x20	; 32
    6880:	80 83       	st	Z, r24
			EEROM_VoidSendDataToAddress(i,' ');
    6882:	88 89       	ldd	r24, Y+16	; 0x10
    6884:	88 2f       	mov	r24, r24
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	60 e2       	ldi	r22, 0x20	; 32
    688a:	0e 94 12 1c 	call	0x3824	; 0x3824 <EEROM_VoidSendDataToAddress>
    688e:	15 c0       	rjmp	.+42     	; 0x68ba <ENTER_USER+0x1c6>

		}
		else
		{
			LCD_vSendData(corsal);
    6890:	80 91 80 02 	lds	r24, 0x0280
    6894:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i]=corsal;
    6898:	88 89       	ldd	r24, Y+16	; 0x10
    689a:	88 2f       	mov	r24, r24
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	20 91 80 02 	lds	r18, 0x0280
    68a2:	fc 01       	movw	r30, r24
    68a4:	ee 54       	subi	r30, 0x4E	; 78
    68a6:	fd 4f       	sbci	r31, 0xFD	; 253
    68a8:	20 83       	st	Z, r18
			EEROM_VoidSendDataToAddress(i,corsal);
    68aa:	88 89       	ldd	r24, Y+16	; 0x10
    68ac:	88 2f       	mov	r24, r24
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	20 91 80 02 	lds	r18, 0x0280
    68b4:	62 2f       	mov	r22, r18
    68b6:	0e 94 12 1c 	call	0x3824	; 0x3824 <EEROM_VoidSendDataToAddress>
		}
		corsal = 0xff;
    68ba:	8f ef       	ldi	r24, 0xFF	; 255
    68bc:	80 93 80 02 	sts	0x0280, r24
	LCD_vSendString("Set Setup");
	_delay_ms(1000);
	LCD_vClearScreen();
	LCD_vSendString("creat Name");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=0; i<16 ; i++)
    68c0:	88 89       	ldd	r24, Y+16	; 0x10
    68c2:	8f 5f       	subi	r24, 0xFF	; 255
    68c4:	88 8b       	std	Y+16, r24	; 0x10
    68c6:	88 89       	ldd	r24, Y+16	; 0x10
    68c8:	80 31       	cpi	r24, 0x10	; 16
    68ca:	08 f4       	brcc	.+2      	; 0x68ce <ENTER_USER+0x1da>
    68cc:	a7 cf       	rjmp	.-178    	; 0x681c <ENTER_USER+0x128>
			user[i]=corsal;
			EEROM_VoidSendDataToAddress(i,corsal);
		}
		corsal = 0xff;
	}
	LCD_vClearScreen();
    68ce:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    68d2:	8f ef       	ldi	r24, 0xFF	; 255
    68d4:	80 93 80 02 	sts	0x0280, r24

}
    68d8:	60 96       	adiw	r28, 0x10	; 16
    68da:	0f b6       	in	r0, 0x3f	; 63
    68dc:	f8 94       	cli
    68de:	de bf       	out	0x3e, r29	; 62
    68e0:	0f be       	out	0x3f, r0	; 63
    68e2:	cd bf       	out	0x3d, r28	; 61
    68e4:	cf 91       	pop	r28
    68e6:	df 91       	pop	r29
    68e8:	08 95       	ret

000068ea <ENTER_PASS>:

void ENTER_PASS ()
{
    68ea:	df 93       	push	r29
    68ec:	cf 93       	push	r28
    68ee:	cd b7       	in	r28, 0x3d	; 61
    68f0:	de b7       	in	r29, 0x3e	; 62
    68f2:	60 97       	sbiw	r28, 0x10	; 16
    68f4:	0f b6       	in	r0, 0x3f	; 63
    68f6:	f8 94       	cli
    68f8:	de bf       	out	0x3e, r29	; 62
    68fa:	0f be       	out	0x3f, r0	; 63
    68fc:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("creat password");
    68fe:	84 ea       	ldi	r24, 0xA4	; 164
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6906:	82 e0       	ldi	r24, 0x02	; 2
    6908:	61 e0       	ldi	r22, 0x01	; 1
    690a:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    690e:	80 e1       	ldi	r24, 0x10	; 16
    6910:	88 8b       	std	Y+16, r24	; 0x10
    6912:	1f 86       	std	Y+15, r1	; 0x0f
    6914:	a2 c0       	rjmp	.+324    	; 0x6a5a <ENTER_PASS+0x170>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    6916:	80 e8       	ldi	r24, 0x80	; 128
    6918:	92 e0       	ldi	r25, 0x02	; 2
    691a:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    691e:	80 91 80 02 	lds	r24, 0x0280
    6922:	8f 3f       	cpi	r24, 0xFF	; 255
    6924:	c1 f3       	breq	.-16     	; 0x6916 <ENTER_PASS+0x2c>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		LCD_vSendData(corsal);
    6926:	80 91 80 02 	lds	r24, 0x0280
    692a:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    692e:	80 e0       	ldi	r24, 0x00	; 0
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	aa e7       	ldi	r26, 0x7A	; 122
    6934:	b3 e4       	ldi	r27, 0x43	; 67
    6936:	8b 87       	std	Y+11, r24	; 0x0b
    6938:	9c 87       	std	Y+12, r25	; 0x0c
    693a:	ad 87       	std	Y+13, r26	; 0x0d
    693c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    693e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6940:	7c 85       	ldd	r23, Y+12	; 0x0c
    6942:	8d 85       	ldd	r24, Y+13	; 0x0d
    6944:	9e 85       	ldd	r25, Y+14	; 0x0e
    6946:	20 e0       	ldi	r18, 0x00	; 0
    6948:	30 e0       	ldi	r19, 0x00	; 0
    694a:	4a ef       	ldi	r20, 0xFA	; 250
    694c:	54 e4       	ldi	r21, 0x44	; 68
    694e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6952:	dc 01       	movw	r26, r24
    6954:	cb 01       	movw	r24, r22
    6956:	8f 83       	std	Y+7, r24	; 0x07
    6958:	98 87       	std	Y+8, r25	; 0x08
    695a:	a9 87       	std	Y+9, r26	; 0x09
    695c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    695e:	6f 81       	ldd	r22, Y+7	; 0x07
    6960:	78 85       	ldd	r23, Y+8	; 0x08
    6962:	89 85       	ldd	r24, Y+9	; 0x09
    6964:	9a 85       	ldd	r25, Y+10	; 0x0a
    6966:	20 e0       	ldi	r18, 0x00	; 0
    6968:	30 e0       	ldi	r19, 0x00	; 0
    696a:	40 e8       	ldi	r20, 0x80	; 128
    696c:	5f e3       	ldi	r21, 0x3F	; 63
    696e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6972:	88 23       	and	r24, r24
    6974:	2c f4       	brge	.+10     	; 0x6980 <ENTER_PASS+0x96>
		__ticks = 1;
    6976:	81 e0       	ldi	r24, 0x01	; 1
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	9e 83       	std	Y+6, r25	; 0x06
    697c:	8d 83       	std	Y+5, r24	; 0x05
    697e:	3f c0       	rjmp	.+126    	; 0x69fe <ENTER_PASS+0x114>
	else if (__tmp > 65535)
    6980:	6f 81       	ldd	r22, Y+7	; 0x07
    6982:	78 85       	ldd	r23, Y+8	; 0x08
    6984:	89 85       	ldd	r24, Y+9	; 0x09
    6986:	9a 85       	ldd	r25, Y+10	; 0x0a
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	3f ef       	ldi	r19, 0xFF	; 255
    698c:	4f e7       	ldi	r20, 0x7F	; 127
    698e:	57 e4       	ldi	r21, 0x47	; 71
    6990:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6994:	18 16       	cp	r1, r24
    6996:	4c f5       	brge	.+82     	; 0x69ea <ENTER_PASS+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6998:	6b 85       	ldd	r22, Y+11	; 0x0b
    699a:	7c 85       	ldd	r23, Y+12	; 0x0c
    699c:	8d 85       	ldd	r24, Y+13	; 0x0d
    699e:	9e 85       	ldd	r25, Y+14	; 0x0e
    69a0:	20 e0       	ldi	r18, 0x00	; 0
    69a2:	30 e0       	ldi	r19, 0x00	; 0
    69a4:	40 e2       	ldi	r20, 0x20	; 32
    69a6:	51 e4       	ldi	r21, 0x41	; 65
    69a8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    69ac:	dc 01       	movw	r26, r24
    69ae:	cb 01       	movw	r24, r22
    69b0:	bc 01       	movw	r22, r24
    69b2:	cd 01       	movw	r24, r26
    69b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    69b8:	dc 01       	movw	r26, r24
    69ba:	cb 01       	movw	r24, r22
    69bc:	9e 83       	std	Y+6, r25	; 0x06
    69be:	8d 83       	std	Y+5, r24	; 0x05
    69c0:	0f c0       	rjmp	.+30     	; 0x69e0 <ENTER_PASS+0xf6>
    69c2:	88 ec       	ldi	r24, 0xC8	; 200
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	9c 83       	std	Y+4, r25	; 0x04
    69c8:	8b 83       	std	Y+3, r24	; 0x03
    69ca:	8b 81       	ldd	r24, Y+3	; 0x03
    69cc:	9c 81       	ldd	r25, Y+4	; 0x04
    69ce:	01 97       	sbiw	r24, 0x01	; 1
    69d0:	f1 f7       	brne	.-4      	; 0x69ce <ENTER_PASS+0xe4>
    69d2:	9c 83       	std	Y+4, r25	; 0x04
    69d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69d6:	8d 81       	ldd	r24, Y+5	; 0x05
    69d8:	9e 81       	ldd	r25, Y+6	; 0x06
    69da:	01 97       	sbiw	r24, 0x01	; 1
    69dc:	9e 83       	std	Y+6, r25	; 0x06
    69de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69e0:	8d 81       	ldd	r24, Y+5	; 0x05
    69e2:	9e 81       	ldd	r25, Y+6	; 0x06
    69e4:	00 97       	sbiw	r24, 0x00	; 0
    69e6:	69 f7       	brne	.-38     	; 0x69c2 <ENTER_PASS+0xd8>
    69e8:	14 c0       	rjmp	.+40     	; 0x6a12 <ENTER_PASS+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69ea:	6f 81       	ldd	r22, Y+7	; 0x07
    69ec:	78 85       	ldd	r23, Y+8	; 0x08
    69ee:	89 85       	ldd	r24, Y+9	; 0x09
    69f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    69f2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    69f6:	dc 01       	movw	r26, r24
    69f8:	cb 01       	movw	r24, r22
    69fa:	9e 83       	std	Y+6, r25	; 0x06
    69fc:	8d 83       	std	Y+5, r24	; 0x05
    69fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6a00:	9e 81       	ldd	r25, Y+6	; 0x06
    6a02:	9a 83       	std	Y+2, r25	; 0x02
    6a04:	89 83       	std	Y+1, r24	; 0x01
    6a06:	89 81       	ldd	r24, Y+1	; 0x01
    6a08:	9a 81       	ldd	r25, Y+2	; 0x02
    6a0a:	01 97       	sbiw	r24, 0x01	; 1
    6a0c:	f1 f7       	brne	.-4      	; 0x6a0a <ENTER_PASS+0x120>
    6a0e:	9a 83       	std	Y+2, r25	; 0x02
    6a10:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vSetPosition(LCD_ROW_2,j+1);
    6a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a14:	98 2f       	mov	r25, r24
    6a16:	9f 5f       	subi	r25, 0xFF	; 255
    6a18:	82 e0       	ldi	r24, 0x02	; 2
    6a1a:	69 2f       	mov	r22, r25
    6a1c:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
		LCD_vSendData('*');
    6a20:	8a e2       	ldi	r24, 0x2A	; 42
    6a22:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		EEROM_VoidSendDataToAddress(i,corsal);
    6a26:	88 89       	ldd	r24, Y+16	; 0x10
    6a28:	88 2f       	mov	r24, r24
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	20 91 80 02 	lds	r18, 0x0280
    6a30:	62 2f       	mov	r22, r18
    6a32:	0e 94 12 1c 	call	0x3824	; 0x3824 <EEROM_VoidSendDataToAddress>
		pass[j]=corsal;
    6a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a38:	88 2f       	mov	r24, r24
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	20 91 80 02 	lds	r18, 0x0280
    6a40:	fc 01       	movw	r30, r24
    6a42:	ee 53       	subi	r30, 0x3E	; 62
    6a44:	fd 4f       	sbci	r31, 0xFD	; 253
    6a46:	20 83       	st	Z, r18
		corsal = 0xff;
    6a48:	8f ef       	ldi	r24, 0xFF	; 255
    6a4a:	80 93 80 02 	sts	0x0280, r24

void ENTER_PASS ()
{
	LCD_vSendString("creat password");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    6a4e:	88 89       	ldd	r24, Y+16	; 0x10
    6a50:	8f 5f       	subi	r24, 0xFF	; 255
    6a52:	88 8b       	std	Y+16, r24	; 0x10
    6a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a56:	8f 5f       	subi	r24, 0xFF	; 255
    6a58:	8f 87       	std	Y+15, r24	; 0x0f
    6a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a5c:	84 30       	cpi	r24, 0x04	; 4
    6a5e:	08 f4       	brcc	.+2      	; 0x6a62 <ENTER_PASS+0x178>
    6a60:	5a cf       	rjmp	.-332    	; 0x6916 <ENTER_PASS+0x2c>
		LCD_vSendData('*');
		EEROM_VoidSendDataToAddress(i,corsal);
		pass[j]=corsal;
		corsal = 0xff;
	}
	LCD_vClearScreen();
    6a62:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    6a66:	8f ef       	ldi	r24, 0xFF	; 255
    6a68:	80 93 80 02 	sts	0x0280, r24

}
    6a6c:	60 96       	adiw	r28, 0x10	; 16
    6a6e:	0f b6       	in	r0, 0x3f	; 63
    6a70:	f8 94       	cli
    6a72:	de bf       	out	0x3e, r29	; 62
    6a74:	0f be       	out	0x3f, r0	; 63
    6a76:	cd bf       	out	0x3d, r28	; 61
    6a78:	cf 91       	pop	r28
    6a7a:	df 91       	pop	r29
    6a7c:	08 95       	ret

00006a7e <TEST_USER>:
void TEST_USER ()
{
    6a7e:	df 93       	push	r29
    6a80:	cf 93       	push	r28
    6a82:	cd b7       	in	r28, 0x3d	; 61
    6a84:	de b7       	in	r29, 0x3e	; 62
    6a86:	60 97       	sbiw	r28, 0x10	; 16
    6a88:	0f b6       	in	r0, 0x3f	; 63
    6a8a:	f8 94       	cli
    6a8c:	de bf       	out	0x3e, r29	; 62
    6a8e:	0f be       	out	0x3f, r0	; 63
    6a90:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("Enter name");
    6a92:	83 eb       	ldi	r24, 0xB3	; 179
    6a94:	90 e0       	ldi	r25, 0x00	; 0
    6a96:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6a9a:	82 e0       	ldi	r24, 0x02	; 2
    6a9c:	61 e0       	ldi	r22, 0x01	; 1
    6a9e:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=0; i<16 ; i++)
    6aa2:	18 8a       	std	Y+16, r1	; 0x10
    6aa4:	41 c0       	rjmp	.+130    	; 0x6b28 <TEST_USER+0xaa>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    6aa6:	80 e8       	ldi	r24, 0x80	; 128
    6aa8:	92 e0       	ldi	r25, 0x02	; 2
    6aaa:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    6aae:	80 91 80 02 	lds	r24, 0x0280
    6ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    6ab4:	c1 f3       	breq	.-16     	; 0x6aa6 <TEST_USER+0x28>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
    6ab6:	80 91 80 02 	lds	r24, 0x0280
    6aba:	8d 33       	cpi	r24, 0x3D	; 61
    6abc:	91 f4       	brne	.+36     	; 0x6ae2 <TEST_USER+0x64>
		{
			for(u8 j=i;j<16;j++)
    6abe:	88 89       	ldd	r24, Y+16	; 0x10
    6ac0:	8f 87       	std	Y+15, r24	; 0x0f
    6ac2:	0b c0       	rjmp	.+22     	; 0x6ada <TEST_USER+0x5c>
			{
				user[j]=NOTPRESSED;
    6ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ac6:	88 2f       	mov	r24, r24
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	fc 01       	movw	r30, r24
    6acc:	ee 54       	subi	r30, 0x4E	; 78
    6ace:	fd 4f       	sbci	r31, 0xFD	; 253
    6ad0:	8f ef       	ldi	r24, 0xFF	; 255
    6ad2:	80 83       	st	Z, r24
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
		{
			for(u8 j=i;j<16;j++)
    6ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ad6:	8f 5f       	subi	r24, 0xFF	; 255
    6ad8:	8f 87       	std	Y+15, r24	; 0x0f
    6ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    6adc:	80 31       	cpi	r24, 0x10	; 16
    6ade:	90 f3       	brcs	.-28     	; 0x6ac4 <TEST_USER+0x46>
    6ae0:	27 c0       	rjmp	.+78     	; 0x6b30 <TEST_USER+0xb2>
			{
				user[j]=NOTPRESSED;
			}
			break;
		}
		else if (corsal== '?')
    6ae2:	80 91 80 02 	lds	r24, 0x0280
    6ae6:	8f 33       	cpi	r24, 0x3F	; 63
    6ae8:	61 f4       	brne	.+24     	; 0x6b02 <TEST_USER+0x84>
		{
			LCD_vSendData(' ');
    6aea:	80 e2       	ldi	r24, 0x20	; 32
    6aec:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i]=' ';
    6af0:	88 89       	ldd	r24, Y+16	; 0x10
    6af2:	88 2f       	mov	r24, r24
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	fc 01       	movw	r30, r24
    6af8:	ee 54       	subi	r30, 0x4E	; 78
    6afa:	fd 4f       	sbci	r31, 0xFD	; 253
    6afc:	80 e2       	ldi	r24, 0x20	; 32
    6afe:	80 83       	st	Z, r24
    6b00:	0d c0       	rjmp	.+26     	; 0x6b1c <TEST_USER+0x9e>
		}
		else
		{
			LCD_vSendData(corsal);
    6b02:	80 91 80 02 	lds	r24, 0x0280
    6b06:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i]=corsal;
    6b0a:	88 89       	ldd	r24, Y+16	; 0x10
    6b0c:	88 2f       	mov	r24, r24
    6b0e:	90 e0       	ldi	r25, 0x00	; 0
    6b10:	20 91 80 02 	lds	r18, 0x0280
    6b14:	fc 01       	movw	r30, r24
    6b16:	ee 54       	subi	r30, 0x4E	; 78
    6b18:	fd 4f       	sbci	r31, 0xFD	; 253
    6b1a:	20 83       	st	Z, r18
		}
		corsal = 0xff;
    6b1c:	8f ef       	ldi	r24, 0xFF	; 255
    6b1e:	80 93 80 02 	sts	0x0280, r24
}
void TEST_USER ()
{
	LCD_vSendString("Enter name");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=0; i<16 ; i++)
    6b22:	88 89       	ldd	r24, Y+16	; 0x10
    6b24:	8f 5f       	subi	r24, 0xFF	; 255
    6b26:	88 8b       	std	Y+16, r24	; 0x10
    6b28:	88 89       	ldd	r24, Y+16	; 0x10
    6b2a:	80 31       	cpi	r24, 0x10	; 16
    6b2c:	08 f4       	brcc	.+2      	; 0x6b30 <TEST_USER+0xb2>
    6b2e:	bb cf       	rjmp	.-138    	; 0x6aa6 <TEST_USER+0x28>
    6b30:	80 e0       	ldi	r24, 0x00	; 0
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	aa e7       	ldi	r26, 0x7A	; 122
    6b36:	b4 e4       	ldi	r27, 0x44	; 68
    6b38:	8b 87       	std	Y+11, r24	; 0x0b
    6b3a:	9c 87       	std	Y+12, r25	; 0x0c
    6b3c:	ad 87       	std	Y+13, r26	; 0x0d
    6b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b48:	20 e0       	ldi	r18, 0x00	; 0
    6b4a:	30 e0       	ldi	r19, 0x00	; 0
    6b4c:	4a ef       	ldi	r20, 0xFA	; 250
    6b4e:	54 e4       	ldi	r21, 0x44	; 68
    6b50:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6b54:	dc 01       	movw	r26, r24
    6b56:	cb 01       	movw	r24, r22
    6b58:	8f 83       	std	Y+7, r24	; 0x07
    6b5a:	98 87       	std	Y+8, r25	; 0x08
    6b5c:	a9 87       	std	Y+9, r26	; 0x09
    6b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b60:	6f 81       	ldd	r22, Y+7	; 0x07
    6b62:	78 85       	ldd	r23, Y+8	; 0x08
    6b64:	89 85       	ldd	r24, Y+9	; 0x09
    6b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b68:	20 e0       	ldi	r18, 0x00	; 0
    6b6a:	30 e0       	ldi	r19, 0x00	; 0
    6b6c:	40 e8       	ldi	r20, 0x80	; 128
    6b6e:	5f e3       	ldi	r21, 0x3F	; 63
    6b70:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6b74:	88 23       	and	r24, r24
    6b76:	2c f4       	brge	.+10     	; 0x6b82 <TEST_USER+0x104>
		__ticks = 1;
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	9e 83       	std	Y+6, r25	; 0x06
    6b7e:	8d 83       	std	Y+5, r24	; 0x05
    6b80:	3f c0       	rjmp	.+126    	; 0x6c00 <TEST_USER+0x182>
	else if (__tmp > 65535)
    6b82:	6f 81       	ldd	r22, Y+7	; 0x07
    6b84:	78 85       	ldd	r23, Y+8	; 0x08
    6b86:	89 85       	ldd	r24, Y+9	; 0x09
    6b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b8a:	20 e0       	ldi	r18, 0x00	; 0
    6b8c:	3f ef       	ldi	r19, 0xFF	; 255
    6b8e:	4f e7       	ldi	r20, 0x7F	; 127
    6b90:	57 e4       	ldi	r21, 0x47	; 71
    6b92:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6b96:	18 16       	cp	r1, r24
    6b98:	4c f5       	brge	.+82     	; 0x6bec <TEST_USER+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ba2:	20 e0       	ldi	r18, 0x00	; 0
    6ba4:	30 e0       	ldi	r19, 0x00	; 0
    6ba6:	40 e2       	ldi	r20, 0x20	; 32
    6ba8:	51 e4       	ldi	r21, 0x41	; 65
    6baa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6bae:	dc 01       	movw	r26, r24
    6bb0:	cb 01       	movw	r24, r22
    6bb2:	bc 01       	movw	r22, r24
    6bb4:	cd 01       	movw	r24, r26
    6bb6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6bba:	dc 01       	movw	r26, r24
    6bbc:	cb 01       	movw	r24, r22
    6bbe:	9e 83       	std	Y+6, r25	; 0x06
    6bc0:	8d 83       	std	Y+5, r24	; 0x05
    6bc2:	0f c0       	rjmp	.+30     	; 0x6be2 <TEST_USER+0x164>
    6bc4:	88 ec       	ldi	r24, 0xC8	; 200
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	9c 83       	std	Y+4, r25	; 0x04
    6bca:	8b 83       	std	Y+3, r24	; 0x03
    6bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    6bce:	9c 81       	ldd	r25, Y+4	; 0x04
    6bd0:	01 97       	sbiw	r24, 0x01	; 1
    6bd2:	f1 f7       	brne	.-4      	; 0x6bd0 <TEST_USER+0x152>
    6bd4:	9c 83       	std	Y+4, r25	; 0x04
    6bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bda:	9e 81       	ldd	r25, Y+6	; 0x06
    6bdc:	01 97       	sbiw	r24, 0x01	; 1
    6bde:	9e 83       	std	Y+6, r25	; 0x06
    6be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6be2:	8d 81       	ldd	r24, Y+5	; 0x05
    6be4:	9e 81       	ldd	r25, Y+6	; 0x06
    6be6:	00 97       	sbiw	r24, 0x00	; 0
    6be8:	69 f7       	brne	.-38     	; 0x6bc4 <TEST_USER+0x146>
    6bea:	14 c0       	rjmp	.+40     	; 0x6c14 <TEST_USER+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bec:	6f 81       	ldd	r22, Y+7	; 0x07
    6bee:	78 85       	ldd	r23, Y+8	; 0x08
    6bf0:	89 85       	ldd	r24, Y+9	; 0x09
    6bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bf4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	cb 01       	movw	r24, r22
    6bfc:	9e 83       	std	Y+6, r25	; 0x06
    6bfe:	8d 83       	std	Y+5, r24	; 0x05
    6c00:	8d 81       	ldd	r24, Y+5	; 0x05
    6c02:	9e 81       	ldd	r25, Y+6	; 0x06
    6c04:	9a 83       	std	Y+2, r25	; 0x02
    6c06:	89 83       	std	Y+1, r24	; 0x01
    6c08:	89 81       	ldd	r24, Y+1	; 0x01
    6c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c0c:	01 97       	sbiw	r24, 0x01	; 1
    6c0e:	f1 f7       	brne	.-4      	; 0x6c0c <TEST_USER+0x18e>
    6c10:	9a 83       	std	Y+2, r25	; 0x02
    6c12:	89 83       	std	Y+1, r24	; 0x01
		}
		corsal = 0xff;

	}
	_delay_ms(1000);
	LCD_vClearScreen();
    6c14:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    6c18:	8f ef       	ldi	r24, 0xFF	; 255
    6c1a:	80 93 80 02 	sts	0x0280, r24

}
    6c1e:	60 96       	adiw	r28, 0x10	; 16
    6c20:	0f b6       	in	r0, 0x3f	; 63
    6c22:	f8 94       	cli
    6c24:	de bf       	out	0x3e, r29	; 62
    6c26:	0f be       	out	0x3f, r0	; 63
    6c28:	cd bf       	out	0x3d, r28	; 61
    6c2a:	cf 91       	pop	r28
    6c2c:	df 91       	pop	r29
    6c2e:	08 95       	ret

00006c30 <TEST_PASS>:
void TEST_PASS ()
{
    6c30:	df 93       	push	r29
    6c32:	cf 93       	push	r28
    6c34:	cd b7       	in	r28, 0x3d	; 61
    6c36:	de b7       	in	r29, 0x3e	; 62
    6c38:	2f 97       	sbiw	r28, 0x0f	; 15
    6c3a:	0f b6       	in	r0, 0x3f	; 63
    6c3c:	f8 94       	cli
    6c3e:	de bf       	out	0x3e, r29	; 62
    6c40:	0f be       	out	0x3f, r0	; 63
    6c42:	cd bf       	out	0x3d, r28	; 61

	LCD_vSendString("Enter password");
    6c44:	8e eb       	ldi	r24, 0xBE	; 190
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6c4c:	82 e0       	ldi	r24, 0x02	; 2
    6c4e:	61 e0       	ldi	r22, 0x01	; 1
    6c50:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 j=0; j<4 ; j++)
    6c54:	1f 86       	std	Y+15, r1	; 0x0f
    6c56:	97 c0       	rjmp	.+302    	; 0x6d86 <TEST_PASS+0x156>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    6c58:	80 e8       	ldi	r24, 0x80	; 128
    6c5a:	92 e0       	ldi	r25, 0x02	; 2
    6c5c:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    6c60:	80 91 80 02 	lds	r24, 0x0280
    6c64:	8f 3f       	cpi	r24, 0xFF	; 255
    6c66:	c1 f3       	breq	.-16     	; 0x6c58 <TEST_PASS+0x28>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		LCD_vSendData(corsal);
    6c68:	80 91 80 02 	lds	r24, 0x0280
    6c6c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    6c70:	80 e0       	ldi	r24, 0x00	; 0
    6c72:	90 e0       	ldi	r25, 0x00	; 0
    6c74:	aa e7       	ldi	r26, 0x7A	; 122
    6c76:	b3 e4       	ldi	r27, 0x43	; 67
    6c78:	8b 87       	std	Y+11, r24	; 0x0b
    6c7a:	9c 87       	std	Y+12, r25	; 0x0c
    6c7c:	ad 87       	std	Y+13, r26	; 0x0d
    6c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c88:	20 e0       	ldi	r18, 0x00	; 0
    6c8a:	30 e0       	ldi	r19, 0x00	; 0
    6c8c:	4a ef       	ldi	r20, 0xFA	; 250
    6c8e:	54 e4       	ldi	r21, 0x44	; 68
    6c90:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6c94:	dc 01       	movw	r26, r24
    6c96:	cb 01       	movw	r24, r22
    6c98:	8f 83       	std	Y+7, r24	; 0x07
    6c9a:	98 87       	std	Y+8, r25	; 0x08
    6c9c:	a9 87       	std	Y+9, r26	; 0x09
    6c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ca2:	78 85       	ldd	r23, Y+8	; 0x08
    6ca4:	89 85       	ldd	r24, Y+9	; 0x09
    6ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ca8:	20 e0       	ldi	r18, 0x00	; 0
    6caa:	30 e0       	ldi	r19, 0x00	; 0
    6cac:	40 e8       	ldi	r20, 0x80	; 128
    6cae:	5f e3       	ldi	r21, 0x3F	; 63
    6cb0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6cb4:	88 23       	and	r24, r24
    6cb6:	2c f4       	brge	.+10     	; 0x6cc2 <TEST_PASS+0x92>
		__ticks = 1;
    6cb8:	81 e0       	ldi	r24, 0x01	; 1
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	9e 83       	std	Y+6, r25	; 0x06
    6cbe:	8d 83       	std	Y+5, r24	; 0x05
    6cc0:	3f c0       	rjmp	.+126    	; 0x6d40 <TEST_PASS+0x110>
	else if (__tmp > 65535)
    6cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    6cc4:	78 85       	ldd	r23, Y+8	; 0x08
    6cc6:	89 85       	ldd	r24, Y+9	; 0x09
    6cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	3f ef       	ldi	r19, 0xFF	; 255
    6cce:	4f e7       	ldi	r20, 0x7F	; 127
    6cd0:	57 e4       	ldi	r21, 0x47	; 71
    6cd2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6cd6:	18 16       	cp	r1, r24
    6cd8:	4c f5       	brge	.+82     	; 0x6d2c <TEST_PASS+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ce2:	20 e0       	ldi	r18, 0x00	; 0
    6ce4:	30 e0       	ldi	r19, 0x00	; 0
    6ce6:	40 e2       	ldi	r20, 0x20	; 32
    6ce8:	51 e4       	ldi	r21, 0x41	; 65
    6cea:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6cee:	dc 01       	movw	r26, r24
    6cf0:	cb 01       	movw	r24, r22
    6cf2:	bc 01       	movw	r22, r24
    6cf4:	cd 01       	movw	r24, r26
    6cf6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6cfa:	dc 01       	movw	r26, r24
    6cfc:	cb 01       	movw	r24, r22
    6cfe:	9e 83       	std	Y+6, r25	; 0x06
    6d00:	8d 83       	std	Y+5, r24	; 0x05
    6d02:	0f c0       	rjmp	.+30     	; 0x6d22 <TEST_PASS+0xf2>
    6d04:	88 ec       	ldi	r24, 0xC8	; 200
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	9c 83       	std	Y+4, r25	; 0x04
    6d0a:	8b 83       	std	Y+3, r24	; 0x03
    6d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    6d10:	01 97       	sbiw	r24, 0x01	; 1
    6d12:	f1 f7       	brne	.-4      	; 0x6d10 <TEST_PASS+0xe0>
    6d14:	9c 83       	std	Y+4, r25	; 0x04
    6d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d18:	8d 81       	ldd	r24, Y+5	; 0x05
    6d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d1c:	01 97       	sbiw	r24, 0x01	; 1
    6d1e:	9e 83       	std	Y+6, r25	; 0x06
    6d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d22:	8d 81       	ldd	r24, Y+5	; 0x05
    6d24:	9e 81       	ldd	r25, Y+6	; 0x06
    6d26:	00 97       	sbiw	r24, 0x00	; 0
    6d28:	69 f7       	brne	.-38     	; 0x6d04 <TEST_PASS+0xd4>
    6d2a:	14 c0       	rjmp	.+40     	; 0x6d54 <TEST_PASS+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    6d2e:	78 85       	ldd	r23, Y+8	; 0x08
    6d30:	89 85       	ldd	r24, Y+9	; 0x09
    6d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d34:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6d38:	dc 01       	movw	r26, r24
    6d3a:	cb 01       	movw	r24, r22
    6d3c:	9e 83       	std	Y+6, r25	; 0x06
    6d3e:	8d 83       	std	Y+5, r24	; 0x05
    6d40:	8d 81       	ldd	r24, Y+5	; 0x05
    6d42:	9e 81       	ldd	r25, Y+6	; 0x06
    6d44:	9a 83       	std	Y+2, r25	; 0x02
    6d46:	89 83       	std	Y+1, r24	; 0x01
    6d48:	89 81       	ldd	r24, Y+1	; 0x01
    6d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d4c:	01 97       	sbiw	r24, 0x01	; 1
    6d4e:	f1 f7       	brne	.-4      	; 0x6d4c <TEST_PASS+0x11c>
    6d50:	9a 83       	std	Y+2, r25	; 0x02
    6d52:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vSetPosition(LCD_ROW_2,j+1);
    6d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d56:	98 2f       	mov	r25, r24
    6d58:	9f 5f       	subi	r25, 0xFF	; 255
    6d5a:	82 e0       	ldi	r24, 0x02	; 2
    6d5c:	69 2f       	mov	r22, r25
    6d5e:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
		LCD_vSendData('*');
    6d62:	8a e2       	ldi	r24, 0x2A	; 42
    6d64:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		pass[j]=corsal;
    6d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d6a:	88 2f       	mov	r24, r24
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	20 91 80 02 	lds	r18, 0x0280
    6d72:	fc 01       	movw	r30, r24
    6d74:	ee 53       	subi	r30, 0x3E	; 62
    6d76:	fd 4f       	sbci	r31, 0xFD	; 253
    6d78:	20 83       	st	Z, r18
		corsal = 0xff;
    6d7a:	8f ef       	ldi	r24, 0xFF	; 255
    6d7c:	80 93 80 02 	sts	0x0280, r24
void TEST_PASS ()
{

	LCD_vSendString("Enter password");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 j=0; j<4 ; j++)
    6d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d82:	8f 5f       	subi	r24, 0xFF	; 255
    6d84:	8f 87       	std	Y+15, r24	; 0x0f
    6d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d88:	84 30       	cpi	r24, 0x04	; 4
    6d8a:	08 f4       	brcc	.+2      	; 0x6d8e <TEST_PASS+0x15e>
    6d8c:	65 cf       	rjmp	.-310    	; 0x6c58 <TEST_PASS+0x28>
		LCD_vSendData('*');
		pass[j]=corsal;
		corsal = 0xff;

	}
	LCD_vClearScreen();
    6d8e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    6d92:	8f ef       	ldi	r24, 0xFF	; 255
    6d94:	80 93 80 02 	sts	0x0280, r24

}
    6d98:	2f 96       	adiw	r28, 0x0f	; 15
    6d9a:	0f b6       	in	r0, 0x3f	; 63
    6d9c:	f8 94       	cli
    6d9e:	de bf       	out	0x3e, r29	; 62
    6da0:	0f be       	out	0x3f, r0	; 63
    6da2:	cd bf       	out	0x3d, r28	; 61
    6da4:	cf 91       	pop	r28
    6da6:	df 91       	pop	r29
    6da8:	08 95       	ret

00006daa <CHECK_USER>:
void CHECK_USER ()
{
    6daa:	df 93       	push	r29
    6dac:	cf 93       	push	r28
    6dae:	cd b7       	in	r28, 0x3d	; 61
    6db0:	de b7       	in	r29, 0x3e	; 62
    6db2:	6e 97       	sbiw	r28, 0x1e	; 30
    6db4:	0f b6       	in	r0, 0x3f	; 63
    6db6:	f8 94       	cli
    6db8:	de bf       	out	0x3e, r29	; 62
    6dba:	0f be       	out	0x3f, r0	; 63
    6dbc:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("name ERROR!");
    6dbe:	8d ec       	ldi	r24, 0xCD	; 205
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    6dc6:	80 e0       	ldi	r24, 0x00	; 0
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	aa e7       	ldi	r26, 0x7A	; 122
    6dcc:	b4 e4       	ldi	r27, 0x44	; 68
    6dce:	89 8f       	std	Y+25, r24	; 0x19
    6dd0:	9a 8f       	std	Y+26, r25	; 0x1a
    6dd2:	ab 8f       	std	Y+27, r26	; 0x1b
    6dd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    6dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6dde:	20 e0       	ldi	r18, 0x00	; 0
    6de0:	30 e0       	ldi	r19, 0x00	; 0
    6de2:	4a ef       	ldi	r20, 0xFA	; 250
    6de4:	54 e4       	ldi	r21, 0x44	; 68
    6de6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6dea:	dc 01       	movw	r26, r24
    6dec:	cb 01       	movw	r24, r22
    6dee:	8d 8b       	std	Y+21, r24	; 0x15
    6df0:	9e 8b       	std	Y+22, r25	; 0x16
    6df2:	af 8b       	std	Y+23, r26	; 0x17
    6df4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6df6:	6d 89       	ldd	r22, Y+21	; 0x15
    6df8:	7e 89       	ldd	r23, Y+22	; 0x16
    6dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    6dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    6dfe:	20 e0       	ldi	r18, 0x00	; 0
    6e00:	30 e0       	ldi	r19, 0x00	; 0
    6e02:	40 e8       	ldi	r20, 0x80	; 128
    6e04:	5f e3       	ldi	r21, 0x3F	; 63
    6e06:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6e0a:	88 23       	and	r24, r24
    6e0c:	2c f4       	brge	.+10     	; 0x6e18 <CHECK_USER+0x6e>
		__ticks = 1;
    6e0e:	81 e0       	ldi	r24, 0x01	; 1
    6e10:	90 e0       	ldi	r25, 0x00	; 0
    6e12:	9c 8b       	std	Y+20, r25	; 0x14
    6e14:	8b 8b       	std	Y+19, r24	; 0x13
    6e16:	3f c0       	rjmp	.+126    	; 0x6e96 <CHECK_USER+0xec>
	else if (__tmp > 65535)
    6e18:	6d 89       	ldd	r22, Y+21	; 0x15
    6e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    6e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    6e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    6e20:	20 e0       	ldi	r18, 0x00	; 0
    6e22:	3f ef       	ldi	r19, 0xFF	; 255
    6e24:	4f e7       	ldi	r20, 0x7F	; 127
    6e26:	57 e4       	ldi	r21, 0x47	; 71
    6e28:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6e2c:	18 16       	cp	r1, r24
    6e2e:	4c f5       	brge	.+82     	; 0x6e82 <CHECK_USER+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e30:	69 8d       	ldd	r22, Y+25	; 0x19
    6e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e38:	20 e0       	ldi	r18, 0x00	; 0
    6e3a:	30 e0       	ldi	r19, 0x00	; 0
    6e3c:	40 e2       	ldi	r20, 0x20	; 32
    6e3e:	51 e4       	ldi	r21, 0x41	; 65
    6e40:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6e44:	dc 01       	movw	r26, r24
    6e46:	cb 01       	movw	r24, r22
    6e48:	bc 01       	movw	r22, r24
    6e4a:	cd 01       	movw	r24, r26
    6e4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e50:	dc 01       	movw	r26, r24
    6e52:	cb 01       	movw	r24, r22
    6e54:	9c 8b       	std	Y+20, r25	; 0x14
    6e56:	8b 8b       	std	Y+19, r24	; 0x13
    6e58:	0f c0       	rjmp	.+30     	; 0x6e78 <CHECK_USER+0xce>
    6e5a:	88 ec       	ldi	r24, 0xC8	; 200
    6e5c:	90 e0       	ldi	r25, 0x00	; 0
    6e5e:	9a 8b       	std	Y+18, r25	; 0x12
    6e60:	89 8b       	std	Y+17, r24	; 0x11
    6e62:	89 89       	ldd	r24, Y+17	; 0x11
    6e64:	9a 89       	ldd	r25, Y+18	; 0x12
    6e66:	01 97       	sbiw	r24, 0x01	; 1
    6e68:	f1 f7       	brne	.-4      	; 0x6e66 <CHECK_USER+0xbc>
    6e6a:	9a 8b       	std	Y+18, r25	; 0x12
    6e6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    6e70:	9c 89       	ldd	r25, Y+20	; 0x14
    6e72:	01 97       	sbiw	r24, 0x01	; 1
    6e74:	9c 8b       	std	Y+20, r25	; 0x14
    6e76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e78:	8b 89       	ldd	r24, Y+19	; 0x13
    6e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    6e7c:	00 97       	sbiw	r24, 0x00	; 0
    6e7e:	69 f7       	brne	.-38     	; 0x6e5a <CHECK_USER+0xb0>
    6e80:	14 c0       	rjmp	.+40     	; 0x6eaa <CHECK_USER+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e82:	6d 89       	ldd	r22, Y+21	; 0x15
    6e84:	7e 89       	ldd	r23, Y+22	; 0x16
    6e86:	8f 89       	ldd	r24, Y+23	; 0x17
    6e88:	98 8d       	ldd	r25, Y+24	; 0x18
    6e8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e8e:	dc 01       	movw	r26, r24
    6e90:	cb 01       	movw	r24, r22
    6e92:	9c 8b       	std	Y+20, r25	; 0x14
    6e94:	8b 8b       	std	Y+19, r24	; 0x13
    6e96:	8b 89       	ldd	r24, Y+19	; 0x13
    6e98:	9c 89       	ldd	r25, Y+20	; 0x14
    6e9a:	98 8b       	std	Y+16, r25	; 0x10
    6e9c:	8f 87       	std	Y+15, r24	; 0x0f
    6e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ea0:	98 89       	ldd	r25, Y+16	; 0x10
    6ea2:	01 97       	sbiw	r24, 0x01	; 1
    6ea4:	f1 f7       	brne	.-4      	; 0x6ea2 <CHECK_USER+0xf8>
    6ea6:	98 8b       	std	Y+16, r25	; 0x10
    6ea8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_vClearScreen();
    6eaa:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try:");
    6eae:	89 ed       	ldi	r24, 0xD9	; 217
    6eb0:	90 e0       	ldi	r25, 0x00	; 0
    6eb2:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSendData(x+'0');
    6eb6:	80 91 8b 02 	lds	r24, 0x028B
    6eba:	80 5d       	subi	r24, 0xD0	; 208
    6ebc:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    6ec0:	80 e0       	ldi	r24, 0x00	; 0
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	aa e7       	ldi	r26, 0x7A	; 122
    6ec6:	b4 e4       	ldi	r27, 0x44	; 68
    6ec8:	8b 87       	std	Y+11, r24	; 0x0b
    6eca:	9c 87       	std	Y+12, r25	; 0x0c
    6ecc:	ad 87       	std	Y+13, r26	; 0x0d
    6ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ed8:	20 e0       	ldi	r18, 0x00	; 0
    6eda:	30 e0       	ldi	r19, 0x00	; 0
    6edc:	4a ef       	ldi	r20, 0xFA	; 250
    6ede:	54 e4       	ldi	r21, 0x44	; 68
    6ee0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6ee4:	dc 01       	movw	r26, r24
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	8f 83       	std	Y+7, r24	; 0x07
    6eea:	98 87       	std	Y+8, r25	; 0x08
    6eec:	a9 87       	std	Y+9, r26	; 0x09
    6eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ef2:	78 85       	ldd	r23, Y+8	; 0x08
    6ef4:	89 85       	ldd	r24, Y+9	; 0x09
    6ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ef8:	20 e0       	ldi	r18, 0x00	; 0
    6efa:	30 e0       	ldi	r19, 0x00	; 0
    6efc:	40 e8       	ldi	r20, 0x80	; 128
    6efe:	5f e3       	ldi	r21, 0x3F	; 63
    6f00:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6f04:	88 23       	and	r24, r24
    6f06:	2c f4       	brge	.+10     	; 0x6f12 <CHECK_USER+0x168>
		__ticks = 1;
    6f08:	81 e0       	ldi	r24, 0x01	; 1
    6f0a:	90 e0       	ldi	r25, 0x00	; 0
    6f0c:	9e 83       	std	Y+6, r25	; 0x06
    6f0e:	8d 83       	std	Y+5, r24	; 0x05
    6f10:	3f c0       	rjmp	.+126    	; 0x6f90 <CHECK_USER+0x1e6>
	else if (__tmp > 65535)
    6f12:	6f 81       	ldd	r22, Y+7	; 0x07
    6f14:	78 85       	ldd	r23, Y+8	; 0x08
    6f16:	89 85       	ldd	r24, Y+9	; 0x09
    6f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	3f ef       	ldi	r19, 0xFF	; 255
    6f1e:	4f e7       	ldi	r20, 0x7F	; 127
    6f20:	57 e4       	ldi	r21, 0x47	; 71
    6f22:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6f26:	18 16       	cp	r1, r24
    6f28:	4c f5       	brge	.+82     	; 0x6f7c <CHECK_USER+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f32:	20 e0       	ldi	r18, 0x00	; 0
    6f34:	30 e0       	ldi	r19, 0x00	; 0
    6f36:	40 e2       	ldi	r20, 0x20	; 32
    6f38:	51 e4       	ldi	r21, 0x41	; 65
    6f3a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6f3e:	dc 01       	movw	r26, r24
    6f40:	cb 01       	movw	r24, r22
    6f42:	bc 01       	movw	r22, r24
    6f44:	cd 01       	movw	r24, r26
    6f46:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6f4a:	dc 01       	movw	r26, r24
    6f4c:	cb 01       	movw	r24, r22
    6f4e:	9e 83       	std	Y+6, r25	; 0x06
    6f50:	8d 83       	std	Y+5, r24	; 0x05
    6f52:	0f c0       	rjmp	.+30     	; 0x6f72 <CHECK_USER+0x1c8>
    6f54:	88 ec       	ldi	r24, 0xC8	; 200
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	9c 83       	std	Y+4, r25	; 0x04
    6f5a:	8b 83       	std	Y+3, r24	; 0x03
    6f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    6f60:	01 97       	sbiw	r24, 0x01	; 1
    6f62:	f1 f7       	brne	.-4      	; 0x6f60 <CHECK_USER+0x1b6>
    6f64:	9c 83       	std	Y+4, r25	; 0x04
    6f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f68:	8d 81       	ldd	r24, Y+5	; 0x05
    6f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f6c:	01 97       	sbiw	r24, 0x01	; 1
    6f6e:	9e 83       	std	Y+6, r25	; 0x06
    6f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f72:	8d 81       	ldd	r24, Y+5	; 0x05
    6f74:	9e 81       	ldd	r25, Y+6	; 0x06
    6f76:	00 97       	sbiw	r24, 0x00	; 0
    6f78:	69 f7       	brne	.-38     	; 0x6f54 <CHECK_USER+0x1aa>
    6f7a:	14 c0       	rjmp	.+40     	; 0x6fa4 <CHECK_USER+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    6f7e:	78 85       	ldd	r23, Y+8	; 0x08
    6f80:	89 85       	ldd	r24, Y+9	; 0x09
    6f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f84:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6f88:	dc 01       	movw	r26, r24
    6f8a:	cb 01       	movw	r24, r22
    6f8c:	9e 83       	std	Y+6, r25	; 0x06
    6f8e:	8d 83       	std	Y+5, r24	; 0x05
    6f90:	8d 81       	ldd	r24, Y+5	; 0x05
    6f92:	9e 81       	ldd	r25, Y+6	; 0x06
    6f94:	9a 83       	std	Y+2, r25	; 0x02
    6f96:	89 83       	std	Y+1, r24	; 0x01
    6f98:	89 81       	ldd	r24, Y+1	; 0x01
    6f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9c:	01 97       	sbiw	r24, 0x01	; 1
    6f9e:	f1 f7       	brne	.-4      	; 0x6f9c <CHECK_USER+0x1f2>
    6fa0:	9a 83       	std	Y+2, r25	; 0x02
    6fa2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vClearScreen();
    6fa4:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try name");
    6fa8:	8e ed       	ldi	r24, 0xDE	; 222
    6faa:	90 e0       	ldi	r25, 0x00	; 0
    6fac:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    6fb0:	82 e0       	ldi	r24, 0x02	; 2
    6fb2:	61 e0       	ldi	r22, 0x01	; 1
    6fb4:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=0; i<16 ; i++)
    6fb8:	1e 8e       	std	Y+30, r1	; 0x1e
    6fba:	41 c0       	rjmp	.+130    	; 0x703e <CHECK_USER+0x294>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    6fbc:	80 e8       	ldi	r24, 0x80	; 128
    6fbe:	92 e0       	ldi	r25, 0x02	; 2
    6fc0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    6fc4:	80 91 80 02 	lds	r24, 0x0280
    6fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    6fca:	c1 f3       	breq	.-16     	; 0x6fbc <CHECK_USER+0x212>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
    6fcc:	80 91 80 02 	lds	r24, 0x0280
    6fd0:	8d 33       	cpi	r24, 0x3D	; 61
    6fd2:	91 f4       	brne	.+36     	; 0x6ff8 <CHECK_USER+0x24e>
		{
			for(u8 j=i;j<16;j++)
    6fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6fd6:	8d 8f       	std	Y+29, r24	; 0x1d
    6fd8:	0b c0       	rjmp	.+22     	; 0x6ff0 <CHECK_USER+0x246>
			{
				user[j]=NOTPRESSED;
    6fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fdc:	88 2f       	mov	r24, r24
    6fde:	90 e0       	ldi	r25, 0x00	; 0
    6fe0:	fc 01       	movw	r30, r24
    6fe2:	ee 54       	subi	r30, 0x4E	; 78
    6fe4:	fd 4f       	sbci	r31, 0xFD	; 253
    6fe6:	8f ef       	ldi	r24, 0xFF	; 255
    6fe8:	80 83       	st	Z, r24
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
		{
			for(u8 j=i;j<16;j++)
    6fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fec:	8f 5f       	subi	r24, 0xFF	; 255
    6fee:	8d 8f       	std	Y+29, r24	; 0x1d
    6ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ff2:	80 31       	cpi	r24, 0x10	; 16
    6ff4:	90 f3       	brcs	.-28     	; 0x6fda <CHECK_USER+0x230>
    6ff6:	27 c0       	rjmp	.+78     	; 0x7046 <CHECK_USER+0x29c>
			{
				user[j]=NOTPRESSED;
			}
			break;
		}
		else if (corsal== '?')
    6ff8:	80 91 80 02 	lds	r24, 0x0280
    6ffc:	8f 33       	cpi	r24, 0x3F	; 63
    6ffe:	61 f4       	brne	.+24     	; 0x7018 <CHECK_USER+0x26e>
		{
			LCD_vSendData(' ');
    7000:	80 e2       	ldi	r24, 0x20	; 32
    7002:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i] = ' ';
    7006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7008:	88 2f       	mov	r24, r24
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	fc 01       	movw	r30, r24
    700e:	ee 54       	subi	r30, 0x4E	; 78
    7010:	fd 4f       	sbci	r31, 0xFD	; 253
    7012:	80 e2       	ldi	r24, 0x20	; 32
    7014:	80 83       	st	Z, r24
    7016:	0d c0       	rjmp	.+26     	; 0x7032 <CHECK_USER+0x288>
		}
		else
		{
			LCD_vSendData(corsal);
    7018:	80 91 80 02 	lds	r24, 0x0280
    701c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i] = corsal;
    7020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7022:	88 2f       	mov	r24, r24
    7024:	90 e0       	ldi	r25, 0x00	; 0
    7026:	20 91 80 02 	lds	r18, 0x0280
    702a:	fc 01       	movw	r30, r24
    702c:	ee 54       	subi	r30, 0x4E	; 78
    702e:	fd 4f       	sbci	r31, 0xFD	; 253
    7030:	20 83       	st	Z, r18
		}
		corsal = 0xff;
    7032:	8f ef       	ldi	r24, 0xFF	; 255
    7034:	80 93 80 02 	sts	0x0280, r24
	LCD_vSendData(x+'0');
	_delay_ms(1000);
	LCD_vClearScreen();
	LCD_vSendString("try name");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=0; i<16 ; i++)
    7038:	8e 8d       	ldd	r24, Y+30	; 0x1e
    703a:	8f 5f       	subi	r24, 0xFF	; 255
    703c:	8e 8f       	std	Y+30, r24	; 0x1e
    703e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7040:	80 31       	cpi	r24, 0x10	; 16
    7042:	08 f4       	brcc	.+2      	; 0x7046 <CHECK_USER+0x29c>
    7044:	bb cf       	rjmp	.-138    	; 0x6fbc <CHECK_USER+0x212>
			user[i] = corsal;
		}
		corsal = 0xff;

	}
	x--;
    7046:	80 91 8b 02 	lds	r24, 0x028B
    704a:	81 50       	subi	r24, 0x01	; 1
    704c:	80 93 8b 02 	sts	0x028B, r24
	LCD_vClearScreen();
    7050:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    7054:	8f ef       	ldi	r24, 0xFF	; 255
    7056:	80 93 80 02 	sts	0x0280, r24

}
    705a:	6e 96       	adiw	r28, 0x1e	; 30
    705c:	0f b6       	in	r0, 0x3f	; 63
    705e:	f8 94       	cli
    7060:	de bf       	out	0x3e, r29	; 62
    7062:	0f be       	out	0x3f, r0	; 63
    7064:	cd bf       	out	0x3d, r28	; 61
    7066:	cf 91       	pop	r28
    7068:	df 91       	pop	r29
    706a:	08 95       	ret

0000706c <CHECK_PASS>:
void CHECK_PASS ()
{
    706c:	df 93       	push	r29
    706e:	cf 93       	push	r28
    7070:	cd b7       	in	r28, 0x3d	; 61
    7072:	de b7       	in	r29, 0x3e	; 62
    7074:	ac 97       	sbiw	r28, 0x2c	; 44
    7076:	0f b6       	in	r0, 0x3f	; 63
    7078:	f8 94       	cli
    707a:	de bf       	out	0x3e, r29	; 62
    707c:	0f be       	out	0x3f, r0	; 63
    707e:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("password ERROR!");
    7080:	87 ee       	ldi	r24, 0xE7	; 231
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    7088:	80 e0       	ldi	r24, 0x00	; 0
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	aa e7       	ldi	r26, 0x7A	; 122
    708e:	b4 e4       	ldi	r27, 0x44	; 68
    7090:	8f a3       	std	Y+39, r24	; 0x27
    7092:	98 a7       	std	Y+40, r25	; 0x28
    7094:	a9 a7       	std	Y+41, r26	; 0x29
    7096:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7098:	6f a1       	ldd	r22, Y+39	; 0x27
    709a:	78 a5       	ldd	r23, Y+40	; 0x28
    709c:	89 a5       	ldd	r24, Y+41	; 0x29
    709e:	9a a5       	ldd	r25, Y+42	; 0x2a
    70a0:	20 e0       	ldi	r18, 0x00	; 0
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    70a4:	4a ef       	ldi	r20, 0xFA	; 250
    70a6:	54 e4       	ldi	r21, 0x44	; 68
    70a8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    70ac:	dc 01       	movw	r26, r24
    70ae:	cb 01       	movw	r24, r22
    70b0:	8b a3       	std	Y+35, r24	; 0x23
    70b2:	9c a3       	std	Y+36, r25	; 0x24
    70b4:	ad a3       	std	Y+37, r26	; 0x25
    70b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    70b8:	6b a1       	ldd	r22, Y+35	; 0x23
    70ba:	7c a1       	ldd	r23, Y+36	; 0x24
    70bc:	8d a1       	ldd	r24, Y+37	; 0x25
    70be:	9e a1       	ldd	r25, Y+38	; 0x26
    70c0:	20 e0       	ldi	r18, 0x00	; 0
    70c2:	30 e0       	ldi	r19, 0x00	; 0
    70c4:	40 e8       	ldi	r20, 0x80	; 128
    70c6:	5f e3       	ldi	r21, 0x3F	; 63
    70c8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    70cc:	88 23       	and	r24, r24
    70ce:	2c f4       	brge	.+10     	; 0x70da <CHECK_PASS+0x6e>
		__ticks = 1;
    70d0:	81 e0       	ldi	r24, 0x01	; 1
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	9a a3       	std	Y+34, r25	; 0x22
    70d6:	89 a3       	std	Y+33, r24	; 0x21
    70d8:	3f c0       	rjmp	.+126    	; 0x7158 <CHECK_PASS+0xec>
	else if (__tmp > 65535)
    70da:	6b a1       	ldd	r22, Y+35	; 0x23
    70dc:	7c a1       	ldd	r23, Y+36	; 0x24
    70de:	8d a1       	ldd	r24, Y+37	; 0x25
    70e0:	9e a1       	ldd	r25, Y+38	; 0x26
    70e2:	20 e0       	ldi	r18, 0x00	; 0
    70e4:	3f ef       	ldi	r19, 0xFF	; 255
    70e6:	4f e7       	ldi	r20, 0x7F	; 127
    70e8:	57 e4       	ldi	r21, 0x47	; 71
    70ea:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    70ee:	18 16       	cp	r1, r24
    70f0:	4c f5       	brge	.+82     	; 0x7144 <CHECK_PASS+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70f2:	6f a1       	ldd	r22, Y+39	; 0x27
    70f4:	78 a5       	ldd	r23, Y+40	; 0x28
    70f6:	89 a5       	ldd	r24, Y+41	; 0x29
    70f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    70fa:	20 e0       	ldi	r18, 0x00	; 0
    70fc:	30 e0       	ldi	r19, 0x00	; 0
    70fe:	40 e2       	ldi	r20, 0x20	; 32
    7100:	51 e4       	ldi	r21, 0x41	; 65
    7102:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7106:	dc 01       	movw	r26, r24
    7108:	cb 01       	movw	r24, r22
    710a:	bc 01       	movw	r22, r24
    710c:	cd 01       	movw	r24, r26
    710e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7112:	dc 01       	movw	r26, r24
    7114:	cb 01       	movw	r24, r22
    7116:	9a a3       	std	Y+34, r25	; 0x22
    7118:	89 a3       	std	Y+33, r24	; 0x21
    711a:	0f c0       	rjmp	.+30     	; 0x713a <CHECK_PASS+0xce>
    711c:	88 ec       	ldi	r24, 0xC8	; 200
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	98 a3       	std	Y+32, r25	; 0x20
    7122:	8f 8f       	std	Y+31, r24	; 0x1f
    7124:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7126:	98 a1       	ldd	r25, Y+32	; 0x20
    7128:	01 97       	sbiw	r24, 0x01	; 1
    712a:	f1 f7       	brne	.-4      	; 0x7128 <CHECK_PASS+0xbc>
    712c:	98 a3       	std	Y+32, r25	; 0x20
    712e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7130:	89 a1       	ldd	r24, Y+33	; 0x21
    7132:	9a a1       	ldd	r25, Y+34	; 0x22
    7134:	01 97       	sbiw	r24, 0x01	; 1
    7136:	9a a3       	std	Y+34, r25	; 0x22
    7138:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    713a:	89 a1       	ldd	r24, Y+33	; 0x21
    713c:	9a a1       	ldd	r25, Y+34	; 0x22
    713e:	00 97       	sbiw	r24, 0x00	; 0
    7140:	69 f7       	brne	.-38     	; 0x711c <CHECK_PASS+0xb0>
    7142:	14 c0       	rjmp	.+40     	; 0x716c <CHECK_PASS+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7144:	6b a1       	ldd	r22, Y+35	; 0x23
    7146:	7c a1       	ldd	r23, Y+36	; 0x24
    7148:	8d a1       	ldd	r24, Y+37	; 0x25
    714a:	9e a1       	ldd	r25, Y+38	; 0x26
    714c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7150:	dc 01       	movw	r26, r24
    7152:	cb 01       	movw	r24, r22
    7154:	9a a3       	std	Y+34, r25	; 0x22
    7156:	89 a3       	std	Y+33, r24	; 0x21
    7158:	89 a1       	ldd	r24, Y+33	; 0x21
    715a:	9a a1       	ldd	r25, Y+34	; 0x22
    715c:	9e 8f       	std	Y+30, r25	; 0x1e
    715e:	8d 8f       	std	Y+29, r24	; 0x1d
    7160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7162:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7164:	01 97       	sbiw	r24, 0x01	; 1
    7166:	f1 f7       	brne	.-4      	; 0x7164 <CHECK_PASS+0xf8>
    7168:	9e 8f       	std	Y+30, r25	; 0x1e
    716a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_vClearScreen();
    716c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try:");
    7170:	89 ed       	ldi	r24, 0xD9	; 217
    7172:	90 e0       	ldi	r25, 0x00	; 0
    7174:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSendData(x+'0');
    7178:	80 91 8b 02 	lds	r24, 0x028B
    717c:	80 5d       	subi	r24, 0xD0	; 208
    717e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    7182:	80 e0       	ldi	r24, 0x00	; 0
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	aa ef       	ldi	r26, 0xFA	; 250
    7188:	b3 e4       	ldi	r27, 0x43	; 67
    718a:	89 8f       	std	Y+25, r24	; 0x19
    718c:	9a 8f       	std	Y+26, r25	; 0x1a
    718e:	ab 8f       	std	Y+27, r26	; 0x1b
    7190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7192:	69 8d       	ldd	r22, Y+25	; 0x19
    7194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    719a:	20 e0       	ldi	r18, 0x00	; 0
    719c:	30 e0       	ldi	r19, 0x00	; 0
    719e:	4a ef       	ldi	r20, 0xFA	; 250
    71a0:	54 e4       	ldi	r21, 0x44	; 68
    71a2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    71a6:	dc 01       	movw	r26, r24
    71a8:	cb 01       	movw	r24, r22
    71aa:	8d 8b       	std	Y+21, r24	; 0x15
    71ac:	9e 8b       	std	Y+22, r25	; 0x16
    71ae:	af 8b       	std	Y+23, r26	; 0x17
    71b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    71b2:	6d 89       	ldd	r22, Y+21	; 0x15
    71b4:	7e 89       	ldd	r23, Y+22	; 0x16
    71b6:	8f 89       	ldd	r24, Y+23	; 0x17
    71b8:	98 8d       	ldd	r25, Y+24	; 0x18
    71ba:	20 e0       	ldi	r18, 0x00	; 0
    71bc:	30 e0       	ldi	r19, 0x00	; 0
    71be:	40 e8       	ldi	r20, 0x80	; 128
    71c0:	5f e3       	ldi	r21, 0x3F	; 63
    71c2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    71c6:	88 23       	and	r24, r24
    71c8:	2c f4       	brge	.+10     	; 0x71d4 <CHECK_PASS+0x168>
		__ticks = 1;
    71ca:	81 e0       	ldi	r24, 0x01	; 1
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	9c 8b       	std	Y+20, r25	; 0x14
    71d0:	8b 8b       	std	Y+19, r24	; 0x13
    71d2:	3f c0       	rjmp	.+126    	; 0x7252 <CHECK_PASS+0x1e6>
	else if (__tmp > 65535)
    71d4:	6d 89       	ldd	r22, Y+21	; 0x15
    71d6:	7e 89       	ldd	r23, Y+22	; 0x16
    71d8:	8f 89       	ldd	r24, Y+23	; 0x17
    71da:	98 8d       	ldd	r25, Y+24	; 0x18
    71dc:	20 e0       	ldi	r18, 0x00	; 0
    71de:	3f ef       	ldi	r19, 0xFF	; 255
    71e0:	4f e7       	ldi	r20, 0x7F	; 127
    71e2:	57 e4       	ldi	r21, 0x47	; 71
    71e4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    71e8:	18 16       	cp	r1, r24
    71ea:	4c f5       	brge	.+82     	; 0x723e <CHECK_PASS+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71ec:	69 8d       	ldd	r22, Y+25	; 0x19
    71ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71f4:	20 e0       	ldi	r18, 0x00	; 0
    71f6:	30 e0       	ldi	r19, 0x00	; 0
    71f8:	40 e2       	ldi	r20, 0x20	; 32
    71fa:	51 e4       	ldi	r21, 0x41	; 65
    71fc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7200:	dc 01       	movw	r26, r24
    7202:	cb 01       	movw	r24, r22
    7204:	bc 01       	movw	r22, r24
    7206:	cd 01       	movw	r24, r26
    7208:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    720c:	dc 01       	movw	r26, r24
    720e:	cb 01       	movw	r24, r22
    7210:	9c 8b       	std	Y+20, r25	; 0x14
    7212:	8b 8b       	std	Y+19, r24	; 0x13
    7214:	0f c0       	rjmp	.+30     	; 0x7234 <CHECK_PASS+0x1c8>
    7216:	88 ec       	ldi	r24, 0xC8	; 200
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	9a 8b       	std	Y+18, r25	; 0x12
    721c:	89 8b       	std	Y+17, r24	; 0x11
    721e:	89 89       	ldd	r24, Y+17	; 0x11
    7220:	9a 89       	ldd	r25, Y+18	; 0x12
    7222:	01 97       	sbiw	r24, 0x01	; 1
    7224:	f1 f7       	brne	.-4      	; 0x7222 <CHECK_PASS+0x1b6>
    7226:	9a 8b       	std	Y+18, r25	; 0x12
    7228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    722a:	8b 89       	ldd	r24, Y+19	; 0x13
    722c:	9c 89       	ldd	r25, Y+20	; 0x14
    722e:	01 97       	sbiw	r24, 0x01	; 1
    7230:	9c 8b       	std	Y+20, r25	; 0x14
    7232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7234:	8b 89       	ldd	r24, Y+19	; 0x13
    7236:	9c 89       	ldd	r25, Y+20	; 0x14
    7238:	00 97       	sbiw	r24, 0x00	; 0
    723a:	69 f7       	brne	.-38     	; 0x7216 <CHECK_PASS+0x1aa>
    723c:	14 c0       	rjmp	.+40     	; 0x7266 <CHECK_PASS+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    723e:	6d 89       	ldd	r22, Y+21	; 0x15
    7240:	7e 89       	ldd	r23, Y+22	; 0x16
    7242:	8f 89       	ldd	r24, Y+23	; 0x17
    7244:	98 8d       	ldd	r25, Y+24	; 0x18
    7246:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    724a:	dc 01       	movw	r26, r24
    724c:	cb 01       	movw	r24, r22
    724e:	9c 8b       	std	Y+20, r25	; 0x14
    7250:	8b 8b       	std	Y+19, r24	; 0x13
    7252:	8b 89       	ldd	r24, Y+19	; 0x13
    7254:	9c 89       	ldd	r25, Y+20	; 0x14
    7256:	98 8b       	std	Y+16, r25	; 0x10
    7258:	8f 87       	std	Y+15, r24	; 0x0f
    725a:	8f 85       	ldd	r24, Y+15	; 0x0f
    725c:	98 89       	ldd	r25, Y+16	; 0x10
    725e:	01 97       	sbiw	r24, 0x01	; 1
    7260:	f1 f7       	brne	.-4      	; 0x725e <CHECK_PASS+0x1f2>
    7262:	98 8b       	std	Y+16, r25	; 0x10
    7264:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_vClearScreen();
    7266:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try password");
    726a:	87 ef       	ldi	r24, 0xF7	; 247
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    7272:	82 e0       	ldi	r24, 0x02	; 2
    7274:	61 e0       	ldi	r22, 0x01	; 1
    7276:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    727a:	80 e1       	ldi	r24, 0x10	; 16
    727c:	8c a7       	std	Y+44, r24	; 0x2c
    727e:	1b a6       	std	Y+43, r1	; 0x2b
    7280:	9a c0       	rjmp	.+308    	; 0x73b6 <CHECK_PASS+0x34a>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    7282:	80 e8       	ldi	r24, 0x80	; 128
    7284:	92 e0       	ldi	r25, 0x02	; 2
    7286:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    728a:	80 91 80 02 	lds	r24, 0x0280
    728e:	8f 3f       	cpi	r24, 0xFF	; 255
    7290:	c1 f3       	breq	.-16     	; 0x7282 <CHECK_PASS+0x216>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		LCD_vSendData(corsal);
    7292:	80 91 80 02 	lds	r24, 0x0280
    7296:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    729a:	80 e0       	ldi	r24, 0x00	; 0
    729c:	90 e0       	ldi	r25, 0x00	; 0
    729e:	aa e7       	ldi	r26, 0x7A	; 122
    72a0:	b3 e4       	ldi	r27, 0x43	; 67
    72a2:	8b 87       	std	Y+11, r24	; 0x0b
    72a4:	9c 87       	std	Y+12, r25	; 0x0c
    72a6:	ad 87       	std	Y+13, r26	; 0x0d
    72a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    72ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    72ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    72b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    72b2:	20 e0       	ldi	r18, 0x00	; 0
    72b4:	30 e0       	ldi	r19, 0x00	; 0
    72b6:	4a ef       	ldi	r20, 0xFA	; 250
    72b8:	54 e4       	ldi	r21, 0x44	; 68
    72ba:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    72be:	dc 01       	movw	r26, r24
    72c0:	cb 01       	movw	r24, r22
    72c2:	8f 83       	std	Y+7, r24	; 0x07
    72c4:	98 87       	std	Y+8, r25	; 0x08
    72c6:	a9 87       	std	Y+9, r26	; 0x09
    72c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    72ca:	6f 81       	ldd	r22, Y+7	; 0x07
    72cc:	78 85       	ldd	r23, Y+8	; 0x08
    72ce:	89 85       	ldd	r24, Y+9	; 0x09
    72d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    72d2:	20 e0       	ldi	r18, 0x00	; 0
    72d4:	30 e0       	ldi	r19, 0x00	; 0
    72d6:	40 e8       	ldi	r20, 0x80	; 128
    72d8:	5f e3       	ldi	r21, 0x3F	; 63
    72da:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    72de:	88 23       	and	r24, r24
    72e0:	2c f4       	brge	.+10     	; 0x72ec <CHECK_PASS+0x280>
		__ticks = 1;
    72e2:	81 e0       	ldi	r24, 0x01	; 1
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	9e 83       	std	Y+6, r25	; 0x06
    72e8:	8d 83       	std	Y+5, r24	; 0x05
    72ea:	3f c0       	rjmp	.+126    	; 0x736a <CHECK_PASS+0x2fe>
	else if (__tmp > 65535)
    72ec:	6f 81       	ldd	r22, Y+7	; 0x07
    72ee:	78 85       	ldd	r23, Y+8	; 0x08
    72f0:	89 85       	ldd	r24, Y+9	; 0x09
    72f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    72f4:	20 e0       	ldi	r18, 0x00	; 0
    72f6:	3f ef       	ldi	r19, 0xFF	; 255
    72f8:	4f e7       	ldi	r20, 0x7F	; 127
    72fa:	57 e4       	ldi	r21, 0x47	; 71
    72fc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7300:	18 16       	cp	r1, r24
    7302:	4c f5       	brge	.+82     	; 0x7356 <CHECK_PASS+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7304:	6b 85       	ldd	r22, Y+11	; 0x0b
    7306:	7c 85       	ldd	r23, Y+12	; 0x0c
    7308:	8d 85       	ldd	r24, Y+13	; 0x0d
    730a:	9e 85       	ldd	r25, Y+14	; 0x0e
    730c:	20 e0       	ldi	r18, 0x00	; 0
    730e:	30 e0       	ldi	r19, 0x00	; 0
    7310:	40 e2       	ldi	r20, 0x20	; 32
    7312:	51 e4       	ldi	r21, 0x41	; 65
    7314:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7318:	dc 01       	movw	r26, r24
    731a:	cb 01       	movw	r24, r22
    731c:	bc 01       	movw	r22, r24
    731e:	cd 01       	movw	r24, r26
    7320:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7324:	dc 01       	movw	r26, r24
    7326:	cb 01       	movw	r24, r22
    7328:	9e 83       	std	Y+6, r25	; 0x06
    732a:	8d 83       	std	Y+5, r24	; 0x05
    732c:	0f c0       	rjmp	.+30     	; 0x734c <CHECK_PASS+0x2e0>
    732e:	88 ec       	ldi	r24, 0xC8	; 200
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	9c 83       	std	Y+4, r25	; 0x04
    7334:	8b 83       	std	Y+3, r24	; 0x03
    7336:	8b 81       	ldd	r24, Y+3	; 0x03
    7338:	9c 81       	ldd	r25, Y+4	; 0x04
    733a:	01 97       	sbiw	r24, 0x01	; 1
    733c:	f1 f7       	brne	.-4      	; 0x733a <CHECK_PASS+0x2ce>
    733e:	9c 83       	std	Y+4, r25	; 0x04
    7340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7342:	8d 81       	ldd	r24, Y+5	; 0x05
    7344:	9e 81       	ldd	r25, Y+6	; 0x06
    7346:	01 97       	sbiw	r24, 0x01	; 1
    7348:	9e 83       	std	Y+6, r25	; 0x06
    734a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    734c:	8d 81       	ldd	r24, Y+5	; 0x05
    734e:	9e 81       	ldd	r25, Y+6	; 0x06
    7350:	00 97       	sbiw	r24, 0x00	; 0
    7352:	69 f7       	brne	.-38     	; 0x732e <CHECK_PASS+0x2c2>
    7354:	14 c0       	rjmp	.+40     	; 0x737e <CHECK_PASS+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7356:	6f 81       	ldd	r22, Y+7	; 0x07
    7358:	78 85       	ldd	r23, Y+8	; 0x08
    735a:	89 85       	ldd	r24, Y+9	; 0x09
    735c:	9a 85       	ldd	r25, Y+10	; 0x0a
    735e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7362:	dc 01       	movw	r26, r24
    7364:	cb 01       	movw	r24, r22
    7366:	9e 83       	std	Y+6, r25	; 0x06
    7368:	8d 83       	std	Y+5, r24	; 0x05
    736a:	8d 81       	ldd	r24, Y+5	; 0x05
    736c:	9e 81       	ldd	r25, Y+6	; 0x06
    736e:	9a 83       	std	Y+2, r25	; 0x02
    7370:	89 83       	std	Y+1, r24	; 0x01
    7372:	89 81       	ldd	r24, Y+1	; 0x01
    7374:	9a 81       	ldd	r25, Y+2	; 0x02
    7376:	01 97       	sbiw	r24, 0x01	; 1
    7378:	f1 f7       	brne	.-4      	; 0x7376 <CHECK_PASS+0x30a>
    737a:	9a 83       	std	Y+2, r25	; 0x02
    737c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vSetPosition(LCD_ROW_2,j+1);
    737e:	8b a5       	ldd	r24, Y+43	; 0x2b
    7380:	98 2f       	mov	r25, r24
    7382:	9f 5f       	subi	r25, 0xFF	; 255
    7384:	82 e0       	ldi	r24, 0x02	; 2
    7386:	69 2f       	mov	r22, r25
    7388:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
		LCD_vSendData('*');
    738c:	8a e2       	ldi	r24, 0x2A	; 42
    738e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		pass[j] = corsal;
    7392:	8b a5       	ldd	r24, Y+43	; 0x2b
    7394:	88 2f       	mov	r24, r24
    7396:	90 e0       	ldi	r25, 0x00	; 0
    7398:	20 91 80 02 	lds	r18, 0x0280
    739c:	fc 01       	movw	r30, r24
    739e:	ee 53       	subi	r30, 0x3E	; 62
    73a0:	fd 4f       	sbci	r31, 0xFD	; 253
    73a2:	20 83       	st	Z, r18
		corsal = 0xff;
    73a4:	8f ef       	ldi	r24, 0xFF	; 255
    73a6:	80 93 80 02 	sts	0x0280, r24
	LCD_vSendData(x+'0');
	_delay_ms(500);
	LCD_vClearScreen();
	LCD_vSendString("try password");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    73aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    73ac:	8f 5f       	subi	r24, 0xFF	; 255
    73ae:	8c a7       	std	Y+44, r24	; 0x2c
    73b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    73b2:	8f 5f       	subi	r24, 0xFF	; 255
    73b4:	8b a7       	std	Y+43, r24	; 0x2b
    73b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    73b8:	84 30       	cpi	r24, 0x04	; 4
    73ba:	08 f4       	brcc	.+2      	; 0x73be <CHECK_PASS+0x352>
    73bc:	62 cf       	rjmp	.-316    	; 0x7282 <CHECK_PASS+0x216>
		LCD_vSendData('*');
		pass[j] = corsal;
		corsal = 0xff;

	}
	x--;
    73be:	80 91 8b 02 	lds	r24, 0x028B
    73c2:	81 50       	subi	r24, 0x01	; 1
    73c4:	80 93 8b 02 	sts	0x028B, r24
	LCD_vClearScreen();
    73c8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    73cc:	8f ef       	ldi	r24, 0xFF	; 255
    73ce:	80 93 80 02 	sts	0x0280, r24

}
    73d2:	ac 96       	adiw	r28, 0x2c	; 44
    73d4:	0f b6       	in	r0, 0x3f	; 63
    73d6:	f8 94       	cli
    73d8:	de bf       	out	0x3e, r29	; 62
    73da:	0f be       	out	0x3f, r0	; 63
    73dc:	cd bf       	out	0x3d, r28	; 61
    73de:	cf 91       	pop	r28
    73e0:	df 91       	pop	r29
    73e2:	08 95       	ret

000073e4 <CHECK_USER_PASS>:

void CHECK_USER_PASS ()
{
    73e4:	0f 93       	push	r16
    73e6:	1f 93       	push	r17
    73e8:	df 93       	push	r29
    73ea:	cf 93       	push	r28
    73ec:	cd b7       	in	r28, 0x3d	; 61
    73ee:	de b7       	in	r29, 0x3e	; 62
    73f0:	c7 55       	subi	r28, 0x57	; 87
    73f2:	d0 40       	sbci	r29, 0x00	; 0
    73f4:	0f b6       	in	r0, 0x3f	; 63
    73f6:	f8 94       	cli
    73f8:	de bf       	out	0x3e, r29	; 62
    73fa:	0f be       	out	0x3f, r0	; 63
    73fc:	cd bf       	out	0x3d, r28	; 61
	LCD_vSendString("ERROR!");
    73fe:	84 e0       	ldi	r24, 0x04	; 4
    7400:	91 e0       	ldi	r25, 0x01	; 1
    7402:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    7406:	fe 01       	movw	r30, r28
    7408:	ef 5a       	subi	r30, 0xAF	; 175
    740a:	ff 4f       	sbci	r31, 0xFF	; 255
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	aa e7       	ldi	r26, 0x7A	; 122
    7412:	b4 e4       	ldi	r27, 0x44	; 68
    7414:	80 83       	st	Z, r24
    7416:	91 83       	std	Z+1, r25	; 0x01
    7418:	a2 83       	std	Z+2, r26	; 0x02
    741a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    741c:	8e 01       	movw	r16, r28
    741e:	03 5b       	subi	r16, 0xB3	; 179
    7420:	1f 4f       	sbci	r17, 0xFF	; 255
    7422:	fe 01       	movw	r30, r28
    7424:	ef 5a       	subi	r30, 0xAF	; 175
    7426:	ff 4f       	sbci	r31, 0xFF	; 255
    7428:	60 81       	ld	r22, Z
    742a:	71 81       	ldd	r23, Z+1	; 0x01
    742c:	82 81       	ldd	r24, Z+2	; 0x02
    742e:	93 81       	ldd	r25, Z+3	; 0x03
    7430:	20 e0       	ldi	r18, 0x00	; 0
    7432:	30 e0       	ldi	r19, 0x00	; 0
    7434:	4a ef       	ldi	r20, 0xFA	; 250
    7436:	54 e4       	ldi	r21, 0x44	; 68
    7438:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    743c:	dc 01       	movw	r26, r24
    743e:	cb 01       	movw	r24, r22
    7440:	f8 01       	movw	r30, r16
    7442:	80 83       	st	Z, r24
    7444:	91 83       	std	Z+1, r25	; 0x01
    7446:	a2 83       	std	Z+2, r26	; 0x02
    7448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    744a:	fe 01       	movw	r30, r28
    744c:	e3 5b       	subi	r30, 0xB3	; 179
    744e:	ff 4f       	sbci	r31, 0xFF	; 255
    7450:	60 81       	ld	r22, Z
    7452:	71 81       	ldd	r23, Z+1	; 0x01
    7454:	82 81       	ldd	r24, Z+2	; 0x02
    7456:	93 81       	ldd	r25, Z+3	; 0x03
    7458:	20 e0       	ldi	r18, 0x00	; 0
    745a:	30 e0       	ldi	r19, 0x00	; 0
    745c:	40 e8       	ldi	r20, 0x80	; 128
    745e:	5f e3       	ldi	r21, 0x3F	; 63
    7460:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    7464:	88 23       	and	r24, r24
    7466:	44 f4       	brge	.+16     	; 0x7478 <CHECK_USER_PASS+0x94>
		__ticks = 1;
    7468:	fe 01       	movw	r30, r28
    746a:	e5 5b       	subi	r30, 0xB5	; 181
    746c:	ff 4f       	sbci	r31, 0xFF	; 255
    746e:	81 e0       	ldi	r24, 0x01	; 1
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	91 83       	std	Z+1, r25	; 0x01
    7474:	80 83       	st	Z, r24
    7476:	64 c0       	rjmp	.+200    	; 0x7540 <CHECK_USER_PASS+0x15c>
	else if (__tmp > 65535)
    7478:	fe 01       	movw	r30, r28
    747a:	e3 5b       	subi	r30, 0xB3	; 179
    747c:	ff 4f       	sbci	r31, 0xFF	; 255
    747e:	60 81       	ld	r22, Z
    7480:	71 81       	ldd	r23, Z+1	; 0x01
    7482:	82 81       	ldd	r24, Z+2	; 0x02
    7484:	93 81       	ldd	r25, Z+3	; 0x03
    7486:	20 e0       	ldi	r18, 0x00	; 0
    7488:	3f ef       	ldi	r19, 0xFF	; 255
    748a:	4f e7       	ldi	r20, 0x7F	; 127
    748c:	57 e4       	ldi	r21, 0x47	; 71
    748e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7492:	18 16       	cp	r1, r24
    7494:	0c f0       	brlt	.+2      	; 0x7498 <CHECK_USER_PASS+0xb4>
    7496:	43 c0       	rjmp	.+134    	; 0x751e <CHECK_USER_PASS+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7498:	fe 01       	movw	r30, r28
    749a:	ef 5a       	subi	r30, 0xAF	; 175
    749c:	ff 4f       	sbci	r31, 0xFF	; 255
    749e:	60 81       	ld	r22, Z
    74a0:	71 81       	ldd	r23, Z+1	; 0x01
    74a2:	82 81       	ldd	r24, Z+2	; 0x02
    74a4:	93 81       	ldd	r25, Z+3	; 0x03
    74a6:	20 e0       	ldi	r18, 0x00	; 0
    74a8:	30 e0       	ldi	r19, 0x00	; 0
    74aa:	40 e2       	ldi	r20, 0x20	; 32
    74ac:	51 e4       	ldi	r21, 0x41	; 65
    74ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    74b2:	dc 01       	movw	r26, r24
    74b4:	cb 01       	movw	r24, r22
    74b6:	8e 01       	movw	r16, r28
    74b8:	05 5b       	subi	r16, 0xB5	; 181
    74ba:	1f 4f       	sbci	r17, 0xFF	; 255
    74bc:	bc 01       	movw	r22, r24
    74be:	cd 01       	movw	r24, r26
    74c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    74c4:	dc 01       	movw	r26, r24
    74c6:	cb 01       	movw	r24, r22
    74c8:	f8 01       	movw	r30, r16
    74ca:	91 83       	std	Z+1, r25	; 0x01
    74cc:	80 83       	st	Z, r24
    74ce:	1f c0       	rjmp	.+62     	; 0x750e <CHECK_USER_PASS+0x12a>
    74d0:	fe 01       	movw	r30, r28
    74d2:	e7 5b       	subi	r30, 0xB7	; 183
    74d4:	ff 4f       	sbci	r31, 0xFF	; 255
    74d6:	88 ec       	ldi	r24, 0xC8	; 200
    74d8:	90 e0       	ldi	r25, 0x00	; 0
    74da:	91 83       	std	Z+1, r25	; 0x01
    74dc:	80 83       	st	Z, r24
    74de:	fe 01       	movw	r30, r28
    74e0:	e7 5b       	subi	r30, 0xB7	; 183
    74e2:	ff 4f       	sbci	r31, 0xFF	; 255
    74e4:	80 81       	ld	r24, Z
    74e6:	91 81       	ldd	r25, Z+1	; 0x01
    74e8:	01 97       	sbiw	r24, 0x01	; 1
    74ea:	f1 f7       	brne	.-4      	; 0x74e8 <CHECK_USER_PASS+0x104>
    74ec:	fe 01       	movw	r30, r28
    74ee:	e7 5b       	subi	r30, 0xB7	; 183
    74f0:	ff 4f       	sbci	r31, 0xFF	; 255
    74f2:	91 83       	std	Z+1, r25	; 0x01
    74f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74f6:	de 01       	movw	r26, r28
    74f8:	a5 5b       	subi	r26, 0xB5	; 181
    74fa:	bf 4f       	sbci	r27, 0xFF	; 255
    74fc:	fe 01       	movw	r30, r28
    74fe:	e5 5b       	subi	r30, 0xB5	; 181
    7500:	ff 4f       	sbci	r31, 0xFF	; 255
    7502:	80 81       	ld	r24, Z
    7504:	91 81       	ldd	r25, Z+1	; 0x01
    7506:	01 97       	sbiw	r24, 0x01	; 1
    7508:	11 96       	adiw	r26, 0x01	; 1
    750a:	9c 93       	st	X, r25
    750c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    750e:	fe 01       	movw	r30, r28
    7510:	e5 5b       	subi	r30, 0xB5	; 181
    7512:	ff 4f       	sbci	r31, 0xFF	; 255
    7514:	80 81       	ld	r24, Z
    7516:	91 81       	ldd	r25, Z+1	; 0x01
    7518:	00 97       	sbiw	r24, 0x00	; 0
    751a:	d1 f6       	brne	.-76     	; 0x74d0 <CHECK_USER_PASS+0xec>
    751c:	27 c0       	rjmp	.+78     	; 0x756c <CHECK_USER_PASS+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    751e:	8e 01       	movw	r16, r28
    7520:	05 5b       	subi	r16, 0xB5	; 181
    7522:	1f 4f       	sbci	r17, 0xFF	; 255
    7524:	fe 01       	movw	r30, r28
    7526:	e3 5b       	subi	r30, 0xB3	; 179
    7528:	ff 4f       	sbci	r31, 0xFF	; 255
    752a:	60 81       	ld	r22, Z
    752c:	71 81       	ldd	r23, Z+1	; 0x01
    752e:	82 81       	ldd	r24, Z+2	; 0x02
    7530:	93 81       	ldd	r25, Z+3	; 0x03
    7532:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7536:	dc 01       	movw	r26, r24
    7538:	cb 01       	movw	r24, r22
    753a:	f8 01       	movw	r30, r16
    753c:	91 83       	std	Z+1, r25	; 0x01
    753e:	80 83       	st	Z, r24
    7540:	de 01       	movw	r26, r28
    7542:	a9 5b       	subi	r26, 0xB9	; 185
    7544:	bf 4f       	sbci	r27, 0xFF	; 255
    7546:	fe 01       	movw	r30, r28
    7548:	e5 5b       	subi	r30, 0xB5	; 181
    754a:	ff 4f       	sbci	r31, 0xFF	; 255
    754c:	80 81       	ld	r24, Z
    754e:	91 81       	ldd	r25, Z+1	; 0x01
    7550:	8d 93       	st	X+, r24
    7552:	9c 93       	st	X, r25
    7554:	fe 01       	movw	r30, r28
    7556:	e9 5b       	subi	r30, 0xB9	; 185
    7558:	ff 4f       	sbci	r31, 0xFF	; 255
    755a:	80 81       	ld	r24, Z
    755c:	91 81       	ldd	r25, Z+1	; 0x01
    755e:	01 97       	sbiw	r24, 0x01	; 1
    7560:	f1 f7       	brne	.-4      	; 0x755e <CHECK_USER_PASS+0x17a>
    7562:	fe 01       	movw	r30, r28
    7564:	e9 5b       	subi	r30, 0xB9	; 185
    7566:	ff 4f       	sbci	r31, 0xFF	; 255
    7568:	91 83       	std	Z+1, r25	; 0x01
    756a:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_vClearScreen();
    756c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("username ERROR!");
    7570:	8b e0       	ldi	r24, 0x0B	; 11
    7572:	91 e0       	ldi	r25, 0x01	; 1
    7574:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    7578:	fe 01       	movw	r30, r28
    757a:	ed 5b       	subi	r30, 0xBD	; 189
    757c:	ff 4f       	sbci	r31, 0xFF	; 255
    757e:	80 e0       	ldi	r24, 0x00	; 0
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	aa e7       	ldi	r26, 0x7A	; 122
    7584:	b4 e4       	ldi	r27, 0x44	; 68
    7586:	80 83       	st	Z, r24
    7588:	91 83       	std	Z+1, r25	; 0x01
    758a:	a2 83       	std	Z+2, r26	; 0x02
    758c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    758e:	8e 01       	movw	r16, r28
    7590:	01 5c       	subi	r16, 0xC1	; 193
    7592:	1f 4f       	sbci	r17, 0xFF	; 255
    7594:	fe 01       	movw	r30, r28
    7596:	ed 5b       	subi	r30, 0xBD	; 189
    7598:	ff 4f       	sbci	r31, 0xFF	; 255
    759a:	60 81       	ld	r22, Z
    759c:	71 81       	ldd	r23, Z+1	; 0x01
    759e:	82 81       	ldd	r24, Z+2	; 0x02
    75a0:	93 81       	ldd	r25, Z+3	; 0x03
    75a2:	20 e0       	ldi	r18, 0x00	; 0
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	4a ef       	ldi	r20, 0xFA	; 250
    75a8:	54 e4       	ldi	r21, 0x44	; 68
    75aa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    75ae:	dc 01       	movw	r26, r24
    75b0:	cb 01       	movw	r24, r22
    75b2:	f8 01       	movw	r30, r16
    75b4:	80 83       	st	Z, r24
    75b6:	91 83       	std	Z+1, r25	; 0x01
    75b8:	a2 83       	std	Z+2, r26	; 0x02
    75ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    75bc:	fe 01       	movw	r30, r28
    75be:	ff 96       	adiw	r30, 0x3f	; 63
    75c0:	60 81       	ld	r22, Z
    75c2:	71 81       	ldd	r23, Z+1	; 0x01
    75c4:	82 81       	ldd	r24, Z+2	; 0x02
    75c6:	93 81       	ldd	r25, Z+3	; 0x03
    75c8:	20 e0       	ldi	r18, 0x00	; 0
    75ca:	30 e0       	ldi	r19, 0x00	; 0
    75cc:	40 e8       	ldi	r20, 0x80	; 128
    75ce:	5f e3       	ldi	r21, 0x3F	; 63
    75d0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    75d4:	88 23       	and	r24, r24
    75d6:	2c f4       	brge	.+10     	; 0x75e2 <CHECK_USER_PASS+0x1fe>
		__ticks = 1;
    75d8:	81 e0       	ldi	r24, 0x01	; 1
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	9e af       	std	Y+62, r25	; 0x3e
    75de:	8d af       	std	Y+61, r24	; 0x3d
    75e0:	46 c0       	rjmp	.+140    	; 0x766e <CHECK_USER_PASS+0x28a>
	else if (__tmp > 65535)
    75e2:	fe 01       	movw	r30, r28
    75e4:	ff 96       	adiw	r30, 0x3f	; 63
    75e6:	60 81       	ld	r22, Z
    75e8:	71 81       	ldd	r23, Z+1	; 0x01
    75ea:	82 81       	ldd	r24, Z+2	; 0x02
    75ec:	93 81       	ldd	r25, Z+3	; 0x03
    75ee:	20 e0       	ldi	r18, 0x00	; 0
    75f0:	3f ef       	ldi	r19, 0xFF	; 255
    75f2:	4f e7       	ldi	r20, 0x7F	; 127
    75f4:	57 e4       	ldi	r21, 0x47	; 71
    75f6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    75fa:	18 16       	cp	r1, r24
    75fc:	64 f5       	brge	.+88     	; 0x7656 <CHECK_USER_PASS+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75fe:	fe 01       	movw	r30, r28
    7600:	ed 5b       	subi	r30, 0xBD	; 189
    7602:	ff 4f       	sbci	r31, 0xFF	; 255
    7604:	60 81       	ld	r22, Z
    7606:	71 81       	ldd	r23, Z+1	; 0x01
    7608:	82 81       	ldd	r24, Z+2	; 0x02
    760a:	93 81       	ldd	r25, Z+3	; 0x03
    760c:	20 e0       	ldi	r18, 0x00	; 0
    760e:	30 e0       	ldi	r19, 0x00	; 0
    7610:	40 e2       	ldi	r20, 0x20	; 32
    7612:	51 e4       	ldi	r21, 0x41	; 65
    7614:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7618:	dc 01       	movw	r26, r24
    761a:	cb 01       	movw	r24, r22
    761c:	bc 01       	movw	r22, r24
    761e:	cd 01       	movw	r24, r26
    7620:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7624:	dc 01       	movw	r26, r24
    7626:	cb 01       	movw	r24, r22
    7628:	9e af       	std	Y+62, r25	; 0x3e
    762a:	8d af       	std	Y+61, r24	; 0x3d
    762c:	0f c0       	rjmp	.+30     	; 0x764c <CHECK_USER_PASS+0x268>
    762e:	88 ec       	ldi	r24, 0xC8	; 200
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	9c af       	std	Y+60, r25	; 0x3c
    7634:	8b af       	std	Y+59, r24	; 0x3b
    7636:	8b ad       	ldd	r24, Y+59	; 0x3b
    7638:	9c ad       	ldd	r25, Y+60	; 0x3c
    763a:	01 97       	sbiw	r24, 0x01	; 1
    763c:	f1 f7       	brne	.-4      	; 0x763a <CHECK_USER_PASS+0x256>
    763e:	9c af       	std	Y+60, r25	; 0x3c
    7640:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7642:	8d ad       	ldd	r24, Y+61	; 0x3d
    7644:	9e ad       	ldd	r25, Y+62	; 0x3e
    7646:	01 97       	sbiw	r24, 0x01	; 1
    7648:	9e af       	std	Y+62, r25	; 0x3e
    764a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    764c:	8d ad       	ldd	r24, Y+61	; 0x3d
    764e:	9e ad       	ldd	r25, Y+62	; 0x3e
    7650:	00 97       	sbiw	r24, 0x00	; 0
    7652:	69 f7       	brne	.-38     	; 0x762e <CHECK_USER_PASS+0x24a>
    7654:	16 c0       	rjmp	.+44     	; 0x7682 <CHECK_USER_PASS+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7656:	fe 01       	movw	r30, r28
    7658:	ff 96       	adiw	r30, 0x3f	; 63
    765a:	60 81       	ld	r22, Z
    765c:	71 81       	ldd	r23, Z+1	; 0x01
    765e:	82 81       	ldd	r24, Z+2	; 0x02
    7660:	93 81       	ldd	r25, Z+3	; 0x03
    7662:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7666:	dc 01       	movw	r26, r24
    7668:	cb 01       	movw	r24, r22
    766a:	9e af       	std	Y+62, r25	; 0x3e
    766c:	8d af       	std	Y+61, r24	; 0x3d
    766e:	8d ad       	ldd	r24, Y+61	; 0x3d
    7670:	9e ad       	ldd	r25, Y+62	; 0x3e
    7672:	9a af       	std	Y+58, r25	; 0x3a
    7674:	89 af       	std	Y+57, r24	; 0x39
    7676:	89 ad       	ldd	r24, Y+57	; 0x39
    7678:	9a ad       	ldd	r25, Y+58	; 0x3a
    767a:	01 97       	sbiw	r24, 0x01	; 1
    767c:	f1 f7       	brne	.-4      	; 0x767a <CHECK_USER_PASS+0x296>
    767e:	9a af       	std	Y+58, r25	; 0x3a
    7680:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_vClearScreen();
    7682:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try:");
    7686:	89 ed       	ldi	r24, 0xD9	; 217
    7688:	90 e0       	ldi	r25, 0x00	; 0
    768a:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSendData(x+'0');
    768e:	80 91 8b 02 	lds	r24, 0x028B
    7692:	80 5d       	subi	r24, 0xD0	; 208
    7694:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    7698:	80 e0       	ldi	r24, 0x00	; 0
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	aa e7       	ldi	r26, 0x7A	; 122
    769e:	b4 e4       	ldi	r27, 0x44	; 68
    76a0:	8d ab       	std	Y+53, r24	; 0x35
    76a2:	9e ab       	std	Y+54, r25	; 0x36
    76a4:	af ab       	std	Y+55, r26	; 0x37
    76a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    76a8:	6d a9       	ldd	r22, Y+53	; 0x35
    76aa:	7e a9       	ldd	r23, Y+54	; 0x36
    76ac:	8f a9       	ldd	r24, Y+55	; 0x37
    76ae:	98 ad       	ldd	r25, Y+56	; 0x38
    76b0:	20 e0       	ldi	r18, 0x00	; 0
    76b2:	30 e0       	ldi	r19, 0x00	; 0
    76b4:	4a ef       	ldi	r20, 0xFA	; 250
    76b6:	54 e4       	ldi	r21, 0x44	; 68
    76b8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    76bc:	dc 01       	movw	r26, r24
    76be:	cb 01       	movw	r24, r22
    76c0:	89 ab       	std	Y+49, r24	; 0x31
    76c2:	9a ab       	std	Y+50, r25	; 0x32
    76c4:	ab ab       	std	Y+51, r26	; 0x33
    76c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    76c8:	69 a9       	ldd	r22, Y+49	; 0x31
    76ca:	7a a9       	ldd	r23, Y+50	; 0x32
    76cc:	8b a9       	ldd	r24, Y+51	; 0x33
    76ce:	9c a9       	ldd	r25, Y+52	; 0x34
    76d0:	20 e0       	ldi	r18, 0x00	; 0
    76d2:	30 e0       	ldi	r19, 0x00	; 0
    76d4:	40 e8       	ldi	r20, 0x80	; 128
    76d6:	5f e3       	ldi	r21, 0x3F	; 63
    76d8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    76dc:	88 23       	and	r24, r24
    76de:	2c f4       	brge	.+10     	; 0x76ea <CHECK_USER_PASS+0x306>
		__ticks = 1;
    76e0:	81 e0       	ldi	r24, 0x01	; 1
    76e2:	90 e0       	ldi	r25, 0x00	; 0
    76e4:	98 ab       	std	Y+48, r25	; 0x30
    76e6:	8f a7       	std	Y+47, r24	; 0x2f
    76e8:	3f c0       	rjmp	.+126    	; 0x7768 <CHECK_USER_PASS+0x384>
	else if (__tmp > 65535)
    76ea:	69 a9       	ldd	r22, Y+49	; 0x31
    76ec:	7a a9       	ldd	r23, Y+50	; 0x32
    76ee:	8b a9       	ldd	r24, Y+51	; 0x33
    76f0:	9c a9       	ldd	r25, Y+52	; 0x34
    76f2:	20 e0       	ldi	r18, 0x00	; 0
    76f4:	3f ef       	ldi	r19, 0xFF	; 255
    76f6:	4f e7       	ldi	r20, 0x7F	; 127
    76f8:	57 e4       	ldi	r21, 0x47	; 71
    76fa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    76fe:	18 16       	cp	r1, r24
    7700:	4c f5       	brge	.+82     	; 0x7754 <CHECK_USER_PASS+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7702:	6d a9       	ldd	r22, Y+53	; 0x35
    7704:	7e a9       	ldd	r23, Y+54	; 0x36
    7706:	8f a9       	ldd	r24, Y+55	; 0x37
    7708:	98 ad       	ldd	r25, Y+56	; 0x38
    770a:	20 e0       	ldi	r18, 0x00	; 0
    770c:	30 e0       	ldi	r19, 0x00	; 0
    770e:	40 e2       	ldi	r20, 0x20	; 32
    7710:	51 e4       	ldi	r21, 0x41	; 65
    7712:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7716:	dc 01       	movw	r26, r24
    7718:	cb 01       	movw	r24, r22
    771a:	bc 01       	movw	r22, r24
    771c:	cd 01       	movw	r24, r26
    771e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7722:	dc 01       	movw	r26, r24
    7724:	cb 01       	movw	r24, r22
    7726:	98 ab       	std	Y+48, r25	; 0x30
    7728:	8f a7       	std	Y+47, r24	; 0x2f
    772a:	0f c0       	rjmp	.+30     	; 0x774a <CHECK_USER_PASS+0x366>
    772c:	88 ec       	ldi	r24, 0xC8	; 200
    772e:	90 e0       	ldi	r25, 0x00	; 0
    7730:	9e a7       	std	Y+46, r25	; 0x2e
    7732:	8d a7       	std	Y+45, r24	; 0x2d
    7734:	8d a5       	ldd	r24, Y+45	; 0x2d
    7736:	9e a5       	ldd	r25, Y+46	; 0x2e
    7738:	01 97       	sbiw	r24, 0x01	; 1
    773a:	f1 f7       	brne	.-4      	; 0x7738 <CHECK_USER_PASS+0x354>
    773c:	9e a7       	std	Y+46, r25	; 0x2e
    773e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7740:	8f a5       	ldd	r24, Y+47	; 0x2f
    7742:	98 a9       	ldd	r25, Y+48	; 0x30
    7744:	01 97       	sbiw	r24, 0x01	; 1
    7746:	98 ab       	std	Y+48, r25	; 0x30
    7748:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    774a:	8f a5       	ldd	r24, Y+47	; 0x2f
    774c:	98 a9       	ldd	r25, Y+48	; 0x30
    774e:	00 97       	sbiw	r24, 0x00	; 0
    7750:	69 f7       	brne	.-38     	; 0x772c <CHECK_USER_PASS+0x348>
    7752:	14 c0       	rjmp	.+40     	; 0x777c <CHECK_USER_PASS+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7754:	69 a9       	ldd	r22, Y+49	; 0x31
    7756:	7a a9       	ldd	r23, Y+50	; 0x32
    7758:	8b a9       	ldd	r24, Y+51	; 0x33
    775a:	9c a9       	ldd	r25, Y+52	; 0x34
    775c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7760:	dc 01       	movw	r26, r24
    7762:	cb 01       	movw	r24, r22
    7764:	98 ab       	std	Y+48, r25	; 0x30
    7766:	8f a7       	std	Y+47, r24	; 0x2f
    7768:	8f a5       	ldd	r24, Y+47	; 0x2f
    776a:	98 a9       	ldd	r25, Y+48	; 0x30
    776c:	9c a7       	std	Y+44, r25	; 0x2c
    776e:	8b a7       	std	Y+43, r24	; 0x2b
    7770:	8b a5       	ldd	r24, Y+43	; 0x2b
    7772:	9c a5       	ldd	r25, Y+44	; 0x2c
    7774:	01 97       	sbiw	r24, 0x01	; 1
    7776:	f1 f7       	brne	.-4      	; 0x7774 <CHECK_USER_PASS+0x390>
    7778:	9c a7       	std	Y+44, r25	; 0x2c
    777a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_vClearScreen();
    777c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try username");
    7780:	8b e1       	ldi	r24, 0x1B	; 27
    7782:	91 e0       	ldi	r25, 0x01	; 1
    7784:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    7788:	82 e0       	ldi	r24, 0x02	; 2
    778a:	61 e0       	ldi	r22, 0x01	; 1
    778c:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=0; i<16 ; i++)
    7790:	fe 01       	movw	r30, r28
    7792:	e9 5a       	subi	r30, 0xA9	; 169
    7794:	ff 4f       	sbci	r31, 0xFF	; 255
    7796:	10 82       	st	Z, r1
    7798:	3b c0       	rjmp	.+118    	; 0x7810 <CHECK_USER_PASS+0x42c>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    779a:	80 e8       	ldi	r24, 0x80	; 128
    779c:	92 e0       	ldi	r25, 0x02	; 2
    779e:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    77a2:	80 91 80 02 	lds	r24, 0x0280
    77a6:	8f 3f       	cpi	r24, 0xFF	; 255
    77a8:	c1 f3       	breq	.-16     	; 0x779a <CHECK_USER_PASS+0x3b6>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		if(corsal == '=')
    77aa:	80 91 80 02 	lds	r24, 0x0280
    77ae:	8d 33       	cpi	r24, 0x3D	; 61
    77b0:	b1 f1       	breq	.+108    	; 0x781e <CHECK_USER_PASS+0x43a>
		{
			break;
		}
		else if (corsal== '?')
    77b2:	80 91 80 02 	lds	r24, 0x0280
    77b6:	8f 33       	cpi	r24, 0x3F	; 63
    77b8:	79 f4       	brne	.+30     	; 0x77d8 <CHECK_USER_PASS+0x3f4>
		{
			LCD_vSendData(' ');
    77ba:	80 e2       	ldi	r24, 0x20	; 32
    77bc:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i] = ' ';
    77c0:	fe 01       	movw	r30, r28
    77c2:	e9 5a       	subi	r30, 0xA9	; 169
    77c4:	ff 4f       	sbci	r31, 0xFF	; 255
    77c6:	80 81       	ld	r24, Z
    77c8:	88 2f       	mov	r24, r24
    77ca:	90 e0       	ldi	r25, 0x00	; 0
    77cc:	fc 01       	movw	r30, r24
    77ce:	ee 54       	subi	r30, 0x4E	; 78
    77d0:	fd 4f       	sbci	r31, 0xFD	; 253
    77d2:	80 e2       	ldi	r24, 0x20	; 32
    77d4:	80 83       	st	Z, r24
    77d6:	10 c0       	rjmp	.+32     	; 0x77f8 <CHECK_USER_PASS+0x414>
		}
		else
		{
			LCD_vSendData(corsal);
    77d8:	80 91 80 02 	lds	r24, 0x0280
    77dc:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
			user[i] = corsal;
    77e0:	fe 01       	movw	r30, r28
    77e2:	e9 5a       	subi	r30, 0xA9	; 169
    77e4:	ff 4f       	sbci	r31, 0xFF	; 255
    77e6:	80 81       	ld	r24, Z
    77e8:	88 2f       	mov	r24, r24
    77ea:	90 e0       	ldi	r25, 0x00	; 0
    77ec:	20 91 80 02 	lds	r18, 0x0280
    77f0:	fc 01       	movw	r30, r24
    77f2:	ee 54       	subi	r30, 0x4E	; 78
    77f4:	fd 4f       	sbci	r31, 0xFD	; 253
    77f6:	20 83       	st	Z, r18
		}
		corsal = 0xff;
    77f8:	8f ef       	ldi	r24, 0xFF	; 255
    77fa:	80 93 80 02 	sts	0x0280, r24
	LCD_vSendData(x+'0');
	_delay_ms(1000);
	LCD_vClearScreen();
	LCD_vSendString("try username");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=0; i<16 ; i++)
    77fe:	de 01       	movw	r26, r28
    7800:	a9 5a       	subi	r26, 0xA9	; 169
    7802:	bf 4f       	sbci	r27, 0xFF	; 255
    7804:	fe 01       	movw	r30, r28
    7806:	e9 5a       	subi	r30, 0xA9	; 169
    7808:	ff 4f       	sbci	r31, 0xFF	; 255
    780a:	80 81       	ld	r24, Z
    780c:	8f 5f       	subi	r24, 0xFF	; 255
    780e:	8c 93       	st	X, r24
    7810:	fe 01       	movw	r30, r28
    7812:	e9 5a       	subi	r30, 0xA9	; 169
    7814:	ff 4f       	sbci	r31, 0xFF	; 255
    7816:	80 81       	ld	r24, Z
    7818:	80 31       	cpi	r24, 0x10	; 16
    781a:	08 f4       	brcc	.+2      	; 0x781e <CHECK_USER_PASS+0x43a>
    781c:	be cf       	rjmp	.-132    	; 0x779a <CHECK_USER_PASS+0x3b6>
			user[i] = corsal;
		}
		corsal = 0xff;

	}
	LCD_vClearScreen();
    781e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("password ERROR!");
    7822:	87 ee       	ldi	r24, 0xE7	; 231
    7824:	90 e0       	ldi	r25, 0x00	; 0
    7826:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
    782a:	80 e0       	ldi	r24, 0x00	; 0
    782c:	90 e0       	ldi	r25, 0x00	; 0
    782e:	aa e7       	ldi	r26, 0x7A	; 122
    7830:	b4 e4       	ldi	r27, 0x44	; 68
    7832:	8f a3       	std	Y+39, r24	; 0x27
    7834:	98 a7       	std	Y+40, r25	; 0x28
    7836:	a9 a7       	std	Y+41, r26	; 0x29
    7838:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    783a:	6f a1       	ldd	r22, Y+39	; 0x27
    783c:	78 a5       	ldd	r23, Y+40	; 0x28
    783e:	89 a5       	ldd	r24, Y+41	; 0x29
    7840:	9a a5       	ldd	r25, Y+42	; 0x2a
    7842:	20 e0       	ldi	r18, 0x00	; 0
    7844:	30 e0       	ldi	r19, 0x00	; 0
    7846:	4a ef       	ldi	r20, 0xFA	; 250
    7848:	54 e4       	ldi	r21, 0x44	; 68
    784a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    784e:	dc 01       	movw	r26, r24
    7850:	cb 01       	movw	r24, r22
    7852:	8b a3       	std	Y+35, r24	; 0x23
    7854:	9c a3       	std	Y+36, r25	; 0x24
    7856:	ad a3       	std	Y+37, r26	; 0x25
    7858:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    785a:	6b a1       	ldd	r22, Y+35	; 0x23
    785c:	7c a1       	ldd	r23, Y+36	; 0x24
    785e:	8d a1       	ldd	r24, Y+37	; 0x25
    7860:	9e a1       	ldd	r25, Y+38	; 0x26
    7862:	20 e0       	ldi	r18, 0x00	; 0
    7864:	30 e0       	ldi	r19, 0x00	; 0
    7866:	40 e8       	ldi	r20, 0x80	; 128
    7868:	5f e3       	ldi	r21, 0x3F	; 63
    786a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    786e:	88 23       	and	r24, r24
    7870:	2c f4       	brge	.+10     	; 0x787c <CHECK_USER_PASS+0x498>
		__ticks = 1;
    7872:	81 e0       	ldi	r24, 0x01	; 1
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	9a a3       	std	Y+34, r25	; 0x22
    7878:	89 a3       	std	Y+33, r24	; 0x21
    787a:	3f c0       	rjmp	.+126    	; 0x78fa <CHECK_USER_PASS+0x516>
	else if (__tmp > 65535)
    787c:	6b a1       	ldd	r22, Y+35	; 0x23
    787e:	7c a1       	ldd	r23, Y+36	; 0x24
    7880:	8d a1       	ldd	r24, Y+37	; 0x25
    7882:	9e a1       	ldd	r25, Y+38	; 0x26
    7884:	20 e0       	ldi	r18, 0x00	; 0
    7886:	3f ef       	ldi	r19, 0xFF	; 255
    7888:	4f e7       	ldi	r20, 0x7F	; 127
    788a:	57 e4       	ldi	r21, 0x47	; 71
    788c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7890:	18 16       	cp	r1, r24
    7892:	4c f5       	brge	.+82     	; 0x78e6 <CHECK_USER_PASS+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7894:	6f a1       	ldd	r22, Y+39	; 0x27
    7896:	78 a5       	ldd	r23, Y+40	; 0x28
    7898:	89 a5       	ldd	r24, Y+41	; 0x29
    789a:	9a a5       	ldd	r25, Y+42	; 0x2a
    789c:	20 e0       	ldi	r18, 0x00	; 0
    789e:	30 e0       	ldi	r19, 0x00	; 0
    78a0:	40 e2       	ldi	r20, 0x20	; 32
    78a2:	51 e4       	ldi	r21, 0x41	; 65
    78a4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    78a8:	dc 01       	movw	r26, r24
    78aa:	cb 01       	movw	r24, r22
    78ac:	bc 01       	movw	r22, r24
    78ae:	cd 01       	movw	r24, r26
    78b0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    78b4:	dc 01       	movw	r26, r24
    78b6:	cb 01       	movw	r24, r22
    78b8:	9a a3       	std	Y+34, r25	; 0x22
    78ba:	89 a3       	std	Y+33, r24	; 0x21
    78bc:	0f c0       	rjmp	.+30     	; 0x78dc <CHECK_USER_PASS+0x4f8>
    78be:	88 ec       	ldi	r24, 0xC8	; 200
    78c0:	90 e0       	ldi	r25, 0x00	; 0
    78c2:	98 a3       	std	Y+32, r25	; 0x20
    78c4:	8f 8f       	std	Y+31, r24	; 0x1f
    78c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    78c8:	98 a1       	ldd	r25, Y+32	; 0x20
    78ca:	01 97       	sbiw	r24, 0x01	; 1
    78cc:	f1 f7       	brne	.-4      	; 0x78ca <CHECK_USER_PASS+0x4e6>
    78ce:	98 a3       	std	Y+32, r25	; 0x20
    78d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78d2:	89 a1       	ldd	r24, Y+33	; 0x21
    78d4:	9a a1       	ldd	r25, Y+34	; 0x22
    78d6:	01 97       	sbiw	r24, 0x01	; 1
    78d8:	9a a3       	std	Y+34, r25	; 0x22
    78da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78dc:	89 a1       	ldd	r24, Y+33	; 0x21
    78de:	9a a1       	ldd	r25, Y+34	; 0x22
    78e0:	00 97       	sbiw	r24, 0x00	; 0
    78e2:	69 f7       	brne	.-38     	; 0x78be <CHECK_USER_PASS+0x4da>
    78e4:	14 c0       	rjmp	.+40     	; 0x790e <CHECK_USER_PASS+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78e6:	6b a1       	ldd	r22, Y+35	; 0x23
    78e8:	7c a1       	ldd	r23, Y+36	; 0x24
    78ea:	8d a1       	ldd	r24, Y+37	; 0x25
    78ec:	9e a1       	ldd	r25, Y+38	; 0x26
    78ee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    78f2:	dc 01       	movw	r26, r24
    78f4:	cb 01       	movw	r24, r22
    78f6:	9a a3       	std	Y+34, r25	; 0x22
    78f8:	89 a3       	std	Y+33, r24	; 0x21
    78fa:	89 a1       	ldd	r24, Y+33	; 0x21
    78fc:	9a a1       	ldd	r25, Y+34	; 0x22
    78fe:	9e 8f       	std	Y+30, r25	; 0x1e
    7900:	8d 8f       	std	Y+29, r24	; 0x1d
    7902:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7904:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7906:	01 97       	sbiw	r24, 0x01	; 1
    7908:	f1 f7       	brne	.-4      	; 0x7906 <CHECK_USER_PASS+0x522>
    790a:	9e 8f       	std	Y+30, r25	; 0x1e
    790c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_vClearScreen();
    790e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try:");
    7912:	89 ed       	ldi	r24, 0xD9	; 217
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSendData(x+'0');
    791a:	80 91 8b 02 	lds	r24, 0x028B
    791e:	80 5d       	subi	r24, 0xD0	; 208
    7920:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    7924:	80 e0       	ldi	r24, 0x00	; 0
    7926:	90 e0       	ldi	r25, 0x00	; 0
    7928:	aa e7       	ldi	r26, 0x7A	; 122
    792a:	b4 e4       	ldi	r27, 0x44	; 68
    792c:	89 8f       	std	Y+25, r24	; 0x19
    792e:	9a 8f       	std	Y+26, r25	; 0x1a
    7930:	ab 8f       	std	Y+27, r26	; 0x1b
    7932:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7934:	69 8d       	ldd	r22, Y+25	; 0x19
    7936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    793a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    793c:	20 e0       	ldi	r18, 0x00	; 0
    793e:	30 e0       	ldi	r19, 0x00	; 0
    7940:	4a ef       	ldi	r20, 0xFA	; 250
    7942:	54 e4       	ldi	r21, 0x44	; 68
    7944:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7948:	dc 01       	movw	r26, r24
    794a:	cb 01       	movw	r24, r22
    794c:	8d 8b       	std	Y+21, r24	; 0x15
    794e:	9e 8b       	std	Y+22, r25	; 0x16
    7950:	af 8b       	std	Y+23, r26	; 0x17
    7952:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7954:	6d 89       	ldd	r22, Y+21	; 0x15
    7956:	7e 89       	ldd	r23, Y+22	; 0x16
    7958:	8f 89       	ldd	r24, Y+23	; 0x17
    795a:	98 8d       	ldd	r25, Y+24	; 0x18
    795c:	20 e0       	ldi	r18, 0x00	; 0
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	40 e8       	ldi	r20, 0x80	; 128
    7962:	5f e3       	ldi	r21, 0x3F	; 63
    7964:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    7968:	88 23       	and	r24, r24
    796a:	2c f4       	brge	.+10     	; 0x7976 <CHECK_USER_PASS+0x592>
		__ticks = 1;
    796c:	81 e0       	ldi	r24, 0x01	; 1
    796e:	90 e0       	ldi	r25, 0x00	; 0
    7970:	9c 8b       	std	Y+20, r25	; 0x14
    7972:	8b 8b       	std	Y+19, r24	; 0x13
    7974:	3f c0       	rjmp	.+126    	; 0x79f4 <CHECK_USER_PASS+0x610>
	else if (__tmp > 65535)
    7976:	6d 89       	ldd	r22, Y+21	; 0x15
    7978:	7e 89       	ldd	r23, Y+22	; 0x16
    797a:	8f 89       	ldd	r24, Y+23	; 0x17
    797c:	98 8d       	ldd	r25, Y+24	; 0x18
    797e:	20 e0       	ldi	r18, 0x00	; 0
    7980:	3f ef       	ldi	r19, 0xFF	; 255
    7982:	4f e7       	ldi	r20, 0x7F	; 127
    7984:	57 e4       	ldi	r21, 0x47	; 71
    7986:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    798a:	18 16       	cp	r1, r24
    798c:	4c f5       	brge	.+82     	; 0x79e0 <CHECK_USER_PASS+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    798e:	69 8d       	ldd	r22, Y+25	; 0x19
    7990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7996:	20 e0       	ldi	r18, 0x00	; 0
    7998:	30 e0       	ldi	r19, 0x00	; 0
    799a:	40 e2       	ldi	r20, 0x20	; 32
    799c:	51 e4       	ldi	r21, 0x41	; 65
    799e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    79a2:	dc 01       	movw	r26, r24
    79a4:	cb 01       	movw	r24, r22
    79a6:	bc 01       	movw	r22, r24
    79a8:	cd 01       	movw	r24, r26
    79aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    79ae:	dc 01       	movw	r26, r24
    79b0:	cb 01       	movw	r24, r22
    79b2:	9c 8b       	std	Y+20, r25	; 0x14
    79b4:	8b 8b       	std	Y+19, r24	; 0x13
    79b6:	0f c0       	rjmp	.+30     	; 0x79d6 <CHECK_USER_PASS+0x5f2>
    79b8:	88 ec       	ldi	r24, 0xC8	; 200
    79ba:	90 e0       	ldi	r25, 0x00	; 0
    79bc:	9a 8b       	std	Y+18, r25	; 0x12
    79be:	89 8b       	std	Y+17, r24	; 0x11
    79c0:	89 89       	ldd	r24, Y+17	; 0x11
    79c2:	9a 89       	ldd	r25, Y+18	; 0x12
    79c4:	01 97       	sbiw	r24, 0x01	; 1
    79c6:	f1 f7       	brne	.-4      	; 0x79c4 <CHECK_USER_PASS+0x5e0>
    79c8:	9a 8b       	std	Y+18, r25	; 0x12
    79ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79cc:	8b 89       	ldd	r24, Y+19	; 0x13
    79ce:	9c 89       	ldd	r25, Y+20	; 0x14
    79d0:	01 97       	sbiw	r24, 0x01	; 1
    79d2:	9c 8b       	std	Y+20, r25	; 0x14
    79d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79d6:	8b 89       	ldd	r24, Y+19	; 0x13
    79d8:	9c 89       	ldd	r25, Y+20	; 0x14
    79da:	00 97       	sbiw	r24, 0x00	; 0
    79dc:	69 f7       	brne	.-38     	; 0x79b8 <CHECK_USER_PASS+0x5d4>
    79de:	14 c0       	rjmp	.+40     	; 0x7a08 <CHECK_USER_PASS+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79e0:	6d 89       	ldd	r22, Y+21	; 0x15
    79e2:	7e 89       	ldd	r23, Y+22	; 0x16
    79e4:	8f 89       	ldd	r24, Y+23	; 0x17
    79e6:	98 8d       	ldd	r25, Y+24	; 0x18
    79e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    79ec:	dc 01       	movw	r26, r24
    79ee:	cb 01       	movw	r24, r22
    79f0:	9c 8b       	std	Y+20, r25	; 0x14
    79f2:	8b 8b       	std	Y+19, r24	; 0x13
    79f4:	8b 89       	ldd	r24, Y+19	; 0x13
    79f6:	9c 89       	ldd	r25, Y+20	; 0x14
    79f8:	98 8b       	std	Y+16, r25	; 0x10
    79fa:	8f 87       	std	Y+15, r24	; 0x0f
    79fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    79fe:	98 89       	ldd	r25, Y+16	; 0x10
    7a00:	01 97       	sbiw	r24, 0x01	; 1
    7a02:	f1 f7       	brne	.-4      	; 0x7a00 <CHECK_USER_PASS+0x61c>
    7a04:	98 8b       	std	Y+16, r25	; 0x10
    7a06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_vClearScreen();
    7a08:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	LCD_vSendString("try password");
    7a0c:	87 ef       	ldi	r24, 0xF7	; 247
    7a0e:	90 e0       	ldi	r25, 0x00	; 0
    7a10:	0e 94 bf 20 	call	0x417e	; 0x417e <LCD_vSendString>
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
    7a14:	82 e0       	ldi	r24, 0x02	; 2
    7a16:	61 e0       	ldi	r22, 0x01	; 1
    7a18:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    7a1c:	fe 01       	movw	r30, r28
    7a1e:	ea 5a       	subi	r30, 0xAA	; 170
    7a20:	ff 4f       	sbci	r31, 0xFF	; 255
    7a22:	80 e1       	ldi	r24, 0x10	; 16
    7a24:	80 83       	st	Z, r24
    7a26:	fe 01       	movw	r30, r28
    7a28:	eb 5a       	subi	r30, 0xAB	; 171
    7a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    7a2c:	10 82       	st	Z, r1
    7a2e:	ac c0       	rjmp	.+344    	; 0x7b88 <CHECK_USER_PASS+0x7a4>
	{
#if code == BT
		do{
			USART_u8ReceiveData(&corsal);
    7a30:	80 e8       	ldi	r24, 0x80	; 128
    7a32:	92 e0       	ldi	r25, 0x02	; 2
    7a34:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <USART_u8ReceiveData>
		}while(corsal == NOTPRESSED);
    7a38:	80 91 80 02 	lds	r24, 0x0280
    7a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    7a3e:	c1 f3       	breq	.-16     	; 0x7a30 <CHECK_USER_PASS+0x64c>
#else
		do{
			corsal = KPD_u8GetPressed();
		}while(corsal == NOTPRESSED);
#endif
		LCD_vSendData(corsal);
    7a40:	80 91 80 02 	lds	r24, 0x0280
    7a44:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
    7a48:	80 e0       	ldi	r24, 0x00	; 0
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	aa e7       	ldi	r26, 0x7A	; 122
    7a4e:	b3 e4       	ldi	r27, 0x43	; 67
    7a50:	8b 87       	std	Y+11, r24	; 0x0b
    7a52:	9c 87       	std	Y+12, r25	; 0x0c
    7a54:	ad 87       	std	Y+13, r26	; 0x0d
    7a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a60:	20 e0       	ldi	r18, 0x00	; 0
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	4a ef       	ldi	r20, 0xFA	; 250
    7a66:	54 e4       	ldi	r21, 0x44	; 68
    7a68:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7a6c:	dc 01       	movw	r26, r24
    7a6e:	cb 01       	movw	r24, r22
    7a70:	8f 83       	std	Y+7, r24	; 0x07
    7a72:	98 87       	std	Y+8, r25	; 0x08
    7a74:	a9 87       	std	Y+9, r26	; 0x09
    7a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7a78:	6f 81       	ldd	r22, Y+7	; 0x07
    7a7a:	78 85       	ldd	r23, Y+8	; 0x08
    7a7c:	89 85       	ldd	r24, Y+9	; 0x09
    7a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a80:	20 e0       	ldi	r18, 0x00	; 0
    7a82:	30 e0       	ldi	r19, 0x00	; 0
    7a84:	40 e8       	ldi	r20, 0x80	; 128
    7a86:	5f e3       	ldi	r21, 0x3F	; 63
    7a88:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    7a8c:	88 23       	and	r24, r24
    7a8e:	2c f4       	brge	.+10     	; 0x7a9a <CHECK_USER_PASS+0x6b6>
		__ticks = 1;
    7a90:	81 e0       	ldi	r24, 0x01	; 1
    7a92:	90 e0       	ldi	r25, 0x00	; 0
    7a94:	9e 83       	std	Y+6, r25	; 0x06
    7a96:	8d 83       	std	Y+5, r24	; 0x05
    7a98:	3f c0       	rjmp	.+126    	; 0x7b18 <CHECK_USER_PASS+0x734>
	else if (__tmp > 65535)
    7a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    7a9c:	78 85       	ldd	r23, Y+8	; 0x08
    7a9e:	89 85       	ldd	r24, Y+9	; 0x09
    7aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    7aa2:	20 e0       	ldi	r18, 0x00	; 0
    7aa4:	3f ef       	ldi	r19, 0xFF	; 255
    7aa6:	4f e7       	ldi	r20, 0x7F	; 127
    7aa8:	57 e4       	ldi	r21, 0x47	; 71
    7aaa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7aae:	18 16       	cp	r1, r24
    7ab0:	4c f5       	brge	.+82     	; 0x7b04 <CHECK_USER_PASS+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    7ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    7ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    7aba:	20 e0       	ldi	r18, 0x00	; 0
    7abc:	30 e0       	ldi	r19, 0x00	; 0
    7abe:	40 e2       	ldi	r20, 0x20	; 32
    7ac0:	51 e4       	ldi	r21, 0x41	; 65
    7ac2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7ac6:	dc 01       	movw	r26, r24
    7ac8:	cb 01       	movw	r24, r22
    7aca:	bc 01       	movw	r22, r24
    7acc:	cd 01       	movw	r24, r26
    7ace:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7ad2:	dc 01       	movw	r26, r24
    7ad4:	cb 01       	movw	r24, r22
    7ad6:	9e 83       	std	Y+6, r25	; 0x06
    7ad8:	8d 83       	std	Y+5, r24	; 0x05
    7ada:	0f c0       	rjmp	.+30     	; 0x7afa <CHECK_USER_PASS+0x716>
    7adc:	88 ec       	ldi	r24, 0xC8	; 200
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	9c 83       	std	Y+4, r25	; 0x04
    7ae2:	8b 83       	std	Y+3, r24	; 0x03
    7ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    7ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    7ae8:	01 97       	sbiw	r24, 0x01	; 1
    7aea:	f1 f7       	brne	.-4      	; 0x7ae8 <CHECK_USER_PASS+0x704>
    7aec:	9c 83       	std	Y+4, r25	; 0x04
    7aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7af0:	8d 81       	ldd	r24, Y+5	; 0x05
    7af2:	9e 81       	ldd	r25, Y+6	; 0x06
    7af4:	01 97       	sbiw	r24, 0x01	; 1
    7af6:	9e 83       	std	Y+6, r25	; 0x06
    7af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7afa:	8d 81       	ldd	r24, Y+5	; 0x05
    7afc:	9e 81       	ldd	r25, Y+6	; 0x06
    7afe:	00 97       	sbiw	r24, 0x00	; 0
    7b00:	69 f7       	brne	.-38     	; 0x7adc <CHECK_USER_PASS+0x6f8>
    7b02:	14 c0       	rjmp	.+40     	; 0x7b2c <CHECK_USER_PASS+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b04:	6f 81       	ldd	r22, Y+7	; 0x07
    7b06:	78 85       	ldd	r23, Y+8	; 0x08
    7b08:	89 85       	ldd	r24, Y+9	; 0x09
    7b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b0c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7b10:	dc 01       	movw	r26, r24
    7b12:	cb 01       	movw	r24, r22
    7b14:	9e 83       	std	Y+6, r25	; 0x06
    7b16:	8d 83       	std	Y+5, r24	; 0x05
    7b18:	8d 81       	ldd	r24, Y+5	; 0x05
    7b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    7b1c:	9a 83       	std	Y+2, r25	; 0x02
    7b1e:	89 83       	std	Y+1, r24	; 0x01
    7b20:	89 81       	ldd	r24, Y+1	; 0x01
    7b22:	9a 81       	ldd	r25, Y+2	; 0x02
    7b24:	01 97       	sbiw	r24, 0x01	; 1
    7b26:	f1 f7       	brne	.-4      	; 0x7b24 <CHECK_USER_PASS+0x740>
    7b28:	9a 83       	std	Y+2, r25	; 0x02
    7b2a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_vSetPosition(LCD_ROW_2,j+1);
    7b2c:	fe 01       	movw	r30, r28
    7b2e:	eb 5a       	subi	r30, 0xAB	; 171
    7b30:	ff 4f       	sbci	r31, 0xFF	; 255
    7b32:	80 81       	ld	r24, Z
    7b34:	98 2f       	mov	r25, r24
    7b36:	9f 5f       	subi	r25, 0xFF	; 255
    7b38:	82 e0       	ldi	r24, 0x02	; 2
    7b3a:	69 2f       	mov	r22, r25
    7b3c:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <LCD_vSetPosition>
		LCD_vSendData('*');
    7b40:	8a e2       	ldi	r24, 0x2A	; 42
    7b42:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_vSendData>
		pass[j] = corsal;
    7b46:	fe 01       	movw	r30, r28
    7b48:	eb 5a       	subi	r30, 0xAB	; 171
    7b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    7b4c:	80 81       	ld	r24, Z
    7b4e:	88 2f       	mov	r24, r24
    7b50:	90 e0       	ldi	r25, 0x00	; 0
    7b52:	20 91 80 02 	lds	r18, 0x0280
    7b56:	fc 01       	movw	r30, r24
    7b58:	ee 53       	subi	r30, 0x3E	; 62
    7b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    7b5c:	20 83       	st	Z, r18
		corsal = 0xff;
    7b5e:	8f ef       	ldi	r24, 0xFF	; 255
    7b60:	80 93 80 02 	sts	0x0280, r24
	LCD_vSendData(x+'0');
	_delay_ms(1000);
	LCD_vClearScreen();
	LCD_vSendString("try password");
	LCD_vSetPosition(LCD_ROW_2,LCD_COL_1);
	for (u8 i=16 ,j=0; i<20,j<4 ; i++,j++)
    7b64:	de 01       	movw	r26, r28
    7b66:	aa 5a       	subi	r26, 0xAA	; 170
    7b68:	bf 4f       	sbci	r27, 0xFF	; 255
    7b6a:	fe 01       	movw	r30, r28
    7b6c:	ea 5a       	subi	r30, 0xAA	; 170
    7b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    7b70:	80 81       	ld	r24, Z
    7b72:	8f 5f       	subi	r24, 0xFF	; 255
    7b74:	8c 93       	st	X, r24
    7b76:	de 01       	movw	r26, r28
    7b78:	ab 5a       	subi	r26, 0xAB	; 171
    7b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    7b7c:	fe 01       	movw	r30, r28
    7b7e:	eb 5a       	subi	r30, 0xAB	; 171
    7b80:	ff 4f       	sbci	r31, 0xFF	; 255
    7b82:	80 81       	ld	r24, Z
    7b84:	8f 5f       	subi	r24, 0xFF	; 255
    7b86:	8c 93       	st	X, r24
    7b88:	fe 01       	movw	r30, r28
    7b8a:	eb 5a       	subi	r30, 0xAB	; 171
    7b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    7b8e:	80 81       	ld	r24, Z
    7b90:	84 30       	cpi	r24, 0x04	; 4
    7b92:	08 f4       	brcc	.+2      	; 0x7b96 <CHECK_USER_PASS+0x7b2>
    7b94:	4d cf       	rjmp	.-358    	; 0x7a30 <CHECK_USER_PASS+0x64c>
		LCD_vSendData('*');
		pass[j] = corsal;
		corsal = 0xff;

	}
	x--;
    7b96:	80 91 8b 02 	lds	r24, 0x028B
    7b9a:	81 50       	subi	r24, 0x01	; 1
    7b9c:	80 93 8b 02 	sts	0x028B, r24
	LCD_vClearScreen();
    7ba0:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <LCD_vClearScreen>
	corsal = 0xff;
    7ba4:	8f ef       	ldi	r24, 0xFF	; 255
    7ba6:	80 93 80 02 	sts	0x0280, r24

}
    7baa:	c9 5a       	subi	r28, 0xA9	; 169
    7bac:	df 4f       	sbci	r29, 0xFF	; 255
    7bae:	0f b6       	in	r0, 0x3f	; 63
    7bb0:	f8 94       	cli
    7bb2:	de bf       	out	0x3e, r29	; 62
    7bb4:	0f be       	out	0x3f, r0	; 63
    7bb6:	cd bf       	out	0x3d, r28	; 61
    7bb8:	cf 91       	pop	r28
    7bba:	df 91       	pop	r29
    7bbc:	1f 91       	pop	r17
    7bbe:	0f 91       	pop	r16
    7bc0:	08 95       	ret

00007bc2 <__mulsi3>:
    7bc2:	62 9f       	mul	r22, r18
    7bc4:	d0 01       	movw	r26, r0
    7bc6:	73 9f       	mul	r23, r19
    7bc8:	f0 01       	movw	r30, r0
    7bca:	82 9f       	mul	r24, r18
    7bcc:	e0 0d       	add	r30, r0
    7bce:	f1 1d       	adc	r31, r1
    7bd0:	64 9f       	mul	r22, r20
    7bd2:	e0 0d       	add	r30, r0
    7bd4:	f1 1d       	adc	r31, r1
    7bd6:	92 9f       	mul	r25, r18
    7bd8:	f0 0d       	add	r31, r0
    7bda:	83 9f       	mul	r24, r19
    7bdc:	f0 0d       	add	r31, r0
    7bde:	74 9f       	mul	r23, r20
    7be0:	f0 0d       	add	r31, r0
    7be2:	65 9f       	mul	r22, r21
    7be4:	f0 0d       	add	r31, r0
    7be6:	99 27       	eor	r25, r25
    7be8:	72 9f       	mul	r23, r18
    7bea:	b0 0d       	add	r27, r0
    7bec:	e1 1d       	adc	r30, r1
    7bee:	f9 1f       	adc	r31, r25
    7bf0:	63 9f       	mul	r22, r19
    7bf2:	b0 0d       	add	r27, r0
    7bf4:	e1 1d       	adc	r30, r1
    7bf6:	f9 1f       	adc	r31, r25
    7bf8:	bd 01       	movw	r22, r26
    7bfa:	cf 01       	movw	r24, r30
    7bfc:	11 24       	eor	r1, r1
    7bfe:	08 95       	ret

00007c00 <__udivmodsi4>:
    7c00:	a1 e2       	ldi	r26, 0x21	; 33
    7c02:	1a 2e       	mov	r1, r26
    7c04:	aa 1b       	sub	r26, r26
    7c06:	bb 1b       	sub	r27, r27
    7c08:	fd 01       	movw	r30, r26
    7c0a:	0d c0       	rjmp	.+26     	; 0x7c26 <__udivmodsi4_ep>

00007c0c <__udivmodsi4_loop>:
    7c0c:	aa 1f       	adc	r26, r26
    7c0e:	bb 1f       	adc	r27, r27
    7c10:	ee 1f       	adc	r30, r30
    7c12:	ff 1f       	adc	r31, r31
    7c14:	a2 17       	cp	r26, r18
    7c16:	b3 07       	cpc	r27, r19
    7c18:	e4 07       	cpc	r30, r20
    7c1a:	f5 07       	cpc	r31, r21
    7c1c:	20 f0       	brcs	.+8      	; 0x7c26 <__udivmodsi4_ep>
    7c1e:	a2 1b       	sub	r26, r18
    7c20:	b3 0b       	sbc	r27, r19
    7c22:	e4 0b       	sbc	r30, r20
    7c24:	f5 0b       	sbc	r31, r21

00007c26 <__udivmodsi4_ep>:
    7c26:	66 1f       	adc	r22, r22
    7c28:	77 1f       	adc	r23, r23
    7c2a:	88 1f       	adc	r24, r24
    7c2c:	99 1f       	adc	r25, r25
    7c2e:	1a 94       	dec	r1
    7c30:	69 f7       	brne	.-38     	; 0x7c0c <__udivmodsi4_loop>
    7c32:	60 95       	com	r22
    7c34:	70 95       	com	r23
    7c36:	80 95       	com	r24
    7c38:	90 95       	com	r25
    7c3a:	9b 01       	movw	r18, r22
    7c3c:	ac 01       	movw	r20, r24
    7c3e:	bd 01       	movw	r22, r26
    7c40:	cf 01       	movw	r24, r30
    7c42:	08 95       	ret

00007c44 <__prologue_saves__>:
    7c44:	2f 92       	push	r2
    7c46:	3f 92       	push	r3
    7c48:	4f 92       	push	r4
    7c4a:	5f 92       	push	r5
    7c4c:	6f 92       	push	r6
    7c4e:	7f 92       	push	r7
    7c50:	8f 92       	push	r8
    7c52:	9f 92       	push	r9
    7c54:	af 92       	push	r10
    7c56:	bf 92       	push	r11
    7c58:	cf 92       	push	r12
    7c5a:	df 92       	push	r13
    7c5c:	ef 92       	push	r14
    7c5e:	ff 92       	push	r15
    7c60:	0f 93       	push	r16
    7c62:	1f 93       	push	r17
    7c64:	cf 93       	push	r28
    7c66:	df 93       	push	r29
    7c68:	cd b7       	in	r28, 0x3d	; 61
    7c6a:	de b7       	in	r29, 0x3e	; 62
    7c6c:	ca 1b       	sub	r28, r26
    7c6e:	db 0b       	sbc	r29, r27
    7c70:	0f b6       	in	r0, 0x3f	; 63
    7c72:	f8 94       	cli
    7c74:	de bf       	out	0x3e, r29	; 62
    7c76:	0f be       	out	0x3f, r0	; 63
    7c78:	cd bf       	out	0x3d, r28	; 61
    7c7a:	09 94       	ijmp

00007c7c <__epilogue_restores__>:
    7c7c:	2a 88       	ldd	r2, Y+18	; 0x12
    7c7e:	39 88       	ldd	r3, Y+17	; 0x11
    7c80:	48 88       	ldd	r4, Y+16	; 0x10
    7c82:	5f 84       	ldd	r5, Y+15	; 0x0f
    7c84:	6e 84       	ldd	r6, Y+14	; 0x0e
    7c86:	7d 84       	ldd	r7, Y+13	; 0x0d
    7c88:	8c 84       	ldd	r8, Y+12	; 0x0c
    7c8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    7c8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    7c8e:	b9 84       	ldd	r11, Y+9	; 0x09
    7c90:	c8 84       	ldd	r12, Y+8	; 0x08
    7c92:	df 80       	ldd	r13, Y+7	; 0x07
    7c94:	ee 80       	ldd	r14, Y+6	; 0x06
    7c96:	fd 80       	ldd	r15, Y+5	; 0x05
    7c98:	0c 81       	ldd	r16, Y+4	; 0x04
    7c9a:	1b 81       	ldd	r17, Y+3	; 0x03
    7c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    7c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    7ca0:	ce 0f       	add	r28, r30
    7ca2:	d1 1d       	adc	r29, r1
    7ca4:	0f b6       	in	r0, 0x3f	; 63
    7ca6:	f8 94       	cli
    7ca8:	de bf       	out	0x3e, r29	; 62
    7caa:	0f be       	out	0x3f, r0	; 63
    7cac:	cd bf       	out	0x3d, r28	; 61
    7cae:	ed 01       	movw	r28, r26
    7cb0:	08 95       	ret

00007cb2 <_exit>:
    7cb2:	f8 94       	cli

00007cb4 <__stop_program>:
    7cb4:	ff cf       	rjmp	.-2      	; 0x7cb4 <__stop_program>
