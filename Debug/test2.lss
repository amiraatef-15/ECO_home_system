
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000535a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  0000535a  000053ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001a4  008001a4  00005532  2**0
                  ALLOC
  3 .stab         00005484  00000000  00000000  00005534  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002327  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  0000ceff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  0000d176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  0000fac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000126f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00012930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  00012c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001388b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <main>
      8a:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	ad e6       	ldi	r26, 0x6D	; 109
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	8d e6       	ldi	r24, 0x6D	; 109
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	6d e6       	ldi	r22, 0x6D	; 109
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 f8 26 	jmp	0x4df0	; 0x4df0 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	eb 58       	subi	r30, 0x8B	; 139
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <BUZ_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03

	DIO_enumSetPinDirection(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	69 2f       	mov	r22, r25
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <BUZ_vOn+0x6>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	69 83       	std	Y+1, r22	; 0x01
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	39 f4       	brne	.+14     	; 0x1270 <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	69 2f       	mov	r22, r25
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 23       	and	r24, r24
    1274:	31 f4       	brne	.+12     	; 0x1282 <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	69 2f       	mov	r22, r25
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
  }
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <BUZ_vOff>:
* Parameters :
              => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <BUZ_vOff+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	69 83       	std	Y+1, r22	; 0x01
    129c:	7a 83       	std	Y+2, r23	; 0x02
    129e:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	39 f4       	brne	.+14     	; 0x12b4 <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	69 2f       	mov	r22, r25
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 23       	and	r24, r24
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	69 2f       	mov	r22, r25
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
  }
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <BUZ_vTog+0x6>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	69 83       	std	Y+1, r22	; 0x01
    12e0:	7a 83       	std	Y+2, r23	; 0x02
    12e2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	69 2f       	mov	r22, r25
    12ea:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <DIO_enumTogglePinValue>
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CLCD_voidInit>:
#include "CLCD_config.h"
#include "CLCD_intreface.h"
#include "CLCD_private.h"
#include "CLCD_extrachar.h"

void CLCD_voidInit(void) {
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	c4 55       	subi	r28, 0x54	; 84
    1308:	d0 40       	sbci	r29, 0x00	; 0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	fe 01       	movw	r30, r28
    1316:	ef 5a       	subi	r30, 0xAF	; 175
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a8 e4       	ldi	r26, 0x48	; 72
    1320:	b2 e4       	ldi	r27, 0x42	; 66
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	a2 83       	std	Z+2, r26	; 0x02
    1328:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132a:	8e 01       	movw	r16, r28
    132c:	03 5b       	subi	r16, 0xB3	; 179
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	ef 5a       	subi	r30, 0xAF	; 175
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1358:	fe 01       	movw	r30, r28
    135a:	e3 5b       	subi	r30, 0xB3	; 179
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	44 f4       	brge	.+16     	; 0x1386 <CLCD_voidInit+0x8c>
		__ticks = 1;
    1376:	fe 01       	movw	r30, r28
    1378:	e5 5b       	subi	r30, 0xB5	; 181
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	64 c0       	rjmp	.+200    	; 0x144e <CLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1386:	fe 01       	movw	r30, r28
    1388:	e3 5b       	subi	r30, 0xB3	; 179
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <CLCD_voidInit+0xac>
    13a4:	43 c0       	rjmp	.+134    	; 0x142c <CLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	fe 01       	movw	r30, r28
    13a8:	ef 5a       	subi	r30, 0xAF	; 175
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8e 01       	movw	r16, r28
    13c6:	05 5b       	subi	r16, 0xB5	; 181
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	f8 01       	movw	r30, r16
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <CLCD_voidInit+0x122>
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 5b       	subi	r30, 0xB7	; 183
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	88 ec       	ldi	r24, 0xC8	; 200
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ec:	fe 01       	movw	r30, r28
    13ee:	e7 5b       	subi	r30, 0xB7	; 183
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <CLCD_voidInit+0xfc>
    13fa:	fe 01       	movw	r30, r28
    13fc:	e7 5b       	subi	r30, 0xB7	; 183
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	de 01       	movw	r26, r28
    1406:	a5 5b       	subi	r26, 0xB5	; 181
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	fe 01       	movw	r30, r28
    140c:	e5 5b       	subi	r30, 0xB5	; 181
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141c:	fe 01       	movw	r30, r28
    141e:	e5 5b       	subi	r30, 0xB5	; 181
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	d1 f6       	brne	.-76     	; 0x13de <CLCD_voidInit+0xe4>
    142a:	27 c0       	rjmp	.+78     	; 0x147a <CLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	8e 01       	movw	r16, r28
    142e:	05 5b       	subi	r16, 0xB5	; 181
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	fe 01       	movw	r30, r28
    1434:	e3 5b       	subi	r30, 0xB3	; 179
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	f8 01       	movw	r30, r16
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	de 01       	movw	r26, r28
    1450:	a9 5b       	subi	r26, 0xB9	; 185
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	fe 01       	movw	r30, r28
    1456:	e5 5b       	subi	r30, 0xB5	; 181
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	8d 93       	st	X+, r24
    1460:	9c 93       	st	X, r25
    1462:	fe 01       	movw	r30, r28
    1464:	e9 5b       	subi	r30, 0xB9	; 185
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <CLCD_voidInit+0x172>
    1470:	fe 01       	movw	r30, r28
    1472:	e9 5b       	subi	r30, 0xB9	; 185
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
#else
#error "Wrong CLCD_DATA_NIBBLE Config"
#endif

    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
    DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	67 e0       	ldi	r22, 0x07	; 7
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>

    CLCD_voidsendCommand(lcd_Home);
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    14c6:	fe 01       	movw	r30, r28
    14c8:	ed 5b       	subi	r30, 0xBD	; 189
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e2       	ldi	r26, 0x20	; 32
    14d2:	b1 e4       	ldi	r27, 0x41	; 65
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	8e 01       	movw	r16, r28
    14de:	01 5c       	subi	r16, 0xC1	; 193
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	fe 01       	movw	r30, r28
    14e4:	ed 5b       	subi	r30, 0xBD	; 189
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a ef       	ldi	r20, 0xFA	; 250
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150a:	fe 01       	movw	r30, r28
    150c:	ff 96       	adiw	r30, 0x3f	; 63
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <CLCD_voidInit+0x236>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9e af       	std	Y+62, r25	; 0x3e
    152c:	8d af       	std	Y+61, r24	; 0x3d
    152e:	46 c0       	rjmp	.+140    	; 0x15bc <CLCD_voidInit+0x2c2>
	else if (__tmp > 65535)
    1530:	fe 01       	movw	r30, r28
    1532:	ff 96       	adiw	r30, 0x3f	; 63
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	64 f5       	brge	.+88     	; 0x15a4 <CLCD_voidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	fe 01       	movw	r30, r28
    154e:	ed 5b       	subi	r30, 0xBD	; 189
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e af       	std	Y+62, r25	; 0x3e
    1578:	8d af       	std	Y+61, r24	; 0x3d
    157a:	0f c0       	rjmp	.+30     	; 0x159a <CLCD_voidInit+0x2a0>
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c af       	std	Y+60, r25	; 0x3c
    1582:	8b af       	std	Y+59, r24	; 0x3b
    1584:	8b ad       	ldd	r24, Y+59	; 0x3b
    1586:	9c ad       	ldd	r25, Y+60	; 0x3c
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <CLCD_voidInit+0x28e>
    158c:	9c af       	std	Y+60, r25	; 0x3c
    158e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d ad       	ldd	r24, Y+61	; 0x3d
    1592:	9e ad       	ldd	r25, Y+62	; 0x3e
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e af       	std	Y+62, r25	; 0x3e
    1598:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d ad       	ldd	r24, Y+61	; 0x3d
    159c:	9e ad       	ldd	r25, Y+62	; 0x3e
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <CLCD_voidInit+0x282>
    15a2:	16 c0       	rjmp	.+44     	; 0x15d0 <CLCD_voidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	fe 01       	movw	r30, r28
    15a6:	ff 96       	adiw	r30, 0x3f	; 63
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e af       	std	Y+62, r25	; 0x3e
    15ba:	8d af       	std	Y+61, r24	; 0x3d
    15bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15be:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c0:	9a af       	std	Y+58, r25	; 0x3a
    15c2:	89 af       	std	Y+57, r24	; 0x39
    15c4:	89 ad       	ldd	r24, Y+57	; 0x39
    15c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <CLCD_voidInit+0x2ce>
    15cc:	9a af       	std	Y+58, r25	; 0x3a
    15ce:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(10);

    CLCD_voidsendCommand(4);
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e4       	ldi	r27, 0x40	; 64
    15de:	8d ab       	std	Y+53, r24	; 0x35
    15e0:	9e ab       	std	Y+54, r25	; 0x36
    15e2:	af ab       	std	Y+55, r26	; 0x37
    15e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6d a9       	ldd	r22, Y+53	; 0x35
    15e8:	7e a9       	ldd	r23, Y+54	; 0x36
    15ea:	8f a9       	ldd	r24, Y+55	; 0x37
    15ec:	98 ad       	ldd	r25, Y+56	; 0x38
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	89 ab       	std	Y+49, r24	; 0x31
    1600:	9a ab       	std	Y+50, r25	; 0x32
    1602:	ab ab       	std	Y+51, r26	; 0x33
    1604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1606:	69 a9       	ldd	r22, Y+49	; 0x31
    1608:	7a a9       	ldd	r23, Y+50	; 0x32
    160a:	8b a9       	ldd	r24, Y+51	; 0x33
    160c:	9c a9       	ldd	r25, Y+52	; 0x34
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <CLCD_voidInit+0x32e>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	98 ab       	std	Y+48, r25	; 0x30
    1624:	8f a7       	std	Y+47, r24	; 0x2f
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <CLCD_voidInit+0x3ac>
	else if (__tmp > 65535)
    1628:	69 a9       	ldd	r22, Y+49	; 0x31
    162a:	7a a9       	ldd	r23, Y+50	; 0x32
    162c:	8b a9       	ldd	r24, Y+51	; 0x33
    162e:	9c a9       	ldd	r25, Y+52	; 0x34
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <CLCD_voidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6d a9       	ldd	r22, Y+53	; 0x35
    1642:	7e a9       	ldd	r23, Y+54	; 0x36
    1644:	8f a9       	ldd	r24, Y+55	; 0x37
    1646:	98 ad       	ldd	r25, Y+56	; 0x38
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	98 ab       	std	Y+48, r25	; 0x30
    1666:	8f a7       	std	Y+47, r24	; 0x2f
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <CLCD_voidInit+0x38e>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e a7       	std	Y+46, r25	; 0x2e
    1670:	8d a7       	std	Y+45, r24	; 0x2d
    1672:	8d a5       	ldd	r24, Y+45	; 0x2d
    1674:	9e a5       	ldd	r25, Y+46	; 0x2e
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <CLCD_voidInit+0x37c>
    167a:	9e a7       	std	Y+46, r25	; 0x2e
    167c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1680:	98 a9       	ldd	r25, Y+48	; 0x30
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	98 ab       	std	Y+48, r25	; 0x30
    1686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8f a5       	ldd	r24, Y+47	; 0x2f
    168a:	98 a9       	ldd	r25, Y+48	; 0x30
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <CLCD_voidInit+0x370>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <CLCD_voidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	69 a9       	ldd	r22, Y+49	; 0x31
    1694:	7a a9       	ldd	r23, Y+50	; 0x32
    1696:	8b a9       	ldd	r24, Y+51	; 0x33
    1698:	9c a9       	ldd	r25, Y+52	; 0x34
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	98 ab       	std	Y+48, r25	; 0x30
    16a4:	8f a7       	std	Y+47, r24	; 0x2f
    16a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a8:	98 a9       	ldd	r25, Y+48	; 0x30
    16aa:	9c a7       	std	Y+44, r25	; 0x2c
    16ac:	8b a7       	std	Y+43, r24	; 0x2b
    16ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <CLCD_voidInit+0x3b8>
    16b6:	9c a7       	std	Y+44, r25	; 0x2c
    16b8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);

    CLCD_voidsendCommand(CLCD_DISPLAY_CURSOR);
    16ba:	8e e0       	ldi	r24, 0x0E	; 14
    16bc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e4       	ldi	r27, 0x40	; 64
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <CLCD_voidInit+0x418>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <CLCD_voidInit+0x496>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <CLCD_voidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <CLCD_voidInit+0x478>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <CLCD_voidInit+0x466>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <CLCD_voidInit+0x45a>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <CLCD_voidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <CLCD_voidInit+0x4a2>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);

    CLCD_voidClearScreen();
    17a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e4       	ldi	r27, 0x40	; 64
    17b0:	89 8f       	std	Y+25, r24	; 0x19
    17b2:	9a 8f       	std	Y+26, r25	; 0x1a
    17b4:	ab 8f       	std	Y+27, r26	; 0x1b
    17b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8d 8b       	std	Y+21, r24	; 0x15
    17d2:	9e 8b       	std	Y+22, r25	; 0x16
    17d4:	af 8b       	std	Y+23, r26	; 0x17
    17d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d8:	6d 89       	ldd	r22, Y+21	; 0x15
    17da:	7e 89       	ldd	r23, Y+22	; 0x16
    17dc:	8f 89       	ldd	r24, Y+23	; 0x17
    17de:	98 8d       	ldd	r25, Y+24	; 0x18
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <CLCD_voidInit+0x500>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <CLCD_voidInit+0x57e>
	else if (__tmp > 65535)
    17fa:	6d 89       	ldd	r22, Y+21	; 0x15
    17fc:	7e 89       	ldd	r23, Y+22	; 0x16
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <CLCD_voidInit+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	69 8d       	ldd	r22, Y+25	; 0x19
    1814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	0f c0       	rjmp	.+30     	; 0x185a <CLCD_voidInit+0x560>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9a 8b       	std	Y+18, r25	; 0x12
    1842:	89 8b       	std	Y+17, r24	; 0x11
    1844:	89 89       	ldd	r24, Y+17	; 0x11
    1846:	9a 89       	ldd	r25, Y+18	; 0x12
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <CLCD_voidInit+0x54e>
    184c:	9a 8b       	std	Y+18, r25	; 0x12
    184e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	8b 89       	ldd	r24, Y+19	; 0x13
    1852:	9c 89       	ldd	r25, Y+20	; 0x14
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	8b 89       	ldd	r24, Y+19	; 0x13
    185c:	9c 89       	ldd	r25, Y+20	; 0x14
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <CLCD_voidInit+0x542>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <CLCD_voidInit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	8b 89       	ldd	r24, Y+19	; 0x13
    187a:	9c 89       	ldd	r25, Y+20	; 0x14
    187c:	98 8b       	std	Y+16, r25	; 0x10
    187e:	8f 87       	std	Y+15, r24	; 0x0f
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	98 89       	ldd	r25, Y+16	; 0x10
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <CLCD_voidInit+0x58a>
    1888:	98 8b       	std	Y+16, r25	; 0x10
    188a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    CLCD_voidsendCommand(lcd_EntryMode);
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e4       	ldi	r27, 0x40	; 64
    189a:	8b 87       	std	Y+11, r24	; 0x0b
    189c:	9c 87       	std	Y+12, r25	; 0x0c
    189e:	ad 87       	std	Y+13, r26	; 0x0d
    18a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8f 83       	std	Y+7, r24	; 0x07
    18bc:	98 87       	std	Y+8, r25	; 0x08
    18be:	a9 87       	std	Y+9, r26	; 0x09
    18c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <CLCD_voidInit+0x5ea>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <CLCD_voidInit+0x668>
	else if (__tmp > 65535)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <CLCD_voidInit+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <CLCD_voidInit+0x64a>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <CLCD_voidInit+0x638>
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <CLCD_voidInit+0x62c>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <CLCD_voidInit+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <CLCD_voidInit+0x674>
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
#else
#error "Wrong CLCD_MODE config"
#endif
}
    1976:	cc 5a       	subi	r28, 0xAC	; 172
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <CLCD_voidsendData>:

void CLCD_voidsendData(u8 copy_u8D1ata) {
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	2f 97       	sbiw	r28, 0x0f	; 15
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_enumWritePortValue(CLCD_DATA_PORT, copy_u8D1ata);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    CLCD_voidSendFallingEdge();
#elif CLCD_MODE == 4
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    DIO_vWriteHighNibble(CLCD_DATA_PORT, (copy_u8D1ata >> 4));
    CLCD_voidSendFallingEdge();
    DIO_vWriteHighNibble(CLCD_DATA_PORT, copy_u8D1ata);
    CLCD_voidSendFallingEdge();
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_vWriteLowNibble(CLCD_DATA_PORT, (copy_u8D1ata >> 4));
    19b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ba:	98 2f       	mov	r25, r24
    19bc:	92 95       	swap	r25
    19be:	9f 70       	andi	r25, 0x0F	; 15
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	69 2f       	mov	r22, r25
    19c4:	0e 94 47 21 	call	0x428e	; 0x428e <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    19c8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    DIO_vWriteLowNibble(CLCD_DATA_PORT, copy_u8D1ata);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    19d0:	0e 94 47 21 	call	0x428e	; 0x428e <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    19d4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e4       	ldi	r27, 0x40	; 64
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <CLCD_voidsendData+0x9c>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <CLCD_voidsendData+0x11a>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <CLCD_voidsendData+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <CLCD_voidsendData+0xfc>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <CLCD_voidsendData+0xea>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <CLCD_voidsendData+0xde>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <CLCD_voidsendData+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <CLCD_voidsendData+0x126>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
#endif
#else
#error "Wrong CLCD_MODE config"
#endif
    _delay_ms(2);
}
    1abc:	2f 96       	adiw	r28, 0x0f	; 15
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <CLCD_voidsendCommand>:

void CLCD_voidsendCommand(u8 copy_u8Command) {
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_enumWritePortValue(CLCD_DATA_PORT, copy_u8Command);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    CLCD_voidSendFallingEdge();
#elif CLCD_MODE == 4
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	66 e0       	ldi	r22, 0x06	; 6
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    DIO_vWriteHighNibble(CLCD_DATA_PORT, (copy_u8Command >> 4));
    CLCD_voidSendFallingEdge();
    DIO_vWriteHighNibble(CLCD_DATA_PORT, copy_u8Command);
    CLCD_voidSendFallingEdge();
#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE
    DIO_vWriteLowNibble(CLCD_DATA_PORT, (copy_u8Command >> 4));
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 2f       	mov	r25, r24
    1afc:	92 95       	swap	r25
    1afe:	9f 70       	andi	r25, 0x0F	; 15
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	69 2f       	mov	r22, r25
    1b04:	0e 94 47 21 	call	0x428e	; 0x428e <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    1b08:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    DIO_vWriteLowNibble(CLCD_DATA_PORT, copy_u8Command);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b10:	0e 94 47 21 	call	0x428e	; 0x428e <DIO_vWriteLowNibble>
    CLCD_voidSendFallingEdge();
    1b14:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendFallingEdge>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e0       	ldi	r26, 0x00	; 0
    1b1e:	b0 e4       	ldi	r27, 0x40	; 64
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	98 87       	std	Y+8, r25	; 0x08
    1b44:	a9 87       	std	Y+9, r26	; 0x09
    1b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <CLCD_voidsendCommand+0x9c>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <CLCD_voidsendCommand+0x11a>
	else if (__tmp > 65535)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <CLCD_voidsendCommand+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <CLCD_voidsendCommand+0xfc>
    1bac:	88 ec       	ldi	r24, 0xC8	; 200
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <CLCD_voidsendCommand+0xea>
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <CLCD_voidsendCommand+0xde>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <CLCD_voidsendCommand+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <CLCD_voidsendCommand+0x126>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
#endif
#else
#error "Wrong CLCD_MODE config"
#endif
    _delay_ms(2);
}
    1bfc:	2f 96       	adiw	r28, 0x0f	; 15
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <CLCD_voidsendString>:

void CLCD_voidsendString(u8 *copy_u8ptrString) {
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <CLCD_voidsendString+0x6>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9b 83       	std	Y+3, r25	; 0x03
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Loc_Iterator = 0;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <CLCD_voidsendString+0x30>
    while (copy_u8ptrString[Loc_Iterator] != '\0') {
        CLCD_voidsendData(copy_u8ptrString[Loc_Iterator]);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	80 81       	ld	r24, Z
    1c34:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
        Loc_Iterator++;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}

void CLCD_voidsendString(u8 *copy_u8ptrString) {
    u8 Loc_Iterator = 0;
    while (copy_u8ptrString[Loc_Iterator] != '\0') {
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e2 0f       	add	r30, r18
    1c4c:	f3 1f       	adc	r31, r19
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	39 f7       	brne	.-50     	; 0x1c22 <CLCD_voidsendString+0x14>
        CLCD_voidsendData(copy_u8ptrString[Loc_Iterator]);
        Loc_Iterator++;
    }
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <CLCD_voidSendFallingEdge>:

static void CLCD_voidSendFallingEdge(void) {
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	6c 97       	sbiw	r28, 0x1c	; 28
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e8       	ldi	r26, 0x80	; 128
    1c84:	bf e3       	ldi	r27, 0x3F	; 63
    1c86:	89 8f       	std	Y+25, r24	; 0x19
    1c88:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8d 8b       	std	Y+21, r24	; 0x15
    1ca8:	9e 8b       	std	Y+22, r25	; 0x16
    1caa:	af 8b       	std	Y+23, r26	; 0x17
    1cac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <CLCD_voidSendFallingEdge+0xd0>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <CLCD_voidSendFallingEdge+0xbe>
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8b 89       	ldd	r24, Y+19	; 0x13
    1d28:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8b 89       	ldd	r24, Y+19	; 0x13
    1d32:	9c 89       	ldd	r25, Y+20	; 0x14
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <CLCD_voidSendFallingEdge+0xb2>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d50:	9c 89       	ldd	r25, Y+20	; 0x14
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	98 89       	ldd	r25, Y+16	; 0x10
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <CLCD_voidSendFallingEdge+0xfa>
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_enumWritePinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	67 e0       	ldi	r22, 0x07	; 7
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e8       	ldi	r26, 0x80	; 128
    1d72:	bf e3       	ldi	r27, 0x3F	; 63
    1d74:	8b 87       	std	Y+11, r24	; 0x0b
    1d76:	9c 87       	std	Y+12, r25	; 0x0c
    1d78:	ad 87       	std	Y+13, r26	; 0x0d
    1d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <CLCD_voidSendFallingEdge+0x1be>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <CLCD_voidSendFallingEdge+0x1ac>
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <CLCD_voidSendFallingEdge+0x1a0>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <CLCD_voidSendFallingEdge+0x1e8>
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1e50:	6c 96       	adiw	r28, 0x1c	; 28
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void) {
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    CLCD_voidsendCommand(lcd_Clear);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e2       	ldi	r26, 0x20	; 32
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a ef       	ldi	r20, 0xFA	; 250
    1e9a:	54 e4       	ldi	r21, 0x44	; 68
    1e9c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <CLCD_voidClearScreen+0xcc>
    1f10:	88 ec       	ldi	r24, 0xC8	; 200
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <CLCD_voidClearScreen+0xba>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <CLCD_voidClearScreen+0xae>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <CLCD_voidClearScreen+0xf6>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    1f60:	2e 96       	adiw	r28, 0x0e	; 14
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <CLCD_voidSetPosition>:

void CLCD_voidSetPosition(u8 copy_u8Row, u8 copy_u8Col) {
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	61 97       	sbiw	r28, 0x11	; 17
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	88 8b       	std	Y+16, r24	; 0x10
    1f88:	69 8b       	std	Y+17, r22	; 0x11
    u8 loc_u8data;
    if ((copy_u8Row > 2) || (copy_u8Row < 1) || (copy_u8Col > 16) || (copy_u8Col < 1)) {
    1f8a:	88 89       	ldd	r24, Y+16	; 0x10
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	48 f4       	brcc	.+18     	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	88 23       	and	r24, r24
    1f94:	31 f0       	breq	.+12     	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	81 31       	cpi	r24, 0x11	; 17
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <CLCD_voidSetPosition+0x30>
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	88 23       	and	r24, r24
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <CLCD_voidSetPosition+0x36>
        loc_u8data = lcd_SetCursor;
    1fa2:	80 e8       	ldi	r24, 0x80	; 128
    1fa4:	8f 87       	std	Y+15, r24	; 0x0f
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <CLCD_voidSetPosition+0x50>
    } else if (copy_u8Row == CLCD_Row_1) {
    1fa8:	88 89       	ldd	r24, Y+16	; 0x10
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <CLCD_voidSetPosition+0x44>
        loc_u8data = (lcd_SetCursor) + (copy_u8Col - 1);
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	81 58       	subi	r24, 0x81	; 129
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <CLCD_voidSetPosition+0x50>
    } else if (copy_u8Row == CLCD_Row_2) {
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	19 f4       	brne	.+6      	; 0x1fc2 <CLCD_voidSetPosition+0x50>
        loc_u8data = (lcd_SetCursor) + 64 + (copy_u8Col - 1);
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	81 54       	subi	r24, 0x41	; 65
    1fc0:	8f 87       	std	Y+15, r24	; 0x0f
    }
    CLCD_voidsendCommand(loc_u8data);
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e8       	ldi	r26, 0x80	; 128
    1fce:	bf e3       	ldi	r27, 0x3F	; 63
    1fd0:	8b 87       	std	Y+11, r24	; 0x0b
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	ad 87       	std	Y+13, r26	; 0x0d
    1fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	98 87       	std	Y+8, r25	; 0x08
    1ff4:	a9 87       	std	Y+9, r26	; 0x09
    1ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <CLCD_voidSetPosition+0x108>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <CLCD_voidSetPosition+0xf6>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <CLCD_voidSetPosition+0xea>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <CLCD_voidSetPosition+0x132>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    20ac:	61 96       	adiw	r28, 0x11	; 17
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar(u8 copy_u8Row, u8 copy_u8Col) {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <CLCD_voidSendExtraChar+0x6>
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    20cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 loc_u8Iterator = 0;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    CLCD_voidsendCommand(lcd_CGRAM);
    20d0:	80 e4       	ldi	r24, 0x40	; 64
    20d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CLCD_voidsendCommand>
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
    20d6:	19 82       	std	Y+1, r1	; 0x01
    20d8:	0c c0       	rjmp	.+24     	; 0x20f2 <CLCD_voidSendExtraChar+0x34>
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	fc 01       	movw	r30, r24
    20e2:	eb 58       	subi	r30, 0x8B	; 139
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	80 81       	ld	r24, Z
    20e8:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
}

void CLCD_voidSendExtraChar(u8 copy_u8Row, u8 copy_u8Col) {
    u8 loc_u8Iterator = 0;
    CLCD_voidsendCommand(lcd_CGRAM);
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 31       	cpi	r24, 0x18	; 24
    20f6:	88 f3       	brcs	.-30     	; 0x20da <CLCD_voidSendExtraChar+0x1c>
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    }
    CLCD_voidSetPosition(copy_u8Row, copy_u8Col);
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	6b 81       	ldd	r22, Y+3	; 0x03
    20fc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
    for (loc_u8Iterator = 0; loc_u8Iterator < 8; loc_u8Iterator++) {
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <CLCD_voidSendExtraChar+0x52>
        CLCD_voidsendData(loc_u8Iterator);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
    CLCD_voidsendCommand(lcd_CGRAM);
    for (loc_u8Iterator = 0; loc_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]); loc_u8Iterator++) {
        CLCD_voidsendData(CLCD_u8ExtraChar[loc_u8Iterator]);
    }
    CLCD_voidSetPosition(copy_u8Row, copy_u8Col);
    for (loc_u8Iterator = 0; loc_u8Iterator < 8; loc_u8Iterator++) {
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	b8 f3       	brcs	.-18     	; 0x2104 <CLCD_voidSendExtraChar+0x46>
        CLCD_voidsendData(loc_u8Iterator);
    }
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <CLCD_vSendIntNumber>:

void CLCD_vSendIntNumber(s32 Copy_s32Number) {
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	28 97       	sbiw	r28, 0x08	; 8
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	6d 83       	std	Y+5, r22	; 0x05
    2140:	7e 83       	std	Y+6, r23	; 0x06
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    u32 LOC_u32Reverse = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 e0       	ldi	r26, 0x00	; 0
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	ab 83       	std	Y+3, r26	; 0x03
    2154:	bc 83       	std	Y+4, r27	; 0x04
    if (Copy_s32Number == 0) {
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	af 81       	ldd	r26, Y+7	; 0x07
    215c:	b8 85       	ldd	r27, Y+8	; 0x08
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a1 05       	cpc	r26, r1
    2162:	b1 05       	cpc	r27, r1
    2164:	21 f4       	brne	.+8      	; 0x216e <CLCD_vSendIntNumber+0x4c>
        CLCD_voidsendData('0');
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
    216c:	85 c0       	rjmp	.+266    	; 0x2278 <CLCD_vSendIntNumber+0x156>
    } else {
        if (Copy_s32Number < 0) {
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	af 81       	ldd	r26, Y+7	; 0x07
    2174:	b8 85       	ldd	r27, Y+8	; 0x08
    2176:	bb 23       	and	r27, r27
    2178:	0c f0       	brlt	.+2      	; 0x217c <CLCD_vSendIntNumber+0x5a>
    217a:	49 c0       	rjmp	.+146    	; 0x220e <CLCD_vSendIntNumber+0xec>
            CLCD_voidsendData('-');
    217c:	8d e2       	ldi	r24, 0x2D	; 45
    217e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
            Copy_s32Number = (-1 * Copy_s32Number);
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	af 81       	ldd	r26, Y+7	; 0x07
    2188:	b8 85       	ldd	r27, Y+8	; 0x08
    218a:	b0 95       	com	r27
    218c:	a0 95       	com	r26
    218e:	90 95       	com	r25
    2190:	81 95       	neg	r24
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	af 4f       	sbci	r26, 0xFF	; 255
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	af 83       	std	Y+7, r26	; 0x07
    219e:	b8 87       	std	Y+8, r27	; 0x08
    21a0:	36 c0       	rjmp	.+108    	; 0x220e <CLCD_vSendIntNumber+0xec>
        }
        while (Copy_s32Number != 0) {
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	ab 81       	ldd	r26, Y+3	; 0x03
    21a8:	bc 81       	ldd	r27, Y+4	; 0x04
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsi3>
    21ba:	7b 01       	movw	r14, r22
    21bc:	8c 01       	movw	r16, r24
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	af 81       	ldd	r26, Y+7	; 0x07
    21c4:	b8 85       	ldd	r27, Y+8	; 0x08
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <__divmodsi4>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8e 0d       	add	r24, r14
    21dc:	9f 1d       	adc	r25, r15
    21de:	a0 1f       	adc	r26, r16
    21e0:	b1 1f       	adc	r27, r17
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	ab 83       	std	Y+3, r26	; 0x03
    21e8:	bc 83       	std	Y+4, r27	; 0x04
            Copy_s32Number /= 10;
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	af 81       	ldd	r26, Y+7	; 0x07
    21f0:	b8 85       	ldd	r27, Y+8	; 0x08
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <__divmodsi4>
    2202:	da 01       	movw	r26, r20
    2204:	c9 01       	movw	r24, r18
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	af 83       	std	Y+7, r26	; 0x07
    220c:	b8 87       	std	Y+8, r27	; 0x08
    } else {
        if (Copy_s32Number < 0) {
            CLCD_voidsendData('-');
            Copy_s32Number = (-1 * Copy_s32Number);
        }
        while (Copy_s32Number != 0) {
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	af 81       	ldd	r26, Y+7	; 0x07
    2214:	b8 85       	ldd	r27, Y+8	; 0x08
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	a1 05       	cpc	r26, r1
    221a:	b1 05       	cpc	r27, r1
    221c:	11 f6       	brne	.-124    	; 0x21a2 <CLCD_vSendIntNumber+0x80>
    221e:	23 c0       	rjmp	.+70     	; 0x2266 <CLCD_vSendIntNumber+0x144>
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
            Copy_s32Number /= 10;
        }
        while (LOC_u32Reverse != 1) {
            CLCD_voidsendData((LOC_u32Reverse % 10) + 48);
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	ab 81       	ldd	r26, Y+3	; 0x03
    2226:	bc 81       	ldd	r27, Y+4	; 0x04
    2228:	2a e0       	ldi	r18, 0x0A	; 10
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__udivmodsi4>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	80 5d       	subi	r24, 0xD0	; 208
    223e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
            LOC_u32Reverse /= 10;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	ab 81       	ldd	r26, Y+3	; 0x03
    2248:	bc 81       	ldd	r27, Y+4	; 0x04
    224a:	2a e0       	ldi	r18, 0x0A	; 10
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__udivmodsi4>
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	ab 83       	std	Y+3, r26	; 0x03
    2264:	bc 83       	std	Y+4, r27	; 0x04
        }
        while (Copy_s32Number != 0) {
            LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
            Copy_s32Number /= 10;
        }
        while (LOC_u32Reverse != 1) {
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	ab 81       	ldd	r26, Y+3	; 0x03
    226c:	bc 81       	ldd	r27, Y+4	; 0x04
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	a1 05       	cpc	r26, r1
    2274:	b1 05       	cpc	r27, r1
    2276:	a1 f6       	brne	.-88     	; 0x2220 <CLCD_vSendIntNumber+0xfe>
            CLCD_voidsendData((LOC_u32Reverse % 10) + 48);
            LOC_u32Reverse /= 10;
        }
    }
}
    2278:	28 96       	adiw	r28, 0x08	; 8
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	08 95       	ret

00002292 <CLCD_vSendFloatNumber>:

void CLCD_vSendFloatNumber(f64 Copy_f64Number) {
    2292:	af 92       	push	r10
    2294:	bf 92       	push	r11
    2296:	cf 92       	push	r12
    2298:	df 92       	push	r13
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <CLCD_vSendFloatNumber+0x16>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <CLCD_vSendFloatNumber+0x18>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	69 83       	std	Y+1, r22	; 0x01
    22b0:	7a 83       	std	Y+2, r23	; 0x02
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    22b6:	69 81       	ldd	r22, Y+1	; 0x01
    22b8:	7a 81       	ldd	r23, Y+2	; 0x02
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
    if (Copy_f64Number < 0) {
    22ce:	69 81       	ldd	r22, Y+1	; 0x01
    22d0:	7a 81       	ldd	r23, Y+2	; 0x02
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	4c f4       	brge	.+18     	; 0x22f8 <CLCD_vSendFloatNumber+0x66>
        Copy_f64Number *= -1;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	ab 81       	ldd	r26, Y+3	; 0x03
    22ec:	bc 81       	ldd	r27, Y+4	; 0x04
    22ee:	b0 58       	subi	r27, 0x80	; 128
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	ab 83       	std	Y+3, r26	; 0x03
    22f6:	bc 83       	std	Y+4, r27	; 0x04
    }
    Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    22f8:	69 81       	ldd	r22, Y+1	; 0x01
    22fa:	7a 81       	ldd	r23, Y+2	; 0x02
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	69 81       	ldd	r22, Y+1	; 0x01
    2316:	7a 81       	ldd	r23, Y+2	; 0x02
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	ab 83       	std	Y+3, r26	; 0x03
    232a:	bc 83       	std	Y+4, r27	; 0x04
    Copy_f64Number *= 10000;
    232c:	69 81       	ldd	r22, Y+1	; 0x01
    232e:	7a 81       	ldd	r23, Y+2	; 0x02
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e4       	ldi	r19, 0x40	; 64
    2338:	4c e1       	ldi	r20, 0x1C	; 28
    233a:	56 e4       	ldi	r21, 0x46	; 70
    233c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	ab 83       	std	Y+3, r26	; 0x03
    234a:	bc 83       	std	Y+4, r27	; 0x04
    if ((s64)Copy_f64Number != 0) {
    234c:	69 81       	ldd	r22, Y+1	; 0x01
    234e:	7a 81       	ldd	r23, Y+2	; 0x02
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    2358:	a2 2e       	mov	r10, r18
    235a:	b3 2e       	mov	r11, r19
    235c:	c4 2e       	mov	r12, r20
    235e:	d5 2e       	mov	r13, r21
    2360:	e6 2e       	mov	r14, r22
    2362:	f7 2e       	mov	r15, r23
    2364:	08 2f       	mov	r16, r24
    2366:	19 2f       	mov	r17, r25
    2368:	8a 2d       	mov	r24, r10
    236a:	8b 29       	or	r24, r11
    236c:	8c 29       	or	r24, r12
    236e:	8d 29       	or	r24, r13
    2370:	8e 29       	or	r24, r14
    2372:	8f 29       	or	r24, r15
    2374:	80 2b       	or	r24, r16
    2376:	81 2b       	or	r24, r17
    2378:	88 23       	and	r24, r24
    237a:	79 f0       	breq	.+30     	; 0x239a <CLCD_vSendFloatNumber+0x108>
        CLCD_voidsendData('.');
    237c:	8e e2       	ldi	r24, 0x2E	; 46
    237e:	0e 94 c7 0c 	call	0x198e	; 0x198e <CLCD_voidsendData>
        CLCD_vSendIntNumber((s32)Copy_f64Number);
    2382:	69 81       	ldd	r22, Y+1	; 0x01
    2384:	7a 81       	ldd	r23, Y+2	; 0x02
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 91 10 	call	0x2122	; 0x2122 <CLCD_vSendIntNumber>
    }
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	08 95       	ret

000023b8 <DCMOTOR_uint8Control>:
// #include "PORT_INTERFACE.h"

#include "DCMOTOR_INTERFACE.h"

u8 DCMOTOR_uint8Control(DCMOTOR_CONFIG *DcMotor, u8 Copy_uint8State)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <DCMOTOR_uint8Control+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <DCMOTOR_uint8Control+0x8>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <DCMOTOR_uint8Control+0xa>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9b 83       	std	Y+3, r25	; 0x03
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_uint8ErrorState = OK;
    23cc:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_uint8State)
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3e 83       	std	Y+6, r19	; 0x06
    23d6:	2d 83       	std	Y+5, r18	; 0x05
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	f9 f0       	breq	.+62     	; 0x2420 <DCMOTOR_uint8Control+0x68>
    23e2:	2d 81       	ldd	r18, Y+5	; 0x05
    23e4:	3e 81       	ldd	r19, Y+6	; 0x06
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	79 f1       	breq	.+94     	; 0x244a <DCMOTOR_uint8Control+0x92>
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <DCMOTOR_uint8Control+0x3e>
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <DCMOTOR_uint8Control+0xbc>
	{
	case DCMOTOR_CW:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_LOW);
    23f6:	ea 81       	ldd	r30, Y+2	; 0x02
    23f8:	fb 81       	ldd	r31, Y+3	; 0x03
    23fa:	80 81       	ld	r24, Z
    23fc:	ea 81       	ldd	r30, Y+2	; 0x02
    23fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	69 2f       	mov	r22, r25
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_HIGH);
    240a:	ea 81       	ldd	r30, Y+2	; 0x02
    240c:	fb 81       	ldd	r31, Y+3	; 0x03
    240e:	80 81       	ld	r24, Z
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	92 81       	ldd	r25, Z+2	; 0x02
    2416:	69 2f       	mov	r22, r25
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    241e:	2c c0       	rjmp	.+88     	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	case DCMOTOR_CCW:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_HIGH);
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	80 81       	ld	r24, Z
    2426:	ea 81       	ldd	r30, Y+2	; 0x02
    2428:	fb 81       	ldd	r31, Y+3	; 0x03
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	69 2f       	mov	r22, r25
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_LOW);
    2434:	ea 81       	ldd	r30, Y+2	; 0x02
    2436:	fb 81       	ldd	r31, Y+3	; 0x03
    2438:	80 81       	ld	r24, Z
    243a:	ea 81       	ldd	r30, Y+2	; 0x02
    243c:	fb 81       	ldd	r31, Y+3	; 0x03
    243e:	92 81       	ldd	r25, Z+2	; 0x02
    2440:	69 2f       	mov	r22, r25
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    2448:	17 c0       	rjmp	.+46     	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	case DCMOTOR_STOP:
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinA, DIO_PIN_LOW);
    244a:	ea 81       	ldd	r30, Y+2	; 0x02
    244c:	fb 81       	ldd	r31, Y+3	; 0x03
    244e:	80 81       	ld	r24, Z
    2450:	ea 81       	ldd	r30, Y+2	; 0x02
    2452:	fb 81       	ldd	r31, Y+3	; 0x03
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	69 2f       	mov	r22, r25
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
		DIO_enumWritePinValue(DcMotor->Copy_uint8DcMotorPort, DcMotor->Copy_uint8DcMotorPinB, DIO_PIN_LOW);
    245e:	ea 81       	ldd	r30, Y+2	; 0x02
    2460:	fb 81       	ldd	r31, Y+3	; 0x03
    2462:	80 81       	ld	r24, Z
    2464:	ea 81       	ldd	r30, Y+2	; 0x02
    2466:	fb 81       	ldd	r31, Y+3	; 0x03
    2468:	92 81       	ldd	r25, Z+2	; 0x02
    246a:	69 2f       	mov	r22, r25
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DCMOTOR_uint8Control+0xc0>
		break;
	default:
		Local_uint8ErrorState = NOK;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uint8ErrorState;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
}
    247a:	26 96       	adiw	r28, 0x06	; 6
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <IR_enumInit>:
#include "../lib/BIT_MATH.h"
#include "../lib/std_typs.h"


IR_ErrorStatus IR_enumInit(IR_Config_t *Copy_pstConfig)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <IR_enumInit+0x6>
    2492:	0f 92       	push	r0
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	9b 83       	std	Y+3, r25	; 0x03
    249a:	8a 83       	std	Y+2, r24	; 0x02
    IR_ErrorStatus Local_enumErrorStatus = IR_NOK;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL)
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	a9 f0       	breq	.+42     	; 0x24d2 <IR_enumInit+0x46>
    {
        /* Set pin as input */
        DIO_enumSetPinDirection(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, DIO_INPUT);
    24a8:	ea 81       	ldd	r30, Y+2	; 0x02
    24aa:	fb 81       	ldd	r31, Y+3	; 0x03
    24ac:	80 81       	ld	r24, Z
    24ae:	ea 81       	ldd	r30, Y+2	; 0x02
    24b0:	fb 81       	ldd	r31, Y+3	; 0x03
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	69 2f       	mov	r22, r25
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
        
        /* Enable internal pull-up resistor */
        DIO_enumConnectPullUp(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, 1);
    24bc:	ea 81       	ldd	r30, Y+2	; 0x02
    24be:	fb 81       	ldd	r31, Y+3	; 0x03
    24c0:	80 81       	ld	r24, Z
    24c2:	ea 81       	ldd	r30, Y+2	; 0x02
    24c4:	fb 81       	ldd	r31, Y+3	; 0x03
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	69 2f       	mov	r22, r25
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <DIO_enumConnectPullUp>
        
        Local_enumErrorStatus = IR_OK;
    24d0:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_enumErrorStatus;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <IR_enumGetState>:

IR_ErrorStatus IR_enumGetState(IR_Config_t *Copy_pstConfig, u8 *Copy_pu8State)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <IR_enumGetState+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <IR_enumGetState+0x8>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <IR_enumGetState+0xa>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
    24f2:	7e 83       	std	Y+6, r23	; 0x06
    24f4:	6d 83       	std	Y+5, r22	; 0x05
    IR_ErrorStatus Local_enumErrorStatus = IR_NOK;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	89 83       	std	Y+1, r24	; 0x01
    u8 Local_u8PinValue;
    
    if (Copy_pstConfig != NULL && Copy_pu8State != NULL)
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	f9 f0       	breq	.+62     	; 0x2540 <IR_enumGetState+0x60>
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	d9 f0       	breq	.+54     	; 0x2540 <IR_enumGetState+0x60>
    {
        /* Read pin value */
        if (DIO_enumReadPinValue(Copy_pstConfig->Copy_u8Port, Copy_pstConfig->Copy_u8Pin, &Local_u8PinValue) == DIO_OK)
    250a:	eb 81       	ldd	r30, Y+3	; 0x03
    250c:	fc 81       	ldd	r31, Y+4	; 0x04
    250e:	80 81       	ld	r24, Z
    2510:	eb 81       	ldd	r30, Y+3	; 0x03
    2512:	fc 81       	ldd	r31, Y+4	; 0x04
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	9e 01       	movw	r18, r28
    2518:	2e 5f       	subi	r18, 0xFE	; 254
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	69 2f       	mov	r22, r25
    251e:	a9 01       	movw	r20, r18
    2520:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <DIO_enumReadPinValue>
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	61 f4       	brne	.+24     	; 0x2540 <IR_enumGetState+0x60>
        {
            /* Convert to detection state */
            if (Local_u8PinValue == IR_DETECTED)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	88 23       	and	r24, r24
    252c:	29 f4       	brne	.+10     	; 0x2538 <IR_enumGetState+0x58>
            {
                *Copy_pu8State = 1;  /* Object detected */
    252e:	ed 81       	ldd	r30, Y+5	; 0x05
    2530:	fe 81       	ldd	r31, Y+6	; 0x06
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 83       	st	Z, r24
    2536:	03 c0       	rjmp	.+6      	; 0x253e <IR_enumGetState+0x5e>
            }
            else
            {
                *Copy_pu8State = 0;  /* No object detected */
    2538:	ed 81       	ldd	r30, Y+5	; 0x05
    253a:	fe 81       	ldd	r31, Y+6	; 0x06
    253c:	10 82       	st	Z, r1
            }

            Local_enumErrorStatus = IR_OK;
    253e:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2542:	26 96       	adiw	r28, 0x06	; 6
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit       (void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	62 e0       	ldi	r22, 0x02	; 2
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <DIO_enumConnectPullUp>
DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	63 e0       	ldi	r22, 0x03	; 3
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <DIO_enumConnectPullUp>


  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	6f e0       	ldi	r22, 0x0F	; 15
    2588:	0e 94 b9 22 	call	0x4572	; 0x4572 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	6f e0       	ldi	r22, 0x0F	; 15
    2590:	0e 94 c2 21 	call	0x4384	; 0x4384 <DIO_vWriteHighNibble>
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	62 97       	sbiw	r28, 0x12	; 18
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
    25b0:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
    25b2:	84 e0       	ldi	r24, 0x04	; 4
    25b4:	8f 87       	std	Y+15, r24	; 0x0f
    25b6:	c9 c0       	rjmp	.+402    	; 0x274a <KPD_u8GetPressed+0x1b0>
  {
	  DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    25c2:	18 8a       	std	Y+16, r1	; 0x10
    25c4:	b6 c0       	rjmp	.+364    	; 0x2732 <KPD_u8GetPressed+0x198>
    {
    	DIO_enumReadPinValue (KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    25c6:	9e 01       	movw	r18, r28
    25c8:	2e 5e       	subi	r18, 0xEE	; 238
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	68 89       	ldd	r22, Y+16	; 0x10
    25d0:	a9 01       	movw	r20, r18
    25d2:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <DIO_enumReadPinValue>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    25d6:	8a 89       	ldd	r24, Y+18	; 0x12
    25d8:	88 23       	and	r24, r24
    25da:	09 f0       	breq	.+2      	; 0x25de <KPD_u8GetPressed+0x44>
    25dc:	a7 c0       	rjmp	.+334    	; 0x272c <KPD_u8GetPressed+0x192>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a8 e4       	ldi	r26, 0x48	; 72
    25e4:	b2 e4       	ldi	r27, 0x42	; 66
    25e6:	8b 87       	std	Y+11, r24	; 0x0b
    25e8:	9c 87       	std	Y+12, r25	; 0x0c
    25ea:	ad 87       	std	Y+13, r26	; 0x0d
    25ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8f 83       	std	Y+7, r24	; 0x07
    2608:	98 87       	std	Y+8, r25	; 0x08
    260a:	a9 87       	std	Y+9, r26	; 0x09
    260c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <KPD_u8GetPressed+0xf6>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <KPD_u8GetPressed+0xe4>
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <KPD_u8GetPressed+0xd8>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <KPD_u8GetPressed+0x120>
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    26c2:	9e 01       	movw	r18, r28
    26c4:	2e 5e       	subi	r18, 0xEE	; 238
    26c6:	3f 4f       	sbci	r19, 0xFF	; 255
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	68 89       	ldd	r22, Y+16	; 0x10
    26cc:	a9 01       	movw	r20, r18
    26ce:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <DIO_enumReadPinValue>

        if (LOC_u8GetPressed == 0)
    26d2:	8a 89       	ldd	r24, Y+18	; 0x12
    26d4:	88 23       	and	r24, r24
    26d6:	a9 f4       	brne	.+42     	; 0x2702 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    26d8:	88 89       	ldd	r24, Y+16	; 0x10
    26da:	48 2f       	mov	r20, r24
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9c 01       	movw	r18, r24
    26e6:	24 50       	subi	r18, 0x04	; 4
    26e8:	30 40       	sbci	r19, 0x00	; 0
    26ea:	ca 01       	movw	r24, r20
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	82 0f       	add	r24, r18
    26f6:	93 1f       	adc	r25, r19
    26f8:	fc 01       	movw	r30, r24
    26fa:	e3 57       	subi	r30, 0x73	; 115
    26fc:	fe 4f       	sbci	r31, 0xFE	; 254
    26fe:	80 81       	ld	r24, Z
    2700:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2702:	9e 01       	movw	r18, r28
    2704:	2e 5e       	subi	r18, 0xEE	; 238
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	68 89       	ldd	r22, Y+16	; 0x10
    270c:	a9 01       	movw	r20, r18
    270e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <DIO_enumReadPinValue>
    2712:	08 c0       	rjmp	.+16     	; 0x2724 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
        	DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2714:	9e 01       	movw	r18, r28
    2716:	2e 5e       	subi	r18, 0xEE	; 238
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	68 89       	ldd	r22, Y+16	; 0x10
    271e:	a9 01       	movw	r20, r18
    2720:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <DIO_enumReadPinValue>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    2724:	8a 89       	ldd	r24, Y+18	; 0x12
    2726:	88 23       	and	r24, r24
    2728:	a9 f3       	breq	.-22     	; 0x2714 <KPD_u8GetPressed+0x17a>
    272a:	07 c0       	rjmp	.+14     	; 0x273a <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
  {
	  DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    272c:	88 89       	ldd	r24, Y+16	; 0x10
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	88 8b       	std	Y+16, r24	; 0x10
    2732:	88 89       	ldd	r24, Y+16	; 0x10
    2734:	84 30       	cpi	r24, 0x04	; 4
    2736:	08 f4       	brcc	.+2      	; 0x273a <KPD_u8GetPressed+0x1a0>
    2738:	46 cf       	rjmp	.-372    	; 0x25c6 <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	6f 85       	ldd	r22, Y+15	; 0x0f
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col <KPD_COL_END + 1; LOC_u8Col++)
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	8f 87       	std	Y+15, r24	; 0x0f
    274a:	8f 85       	ldd	r24, Y+15	; 0x0f
    274c:	88 30       	cpi	r24, 0x08	; 8
    274e:	08 f4       	brcc	.+2      	; 0x2752 <KPD_u8GetPressed+0x1b8>
    2750:	33 cf       	rjmp	.-410    	; 0x25b8 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    2752:	89 89       	ldd	r24, Y+17	; 0x11
}
    2754:	62 96       	adiw	r28, 0x12	; 18
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <LDR_u16CalculateResistance>:
#include "LDR_interface.h"
#include "LDR_private.h"
#include "LDR_config.h"

static u16 LDR_u16CalculateResistance(LDR_Config_t *Copy_pstConfig, u16 Copy_u16AdcValue)
{
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	2c 97       	sbiw	r28, 0x0c	; 12
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	9a 87       	std	Y+10, r25	; 0x0a
    2784:	89 87       	std	Y+9, r24	; 0x09
    2786:	7c 87       	std	Y+12, r23	; 0x0c
    2788:	6b 87       	std	Y+11, r22	; 0x0b
    float Local_f32Voltage = (float)Copy_u16AdcValue * LDR_VOLTAGE_RESOLUTION / LDR_MAX_ADC_VALUE;
    278a:	8b 85       	ldd	r24, Y+11	; 0x0b
    278c:	9c 85       	ldd	r25, Y+12	; 0x0c
    278e:	cc 01       	movw	r24, r24
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 ea       	ldi	r20, 0xA0	; 160
    27aa:	50 e4       	ldi	r21, 0x40	; 64
    27ac:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 ec       	ldi	r19, 0xC0	; 192
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	af 83       	std	Y+7, r26	; 0x07
    27ce:	b8 87       	std	Y+8, r27	; 0x08
    float Local_f32RL = ((LDR_VOLTAGE_RESOLUTION - Local_f32Voltage) / Local_f32Voltage) * Copy_pstConfig->Copy_u16RL;
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	80 ea       	ldi	r24, 0xA0	; 160
    27d6:	90 e4       	ldi	r25, 0x40	; 64
    27d8:	2d 81       	ldd	r18, Y+5	; 0x05
    27da:	3e 81       	ldd	r19, Y+6	; 0x06
    27dc:	4f 81       	ldd	r20, Y+7	; 0x07
    27de:	58 85       	ldd	r21, Y+8	; 0x08
    27e0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	2d 81       	ldd	r18, Y+5	; 0x05
    27ee:	3e 81       	ldd	r19, Y+6	; 0x06
    27f0:	4f 81       	ldd	r20, Y+7	; 0x07
    27f2:	58 85       	ldd	r21, Y+8	; 0x08
    27f4:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	7c 01       	movw	r14, r24
    27fe:	8d 01       	movw	r16, r26
    2800:	e9 85       	ldd	r30, Y+9	; 0x09
    2802:	fa 85       	ldd	r31, Y+10	; 0x0a
    2804:	83 81       	ldd	r24, Z+3	; 0x03
    2806:	94 81       	ldd	r25, Z+4	; 0x04
    2808:	cc 01       	movw	r24, r24
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	c8 01       	movw	r24, r16
    281c:	b7 01       	movw	r22, r14
    281e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	ab 83       	std	Y+3, r26	; 0x03
    282c:	bc 83       	std	Y+4, r27	; 0x04
    return (u16)Local_f32RL;
    282e:	69 81       	ldd	r22, Y+1	; 0x01
    2830:	7a 81       	ldd	r23, Y+2	; 0x02
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
}
    283e:	2c 96       	adiw	r28, 0x0c	; 12
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	08 95       	ret

00002858 <LDR_enumInit>:

LDR_ErrorStatus LDR_enumInit(LDR_Config_t *Copy_pstConfig)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <LDR_enumInit+0x6>
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	9b 83       	std	Y+3, r25	; 0x03
    2866:	8a 83       	std	Y+2, r24	; 0x02
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL)
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	9b 81       	ldd	r25, Y+3	; 0x03
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	79 f0       	breq	.+30     	; 0x2892 <LDR_enumInit+0x3a>
    {
        /* Initialize ADC */
        ADC_vInit();
    2874:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <ADC_vInit>
        
        /* Set default values if not configured */
        if (Copy_pstConfig->Copy_u16RL == 0)
    2878:	ea 81       	ldd	r30, Y+2	; 0x02
    287a:	fb 81       	ldd	r31, Y+3	; 0x03
    287c:	83 81       	ldd	r24, Z+3	; 0x03
    287e:	94 81       	ldd	r25, Z+4	; 0x04
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	31 f4       	brne	.+12     	; 0x2890 <LDR_enumInit+0x38>
        {
            Copy_pstConfig->Copy_u16RL = LDR_DEFAULT_RL;
    2884:	ea 81       	ldd	r30, Y+2	; 0x02
    2886:	fb 81       	ldd	r31, Y+3	; 0x03
    2888:	80 e1       	ldi	r24, 0x10	; 16
    288a:	97 e2       	ldi	r25, 0x27	; 39
    288c:	94 83       	std	Z+4, r25	; 0x04
    288e:	83 83       	std	Z+3, r24	; 0x03
        }
        
        Local_enumErrorStatus = LDR_OK;
    2890:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_enumErrorStatus;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <LDR_enumGetLightIntensity>:

LDR_ErrorStatus LDR_enumGetLightIntensity(LDR_Config_t *Copy_pstConfig, u16 *Copy_pu16LightValue)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	27 97       	sbiw	r28, 0x07	; 7
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	9d 83       	std	Y+5, r25	; 0x05
    28b6:	8c 83       	std	Y+4, r24	; 0x04
    28b8:	7f 83       	std	Y+7, r23	; 0x07
    28ba:	6e 83       	std	Y+6, r22	; 0x06
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	89 83       	std	Y+1, r24	; 0x01
    u16 Local_u16AnalogSignal = 0;
    28c0:	1b 82       	std	Y+3, r1	; 0x03
    28c2:	1a 82       	std	Y+2, r1	; 0x02
    
    if (Copy_pstConfig != NULL && Copy_pu16LightValue != NULL)
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	9d 81       	ldd	r25, Y+5	; 0x05
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	d9 f0       	breq	.+54     	; 0x2902 <LDR_enumGetLightIntensity+0x62>
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	9f 81       	ldd	r25, Y+7	; 0x07
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	b9 f0       	breq	.+46     	; 0x2902 <LDR_enumGetLightIntensity+0x62>
    {
        /* Get raw ADC value */
        Local_enumErrorStatus = LDR_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogSignal);
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	9e 01       	movw	r18, r28
    28da:	2e 5f       	subi	r18, 0xFE	; 254
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	b9 01       	movw	r22, r18
    28e0:	0e 94 8b 14 	call	0x2916	; 0x2916 <LDR_enumGetAnalogSignal>
    28e4:	89 83       	std	Y+1, r24	; 0x01
        
        if (Local_enumErrorStatus == LDR_OK)
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	88 23       	and	r24, r24
    28ea:	59 f4       	brne	.+22     	; 0x2902 <LDR_enumGetLightIntensity+0x62>
        {
            /* Calculate LDR resistance */
            *Copy_pu16LightValue = LDR_u16CalculateResistance(Copy_pstConfig, Local_u16AnalogSignal);
    28ec:	2a 81       	ldd	r18, Y+2	; 0x02
    28ee:	3b 81       	ldd	r19, Y+3	; 0x03
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	b9 01       	movw	r22, r18
    28f6:	0e 94 b3 13 	call	0x2766	; 0x2766 <LDR_u16CalculateResistance>
    28fa:	ee 81       	ldd	r30, Y+6	; 0x06
    28fc:	ff 81       	ldd	r31, Y+7	; 0x07
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
        }
    }
    
    return Local_enumErrorStatus;
    2902:	89 81       	ldd	r24, Y+1	; 0x01
}
    2904:	27 96       	adiw	r28, 0x07	; 7
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <LDR_enumGetAnalogSignal>:

LDR_ErrorStatus LDR_enumGetAnalogSignal(LDR_Config_t *Copy_pstConfig, u16 *Copy_pu16AnalogSignal)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <LDR_enumGetAnalogSignal+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <LDR_enumGetAnalogSignal+0x8>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	7d 83       	std	Y+5, r23	; 0x05
    292a:	6c 83       	std	Y+4, r22	; 0x04
    LDR_ErrorStatus Local_enumErrorStatus = LDR_NOK;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	89 83       	std	Y+1, r24	; 0x01
    
    if (Copy_pstConfig != NULL && Copy_pu16AnalogSignal != NULL)
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	9b 81       	ldd	r25, Y+3	; 0x03
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	79 f0       	breq	.+30     	; 0x2956 <LDR_enumGetAnalogSignal+0x40>
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	59 f0       	breq	.+22     	; 0x2956 <LDR_enumGetAnalogSignal+0x40>
    {
        if (ADC_u8GetResultSync(Copy_pstConfig->Copy_u8Channel, Copy_pu16AnalogSignal) == 0)
    2940:	ea 81       	ldd	r30, Y+2	; 0x02
    2942:	fb 81       	ldd	r31, Y+3	; 0x03
    2944:	80 81       	ld	r24, Z
    2946:	2c 81       	ldd	r18, Y+4	; 0x04
    2948:	3d 81       	ldd	r19, Y+5	; 0x05
    294a:	b9 01       	movw	r22, r18
    294c:	0e 94 01 19 	call	0x3202	; 0x3202 <ADC_u8GetResultSync>
    2950:	88 23       	and	r24, r24
    2952:	09 f4       	brne	.+2      	; 0x2956 <LDR_enumGetAnalogSignal+0x40>
        {
            Local_enumErrorStatus = LDR_OK;
    2954:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <LED_vInit>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vInit(LED_config LED_Configuration)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <LED_vInit+0x6>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	69 83       	std	Y+1, r22	; 0x01
    2976:	7a 83       	std	Y+2, r23	; 0x02
    2978:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_OUTPUT);
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	69 2f       	mov	r22, r25
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	0e 94 3b 1b 	call	0x3676	; 0x3676 <DIO_enumSetPinDirection>
}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <LED_vTurnOn>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vTurnOn(LED_config LED_Configuration)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <LED_vTurnOn+0x6>
    2998:	0f 92       	push	r0
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	69 83       	std	Y+1, r22	; 0x01
    29a0:	7a 83       	std	Y+2, r23	; 0x02
    29a2:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	81 30       	cpi	r24, 0x01	; 1
    29a8:	39 f4       	brne	.+14     	; 0x29b8 <LED_vTurnOn+0x26>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	69 2f       	mov	r22, r25
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <LED_vTurnOn+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	88 23       	and	r24, r24
    29bc:	31 f4       	brne	.+12     	; 0x29ca <LED_vTurnOn+0x38>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	69 2f       	mov	r22, r25
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
  }
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <LED_vTurnOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTurnOff(LED_config LED_Configuration)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	00 d0       	rcall	.+0      	; 0x29dc <LED_vTurnOff+0x6>
    29dc:	0f 92       	push	r0
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	69 83       	std	Y+1, r22	; 0x01
    29e4:	7a 83       	std	Y+2, r23	; 0x02
    29e6:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	39 f4       	brne	.+14     	; 0x29fc <LED_vTurnOff+0x26>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	69 2f       	mov	r22, r25
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
    29fa:	09 c0       	rjmp	.+18     	; 0x2a0e <LED_vTurnOff+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	88 23       	and	r24, r24
    2a00:	31 f4       	brne	.+12     	; 0x2a0e <LED_vTurnOff+0x38>
  {
	  DIO_enumWritePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	69 2f       	mov	r22, r25
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <DIO_enumWritePinValue>
  }
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <LED_vTog>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTog(LED_config LED_Configuration)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <LED_vTog+0x6>
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	69 83       	std	Y+1, r22	; 0x01
    2a28:	7a 83       	std	Y+2, r23	; 0x02
    2a2a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.PortName, LED_Configuration.PinNumber);
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	69 2f       	mov	r22, r25
    2a32:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <DIO_enumTogglePinValue>
}
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <MQ2_u16CalculateRS>:

#define MQ2_CALIBRATION_SAMPLE_TIMES 50
#define MQ2_CALIBRATION_SAMPLE_INTERVAL 500

static u16 MQ2_u16CalculateRS(MQ2_Config_t *Copy_pstConfig, u16 Copy_u16AdcValue)
{
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	2c 97       	sbiw	r28, 0x0c	; 12
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	9a 87       	std	Y+10, r25	; 0x0a
    2a60:	89 87       	std	Y+9, r24	; 0x09
    2a62:	7c 87       	std	Y+12, r23	; 0x0c
    2a64:	6b 87       	std	Y+11, r22	; 0x0b
    float Local_f32Voltage = (float)Copy_u16AdcValue * MQ2_VOLTAGE_RESOLUTION / MQ2_MAX_ADC_VALUE;
    2a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a6a:	cc 01       	movw	r24, r24
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 ea       	ldi	r20, 0xA0	; 160
    2a86:	50 e4       	ldi	r21, 0x40	; 64
    2a88:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 ec       	ldi	r19, 0xC0	; 192
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	54 e4       	ldi	r21, 0x44	; 68
    2a9c:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	af 83       	std	Y+7, r26	; 0x07
    2aaa:	b8 87       	std	Y+8, r27	; 0x08
    float Local_f32Rs = ((MQ2_VOLTAGE_RESOLUTION - Local_f32Voltage) / Local_f32Voltage) * Copy_pstConfig->Copy_u16RL;
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	80 ea       	ldi	r24, 0xA0	; 160
    2ab2:	90 e4       	ldi	r25, 0x40	; 64
    2ab4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab8:	4f 81       	ldd	r20, Y+7	; 0x07
    2aba:	58 85       	ldd	r21, Y+8	; 0x08
    2abc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aca:	3e 81       	ldd	r19, Y+6	; 0x06
    2acc:	4f 81       	ldd	r20, Y+7	; 0x07
    2ace:	58 85       	ldd	r21, Y+8	; 0x08
    2ad0:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	7c 01       	movw	r14, r24
    2ada:	8d 01       	movw	r16, r26
    2adc:	e9 85       	ldd	r30, Y+9	; 0x09
    2ade:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ae0:	85 81       	ldd	r24, Z+5	; 0x05
    2ae2:	96 81       	ldd	r25, Z+6	; 0x06
    2ae4:	cc 01       	movw	r24, r24
    2ae6:	a0 e0       	ldi	r26, 0x00	; 0
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    2af2:	9b 01       	movw	r18, r22
    2af4:	ac 01       	movw	r20, r24
    2af6:	c8 01       	movw	r24, r16
    2af8:	b7 01       	movw	r22, r14
    2afa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	ab 83       	std	Y+3, r26	; 0x03
    2b08:	bc 83       	std	Y+4, r27	; 0x04
    return (u16)Local_f32Rs;
    2b0a:	69 81       	ldd	r22, Y+1	; 0x01
    2b0c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
}
    2b1a:	2c 96       	adiw	r28, 0x0c	; 12
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	08 95       	ret

00002b34 <MQ2_u16CalculateRatio>:

static u16 MQ2_u16CalculateRatio(u16 Copy_u16Rs, u16 Copy_u16R0)
{
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <MQ2_u16CalculateRatio+0xe>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <MQ2_u16CalculateRatio+0x10>
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	7c 83       	std	Y+4, r23	; 0x04
    2b4e:	6b 83       	std	Y+3, r22	; 0x03
    return (u16)((float)Copy_u16Rs / Copy_u16R0);
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	cc 01       	movw	r24, r24
    2b56:	a0 e0       	ldi	r26, 0x00	; 0
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    2b62:	7b 01       	movw	r14, r22
    2b64:	8c 01       	movw	r16, r24
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	cc 01       	movw	r24, r24
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    2b78:	9b 01       	movw	r18, r22
    2b7a:	ac 01       	movw	r20, r24
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	b7 01       	movw	r22, r14
    2b80:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
}
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	1f 91       	pop	r17
    2ba2:	0f 91       	pop	r16
    2ba4:	ff 90       	pop	r15
    2ba6:	ef 90       	pop	r14
    2ba8:	08 95       	ret

00002baa <MQ2_enumGetCalibrationValue>:

static MQ2_ErrorStatus MQ2_enumGetCalibrationValue(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16R0Value)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	2c 97       	sbiw	r28, 0x0c	; 12
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	9a 87       	std	Y+10, r25	; 0x0a
    2bc0:	89 87       	std	Y+9, r24	; 0x09
    2bc2:	7c 87       	std	Y+12, r23	; 0x0c
    2bc4:	6b 87       	std	Y+11, r22	; 0x0b
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    2bc6:	1e 82       	std	Y+6, r1	; 0x06
    u32 Local_u32Sum = 0;
    2bc8:	1a 82       	std	Y+2, r1	; 0x02
    2bca:	1b 82       	std	Y+3, r1	; 0x03
    2bcc:	1c 82       	std	Y+4, r1	; 0x04
    2bce:	1d 82       	std	Y+5, r1	; 0x05
    u16 Local_u16AnalogValue = 0;
    2bd0:	18 86       	std	Y+8, r1	; 0x08
    2bd2:	1f 82       	std	Y+7, r1	; 0x07
    
    if (Copy_pstConfig != NULL && Copy_pu16R0Value != NULL)
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	09 f4       	brne	.+2      	; 0x2bde <MQ2_enumGetCalibrationValue+0x34>
    2bdc:	45 c0       	rjmp	.+138    	; 0x2c68 <MQ2_enumGetCalibrationValue+0xbe>
    2bde:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <MQ2_enumGetCalibrationValue+0x3e>
    2be6:	40 c0       	rjmp	.+128    	; 0x2c68 <MQ2_enumGetCalibrationValue+0xbe>
    {
        for (u8 Local_u8Counter = 0; Local_u8Counter < MQ2_CALIBRATION_SAMPLE_TIMES; Local_u8Counter++)
    2be8:	19 82       	std	Y+1, r1	; 0x01
    2bea:	25 c0       	rjmp	.+74     	; 0x2c36 <MQ2_enumGetCalibrationValue+0x8c>
        {
            Local_enumErrorStatus = MQ2_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogValue);
    2bec:	89 85       	ldd	r24, Y+9	; 0x09
    2bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf0:	9e 01       	movw	r18, r28
    2bf2:	29 5f       	subi	r18, 0xF9	; 249
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <MQ2_enumGetAnalogSignal>
    2bfc:	8e 83       	std	Y+6, r24	; 0x06
            if (Local_enumErrorStatus == MQ2_OK)
    2bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	e1 f4       	brne	.+56     	; 0x2c3c <MQ2_enumGetCalibrationValue+0x92>
            {
                Local_u32Sum += MQ2_u16CalculateRS(Copy_pstConfig, Local_u16AnalogValue);
    2c04:	2f 81       	ldd	r18, Y+7	; 0x07
    2c06:	38 85       	ldd	r19, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <MQ2_u16CalculateRS>
    2c12:	9c 01       	movw	r18, r24
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	ac 81       	ldd	r26, Y+4	; 0x04
    2c1e:	bd 81       	ldd	r27, Y+5	; 0x05
    2c20:	82 0f       	add	r24, r18
    2c22:	93 1f       	adc	r25, r19
    2c24:	a4 1f       	adc	r26, r20
    2c26:	b5 1f       	adc	r27, r21
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	9b 83       	std	Y+3, r25	; 0x03
    2c2c:	ac 83       	std	Y+4, r26	; 0x04
    2c2e:	bd 83       	std	Y+5, r27	; 0x05
    u32 Local_u32Sum = 0;
    u16 Local_u16AnalogValue = 0;
    
    if (Copy_pstConfig != NULL && Copy_pu16R0Value != NULL)
    {
        for (u8 Local_u8Counter = 0; Local_u8Counter < MQ2_CALIBRATION_SAMPLE_TIMES; Local_u8Counter++)
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	82 33       	cpi	r24, 0x32	; 50
    2c3a:	c0 f2       	brcs	.-80     	; 0x2bec <MQ2_enumGetCalibrationValue+0x42>
            {
                break;
            }
        }
        
        if (Local_enumErrorStatus == MQ2_OK)
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	a1 f4       	brne	.+40     	; 0x2c6a <MQ2_enumGetCalibrationValue+0xc0>
        {
            *Copy_pu16R0Value = Local_u32Sum / MQ2_CALIBRATION_SAMPLE_TIMES;
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	ac 81       	ldd	r26, Y+4	; 0x04
    2c48:	bd 81       	ldd	r27, Y+5	; 0x05
    2c4a:	22 e3       	ldi	r18, 0x32	; 50
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__udivmodsi4>
    2c5a:	da 01       	movw	r26, r20
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c60:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c62:	91 83       	std	Z+1, r25	; 0x01
    2c64:	80 83       	st	Z, r24
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <MQ2_enumGetCalibrationValue+0xc0>
        }
    }
    else
    {
        Local_enumErrorStatus = MQ2_NOK;
    2c68:	1e 82       	std	Y+6, r1	; 0x06
    }
    
    return Local_enumErrorStatus;
    2c6a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2c6c:	2c 96       	adiw	r28, 0x0c	; 12
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <MQ2_enumInit>:

MQ2_ErrorStatus MQ2_enumInit(MQ2_Config_t *Copy_pstConfig)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <MQ2_enumInit+0x6>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	9b 83       	std	Y+3, r25	; 0x03
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    2c8e:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_pstConfig != NULL)
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	9b 81       	ldd	r25, Y+3	; 0x03
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	e1 f0       	breq	.+56     	; 0x2cd0 <MQ2_enumInit+0x52>
    {
        /* Initialize ADC */
        ADC_vInit();
    2c98:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <ADC_vInit>
        
        /* Set default values if not configured */
        if (Copy_pstConfig->Copy_u16R0 == 0)
    2c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca0:	83 81       	ldd	r24, Z+3	; 0x03
    2ca2:	94 81       	ldd	r25, Z+4	; 0x04
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	31 f4       	brne	.+12     	; 0x2cb4 <MQ2_enumInit+0x36>
        {
            Copy_pstConfig->Copy_u16R0 = MQ2_DEFAULT_R0;
    2ca8:	ea 81       	ldd	r30, Y+2	; 0x02
    2caa:	fb 81       	ldd	r31, Y+3	; 0x03
    2cac:	80 e1       	ldi	r24, 0x10	; 16
    2cae:	97 e2       	ldi	r25, 0x27	; 39
    2cb0:	94 83       	std	Z+4, r25	; 0x04
    2cb2:	83 83       	std	Z+3, r24	; 0x03
        }
        if (Copy_pstConfig->Copy_u16RL == 0)
    2cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb8:	85 81       	ldd	r24, Z+5	; 0x05
    2cba:	96 81       	ldd	r25, Z+6	; 0x06
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	31 f4       	brne	.+12     	; 0x2ccc <MQ2_enumInit+0x4e>
        {
            Copy_pstConfig->Copy_u16RL = MQ2_DEFAULT_RL;
    2cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    2cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    2cc4:	80 e1       	ldi	r24, 0x10	; 16
    2cc6:	97 e2       	ldi	r25, 0x27	; 39
    2cc8:	96 83       	std	Z+6, r25	; 0x06
    2cca:	85 83       	std	Z+5, r24	; 0x05
        }
        
        Local_enumErrorStatus = MQ2_OK;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_enumErrorStatus;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <MQ2_enumGetGasConcentration>:

MQ2_ErrorStatus MQ2_enumGetGasConcentration(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16GasValue)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	29 97       	sbiw	r28, 0x09	; 9
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	9f 83       	std	Y+7, r25	; 0x07
    2cf4:	8e 83       	std	Y+6, r24	; 0x06
    2cf6:	79 87       	std	Y+9, r23	; 0x09
    2cf8:	68 87       	std	Y+8, r22	; 0x08
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    2cfa:	1b 82       	std	Y+3, r1	; 0x03
    u16 Local_u16AnalogSignal = 0;
    2cfc:	1d 82       	std	Y+5, r1	; 0x05
    2cfe:	1c 82       	std	Y+4, r1	; 0x04
    
    if (Copy_pstConfig != NULL && Copy_pu16GasValue != NULL)
    2d00:	8e 81       	ldd	r24, Y+6	; 0x06
    2d02:	9f 81       	ldd	r25, Y+7	; 0x07
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	31 f1       	breq	.+76     	; 0x2d54 <MQ2_enumGetGasConcentration+0x76>
    2d08:	88 85       	ldd	r24, Y+8	; 0x08
    2d0a:	99 85       	ldd	r25, Y+9	; 0x09
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	11 f1       	breq	.+68     	; 0x2d54 <MQ2_enumGetGasConcentration+0x76>
    {
        /* Get raw ADC value */
        Local_enumErrorStatus = MQ2_enumGetAnalogSignal(Copy_pstConfig, &Local_u16AnalogSignal);
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	9e 01       	movw	r18, r28
    2d16:	2c 5f       	subi	r18, 0xFC	; 252
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	b9 01       	movw	r22, r18
    2d1c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <MQ2_enumGetAnalogSignal>
    2d20:	8b 83       	std	Y+3, r24	; 0x03
        
        if (Local_enumErrorStatus == MQ2_OK)
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	b1 f4       	brne	.+44     	; 0x2d54 <MQ2_enumGetGasConcentration+0x76>
        {
            /* Calculate sensor resistance */
            u16 Local_u16Rs = MQ2_u16CalculateRS(Copy_pstConfig, Local_u16AnalogSignal);
    2d28:	2c 81       	ldd	r18, Y+4	; 0x04
    2d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d30:	b9 01       	movw	r22, r18
    2d32:	0e 94 21 15 	call	0x2a42	; 0x2a42 <MQ2_u16CalculateRS>
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
            
            /* Calculate ratio */
            *Copy_pu16GasValue = MQ2_u16CalculateRatio(Local_u16Rs, Copy_pstConfig->Copy_u16R0);
    2d3a:	ee 81       	ldd	r30, Y+6	; 0x06
    2d3c:	ff 81       	ldd	r31, Y+7	; 0x07
    2d3e:	23 81       	ldd	r18, Z+3	; 0x03
    2d40:	34 81       	ldd	r19, Z+4	; 0x04
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	b9 01       	movw	r22, r18
    2d48:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <MQ2_u16CalculateRatio>
    2d4c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d4e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24
        }
    }
    
    return Local_enumErrorStatus;
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d56:	29 96       	adiw	r28, 0x09	; 9
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <MQ2_enumGetAnalogSignal>:

MQ2_ErrorStatus MQ2_enumGetAnalogSignal(MQ2_Config_t *Copy_pstConfig, u16 *Copy_pu16AnalogSignal)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <MQ2_enumGetAnalogSignal+0x6>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <MQ2_enumGetAnalogSignal+0x8>
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	9b 83       	std	Y+3, r25	; 0x03
    2d78:	8a 83       	std	Y+2, r24	; 0x02
    2d7a:	7d 83       	std	Y+5, r23	; 0x05
    2d7c:	6c 83       	std	Y+4, r22	; 0x04
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    2d7e:	19 82       	std	Y+1, r1	; 0x01
    
    if (Copy_pstConfig != NULL && Copy_pu16AnalogSignal != NULL)
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	81 f0       	breq	.+32     	; 0x2da8 <MQ2_enumGetAnalogSignal+0x40>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	61 f0       	breq	.+24     	; 0x2da8 <MQ2_enumGetAnalogSignal+0x40>
    {
        if (ADC_u8GetResultSync(Copy_pstConfig->Copy_u8Channel, Copy_pu16AnalogSignal) == 0)
    2d90:	ea 81       	ldd	r30, Y+2	; 0x02
    2d92:	fb 81       	ldd	r31, Y+3	; 0x03
    2d94:	80 81       	ld	r24, Z
    2d96:	2c 81       	ldd	r18, Y+4	; 0x04
    2d98:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	0e 94 01 19 	call	0x3202	; 0x3202 <ADC_u8GetResultSync>
    2da0:	88 23       	and	r24, r24
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <MQ2_enumGetAnalogSignal+0x40>
        {
            Local_enumErrorStatus = MQ2_OK;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    
    return Local_enumErrorStatus;
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <MQ2_enumCalibrate>:

MQ2_ErrorStatus MQ2_enumCalibrate(MQ2_Config_t *Copy_pstConfig)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <MQ2_enumCalibrate+0x6>
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <MQ2_enumCalibrate+0x8>
    2dc2:	0f 92       	push	r0
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	9d 83       	std	Y+5, r25	; 0x05
    2dca:	8c 83       	std	Y+4, r24	; 0x04
    MQ2_ErrorStatus Local_enumErrorStatus = MQ2_NOK;
    2dcc:	19 82       	std	Y+1, r1	; 0x01
    u16 Local_u16R0Value = 0;
    2dce:	1b 82       	std	Y+3, r1	; 0x03
    2dd0:	1a 82       	std	Y+2, r1	; 0x02
    
    if (Copy_pstConfig != NULL)
    2dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	91 f0       	breq	.+36     	; 0x2dfe <MQ2_enumCalibrate+0x44>
    {
        Local_enumErrorStatus = MQ2_enumGetCalibrationValue(Copy_pstConfig, &Local_u16R0Value);
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	9e 01       	movw	r18, r28
    2de0:	2e 5f       	subi	r18, 0xFE	; 254
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <MQ2_enumGetCalibrationValue>
    2dea:	89 83       	std	Y+1, r24	; 0x01
        if (Local_enumErrorStatus == MQ2_OK)
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	31 f4       	brne	.+12     	; 0x2dfe <MQ2_enumCalibrate+0x44>
        {
            Copy_pstConfig->Copy_u16R0 = Local_u16R0Value;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	ec 81       	ldd	r30, Y+4	; 0x04
    2df8:	fd 81       	ldd	r31, Y+5	; 0x05
    2dfa:	94 83       	std	Z+4, r25	; 0x04
    2dfc:	83 83       	std	Z+3, r24	; 0x03
        }
    }
    
    return Local_enumErrorStatus;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <SoilMoisture_voidInit>:
#include "soil moisture_interface.h"
#include "soil moisture_privit.h"
#include "soil moisture_config.h"

void SoilMoisture_voidInit(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    /* Initialize ADC if not already initialized */
    ADC_vInit();
    2e18:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <ADC_vInit>
}
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <SoilMoisture_u8GetRawValue>:

u8 SoilMoisture_u8GetRawValue(u16* Copy_pu16Reading)
{
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <SoilMoisture_u8GetRawValue+0x6>
    2e28:	0f 92       	push	r0
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = OK;
    2e32:	19 82       	std	Y+1, r1	; 0x01

    if(Copy_pu16Reading != NULL)
    2e34:	8a 81       	ldd	r24, Y+2	; 0x02
    2e36:	9b 81       	ldd	r25, Y+3	; 0x03
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	41 f0       	breq	.+16     	; 0x2e4c <SoilMoisture_u8GetRawValue+0x2a>
    {
        Local_u8ErrorState = ADC_u8GetResultSync(SOIL_MOISTURE_ADC_CHANNEL, Copy_pu16Reading);
    2e3c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e3e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	b9 01       	movw	r22, r18
    2e44:	0e 94 01 19 	call	0x3202	; 0x3202 <ADC_u8GetResultSync>
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <SoilMoisture_u8GetRawValue+0x2e>
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <SoilMoisture_u8GetPercentage>:

u8 SoilMoisture_u8GetPercentage(u8* Copy_pu8Percentage)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <SoilMoisture_u8GetPercentage+0x6>
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <SoilMoisture_u8GetPercentage+0x8>
    2e66:	0f 92       	push	r0
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9d 83       	std	Y+5, r25	; 0x05
    2e6e:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = OK;
    2e70:	19 82       	std	Y+1, r1	; 0x01
    u16 Local_u16RawValue = 0;
    2e72:	1b 82       	std	Y+3, r1	; 0x03
    2e74:	1a 82       	std	Y+2, r1	; 0x02

    if(Copy_pu8Percentage != NULL)
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	a1 f0       	breq	.+40     	; 0x2ea6 <SoilMoisture_u8GetPercentage+0x48>
    {
        Local_u8ErrorState = SoilMoisture_u8GetRawValue(&Local_u16RawValue);
    2e7e:	ce 01       	movw	r24, r28
    2e80:	02 96       	adiw	r24, 0x02	; 2
    2e82:	0e 94 11 17 	call	0x2e22	; 0x2e22 <SoilMoisture_u8GetRawValue>
    2e86:	89 83       	std	Y+1, r24	; 0x01

        if(Local_u8ErrorState == OK)
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	88 23       	and	r24, r24
    2e8c:	71 f4       	brne	.+28     	; 0x2eaa <SoilMoisture_u8GetPercentage+0x4c>
        {
            /* Map the raw value to percentage (inverted because higher value means drier soil) */
            *Copy_pu8Percentage = SoilMoisture_u8MapValue(Local_u16RawValue,
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	9b 81       	ldd	r25, Y+3	; 0x03
    2e92:	68 ec       	ldi	r22, 0xC8	; 200
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	4f ef       	ldi	r20, 0xFF	; 255
    2e98:	53 e0       	ldi	r21, 0x03	; 3
    2e9a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <SoilMoisture_u8MapValue>
    2e9e:	ec 81       	ldd	r30, Y+4	; 0x04
    2ea0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ea2:	80 83       	st	Z, r24
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <SoilMoisture_u8GetPercentage+0x4c>
                                                         SOIL_DRY_VALUE);
        }
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <SoilMoisture_u8IsDry>:

u8 SoilMoisture_u8IsDry(u8 Copy_u8Threshold, u8* Copy_pu8IsDry)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <SoilMoisture_u8IsDry+0x6>
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <SoilMoisture_u8IsDry+0x8>
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <SoilMoisture_u8IsDry+0xa>
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	8b 83       	std	Y+3, r24	; 0x03
    2ecc:	7d 83       	std	Y+5, r23	; 0x05
    2ece:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ErrorState = OK;
    2ed0:	19 82       	std	Y+1, r1	; 0x01
    u8 Local_u8Percentage = 0;
    2ed2:	1a 82       	std	Y+2, r1	; 0x02

    if(Copy_pu8IsDry != NULL)
    2ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	a1 f0       	breq	.+40     	; 0x2f04 <SoilMoisture_u8IsDry+0x48>
    {
        Local_u8ErrorState = SoilMoisture_u8GetPercentage(&Local_u8Percentage);
    2edc:	ce 01       	movw	r24, r28
    2ede:	02 96       	adiw	r24, 0x02	; 2
    2ee0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <SoilMoisture_u8GetPercentage>
    2ee4:	89 83       	std	Y+1, r24	; 0x01

        if(Local_u8ErrorState == OK)
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	88 23       	and	r24, r24
    2eea:	71 f4       	brne	.+28     	; 0x2f08 <SoilMoisture_u8IsDry+0x4c>
        {
            *Copy_pu8IsDry = (Local_u8Percentage >= Copy_u8Threshold) ? 1 : 0;
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	1e 82       	std	Y+6, r1	; 0x06
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	98 17       	cp	r25, r24
    2ef4:	10 f0       	brcs	.+4      	; 0x2efa <SoilMoisture_u8IsDry+0x3e>
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	8e 83       	std	Y+6, r24	; 0x06
    2efa:	ec 81       	ldd	r30, Y+4	; 0x04
    2efc:	fd 81       	ldd	r31, Y+5	; 0x05
    2efe:	8e 81       	ldd	r24, Y+6	; 0x06
    2f00:	80 83       	st	Z, r24
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <SoilMoisture_u8IsDry+0x4c>
        }
    }
    else
    {
        Local_u8ErrorState = NULL_POINTER;
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f0a:	26 96       	adiw	r28, 0x06	; 6
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <SoilMoisture_u8MapValue>:

static u8 SoilMoisture_u8MapValue(u16 Copy_u16RawValue, u16 Copy_u16Min, u16 Copy_u16Max)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	28 97       	sbiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	7e 83       	std	Y+6, r23	; 0x06
    2f36:	6d 83       	std	Y+5, r22	; 0x05
    2f38:	58 87       	std	Y+8, r21	; 0x08
    2f3a:	4f 83       	std	Y+7, r20	; 0x07
    u16 Local_u16MappedValue;

    /* Ensure the raw value is within the expected range */
    if(Copy_u16RawValue <= Copy_u16Min)
    2f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	82 17       	cp	r24, r18
    2f46:	93 07       	cpc	r25, r19
    2f48:	28 f0       	brcs	.+10     	; 0x2f54 <SoilMoisture_u8MapValue+0x38>
    {
        Local_u16MappedValue = 100;  // 100% wet
    2f4a:	84 e6       	ldi	r24, 0x64	; 100
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	2b c0       	rjmp	.+86     	; 0x2faa <SoilMoisture_u8MapValue+0x8e>
    }
    else if(Copy_u16RawValue >= Copy_u16Max)
    2f54:	2b 81       	ldd	r18, Y+3	; 0x03
    2f56:	3c 81       	ldd	r19, Y+4	; 0x04
    2f58:	8f 81       	ldd	r24, Y+7	; 0x07
    2f5a:	98 85       	ldd	r25, Y+8	; 0x08
    2f5c:	28 17       	cp	r18, r24
    2f5e:	39 07       	cpc	r19, r25
    2f60:	18 f0       	brcs	.+6      	; 0x2f68 <SoilMoisture_u8MapValue+0x4c>
    {
        Local_u16MappedValue = 0;    // 0% wet (100% dry)
    2f62:	1a 82       	std	Y+2, r1	; 0x02
    2f64:	19 82       	std	Y+1, r1	; 0x01
    2f66:	21 c0       	rjmp	.+66     	; 0x2faa <SoilMoisture_u8MapValue+0x8e>
    }
    else
    {
        /* Map the value from [min, max] to [100, 0] */
        Local_u16MappedValue = 100 - ((Copy_u16RawValue - Copy_u16Min) * 100) / (Copy_u16Max - Copy_u16Min);
    2f68:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	28 1b       	sub	r18, r24
    2f72:	39 0b       	sbc	r19, r25
    2f74:	84 e6       	ldi	r24, 0x64	; 100
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	28 9f       	mul	r18, r24
    2f7a:	a0 01       	movw	r20, r0
    2f7c:	29 9f       	mul	r18, r25
    2f7e:	50 0d       	add	r21, r0
    2f80:	38 9f       	mul	r19, r24
    2f82:	50 0d       	add	r21, r0
    2f84:	11 24       	eor	r1, r1
    2f86:	2f 81       	ldd	r18, Y+7	; 0x07
    2f88:	38 85       	ldd	r19, Y+8	; 0x08
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	28 1b       	sub	r18, r24
    2f90:	39 0b       	sbc	r19, r25
    2f92:	ca 01       	movw	r24, r20
    2f94:	b9 01       	movw	r22, r18
    2f96:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__udivmodhi4>
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9c 01       	movw	r18, r24
    2f9e:	84 e6       	ldi	r24, 0x64	; 100
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	82 1b       	sub	r24, r18
    2fa4:	93 0b       	sbc	r25, r19
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    }

    return (u8)Local_u16MappedValue;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fac:	28 96       	adiw	r28, 0x08	; 8
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    2fc6:	a7 e2       	ldi	r26, 0x27	; 39
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e7 e2       	ldi	r30, 0x27	; 39
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	80 64       	ori	r24, 0x40	; 64
    2fd2:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    2fd4:	a7 e2       	ldi	r26, 0x27	; 39
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e7 e2       	ldi	r30, 0x27	; 39
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8f 77       	andi	r24, 0x7F	; 127
    2fe0:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    2fe2:	a7 e2       	ldi	r26, 0x27	; 39
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e7 e2       	ldi	r30, 0x27	; 39
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8f 7d       	andi	r24, 0xDF	; 223
    2fee:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    2ff0:	a6 e2       	ldi	r26, 0x26	; 38
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e6 e2       	ldi	r30, 0x26	; 38
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 7f       	andi	r24, 0xF8	; 248
    2ffc:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    2ffe:	a6 e2       	ldi	r26, 0x26	; 38
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e6 e2       	ldi	r30, 0x26	; 38
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	87 60       	ori	r24, 0x07	; 7
    300a:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    300c:	a6 e2       	ldi	r26, 0x26	; 38
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e6 e2       	ldi	r30, 0x26	; 38
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	8f 7d       	andi	r24, 0xDF	; 223
    3018:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    301a:	a6 e2       	ldi	r26, 0x26	; 38
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e6 e2       	ldi	r30, 0x26	; 38
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	80 68       	ori	r24, 0x80	; 128
    3026:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3028:	a6 e2       	ldi	r26, 0x26	; 38
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e6 e2       	ldi	r30, 0x26	; 38
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	87 7f       	andi	r24, 0xF7	; 247
    3034:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    3044:	a6 e2       	ldi	r26, 0x26	; 38
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e6 e2       	ldi	r30, 0x26	; 38
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	80 68       	ori	r24, 0x80	; 128
    3050:	8c 93       	st	X, r24
}
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    3060:	a6 e2       	ldi	r26, 0x26	; 38
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e6 e2       	ldi	r30, 0x26	; 38
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	8f 77       	andi	r24, 0x7F	; 127
    306c:	8c 93       	st	X, r24
}
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    307c:	a6 e2       	ldi	r26, 0x26	; 38
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e6 e2       	ldi	r30, 0x26	; 38
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	88 60       	ori	r24, 0x08	; 8
    3088:	8c 93       	st	X, r24
}
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3098:	a6 e2       	ldi	r26, 0x26	; 38
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e6 e2       	ldi	r30, 0x26	; 38
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	87 7f       	andi	r24, 0xF7	; 247
    30a4:	8c 93       	st	X, r24
}
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <ADC_u8VoltageReference+0x6>
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	88 23       	and	r24, r24
    30c0:	31 f0       	breq	.+12     	; 0x30ce <ADC_u8VoltageReference+0x22>
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	85 30       	cpi	r24, 0x05	; 5
    30c6:	19 f0       	breq	.+6      	; 0x30ce <ADC_u8VoltageReference+0x22>
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	83 30       	cpi	r24, 0x03	; 3
    30cc:	e1 f4       	brne	.+56     	; 0x3106 <ADC_u8VoltageReference+0x5a>
  {
    ADMUX &= 0b00111111;
    30ce:	a7 e2       	ldi	r26, 0x27	; 39
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e7 e2       	ldi	r30, 0x27	; 39
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8f 73       	andi	r24, 0x3F	; 63
    30da:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    30dc:	a7 e2       	ldi	r26, 0x27	; 39
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e7 e2       	ldi	r30, 0x27	; 39
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	28 2f       	mov	r18, r24
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	00 24       	eor	r0, r0
    30f0:	96 95       	lsr	r25
    30f2:	87 95       	ror	r24
    30f4:	07 94       	ror	r0
    30f6:	96 95       	lsr	r25
    30f8:	87 95       	ror	r24
    30fa:	07 94       	ror	r0
    30fc:	98 2f       	mov	r25, r24
    30fe:	80 2d       	mov	r24, r0
    3100:	82 2b       	or	r24, r18
    3102:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    3104:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    3106:	89 81       	ldd	r24, Y+1	; 0x01
}
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	00 d0       	rcall	.+0      	; 0x3118 <ADC_u8SetPrescaler+0x6>
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    3122:	8a 81       	ldd	r24, Y+2	; 0x02
    3124:	88 30       	cpi	r24, 0x08	; 8
    3126:	80 f4       	brcc	.+32     	; 0x3148 <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    3128:	a6 e2       	ldi	r26, 0x26	; 38
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e6 e2       	ldi	r30, 0x26	; 38
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	88 7f       	andi	r24, 0xF8	; 248
    3134:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    3136:	a6 e2       	ldi	r26, 0x26	; 38
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e6 e2       	ldi	r30, 0x26	; 38
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	90 81       	ld	r25, Z
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	89 2b       	or	r24, r25
    3144:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    3146:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
}
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <ADC_u8SetAdjustment+0x6>
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    3160:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	88 23       	and	r24, r24
    3166:	41 f4       	brne	.+16     	; 0x3178 <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    3168:	a7 e2       	ldi	r26, 0x27	; 39
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e7 e2       	ldi	r30, 0x27	; 39
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8f 7d       	andi	r24, 0xDF	; 223
    3174:	8c 93       	st	X, r24
    3176:	0d c0       	rjmp	.+26     	; 0x3192 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	81 30       	cpi	r24, 0x01	; 1
    317c:	41 f4       	brne	.+16     	; 0x318e <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    317e:	a7 e2       	ldi	r26, 0x27	; 39
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e7 e2       	ldi	r30, 0x27	; 39
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	80 62       	ori	r24, 0x20	; 32
    318a:	8c 93       	st	X, r24
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <ADC_u8SetTriggerSource+0x6>
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    31aa:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	88 30       	cpi	r24, 0x08	; 8
    31b0:	41 f4       	brne	.+16     	; 0x31c2 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    31b2:	a6 e2       	ldi	r26, 0x26	; 38
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e6 e2       	ldi	r30, 0x26	; 38
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8f 7d       	andi	r24, 0xDF	; 223
    31be:	8c 93       	st	X, r24
    31c0:	1a c0       	rjmp	.+52     	; 0x31f6 <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	88 30       	cpi	r24, 0x08	; 8
    31c6:	a8 f4       	brcc	.+42     	; 0x31f2 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    31c8:	a6 e2       	ldi	r26, 0x26	; 38
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e6 e2       	ldi	r30, 0x26	; 38
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	80 62       	ori	r24, 0x20	; 32
    31d4:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    31d6:	a0 e5       	ldi	r26, 0x50	; 80
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e0 e5       	ldi	r30, 0x50	; 80
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8f 71       	andi	r24, 0x1F	; 31
    31e2:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    31e4:	a0 e5       	ldi	r26, 0x50	; 80
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e0 e5       	ldi	r30, 0x50	; 80
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8c 93       	st	X, r24
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	28 97       	sbiw	r28, 0x08	; 8
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	8e 83       	std	Y+6, r24	; 0x06
    3218:	78 87       	std	Y+8, r23	; 0x08
    321a:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    321c:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    321e:	19 82       	std	Y+1, r1	; 0x01
    3220:	1a 82       	std	Y+2, r1	; 0x02
    3222:	1b 82       	std	Y+3, r1	; 0x03
    3224:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    3226:	8f 81       	ldd	r24, Y+7	; 0x07
    3228:	98 85       	ldd	r25, Y+8	; 0x08
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	09 f4       	brne	.+2      	; 0x3230 <ADC_u8GetResultSync+0x2e>
    322e:	72 c0       	rjmp	.+228    	; 0x3314 <ADC_u8GetResultSync+0x112>
  {
    if (ADC_u8State == IDLE)
    3230:	80 91 a8 01 	lds	r24, 0x01A8
    3234:	88 23       	and	r24, r24
    3236:	09 f0       	breq	.+2      	; 0x323a <ADC_u8GetResultSync+0x38>
    3238:	6a c0       	rjmp	.+212    	; 0x330e <ADC_u8GetResultSync+0x10c>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	80 93 a8 01 	sts	0x01A8, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3240:	8e 81       	ldd	r24, Y+6	; 0x06
    3242:	80 32       	cpi	r24, 0x20	; 32
    3244:	78 f4       	brcc	.+30     	; 0x3264 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    3246:	a7 e2       	ldi	r26, 0x27	; 39
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e7 e2       	ldi	r30, 0x27	; 39
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	80 7e       	andi	r24, 0xE0	; 224
    3252:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3254:	a7 e2       	ldi	r26, 0x27	; 39
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e7 e2       	ldi	r30, 0x27	; 39
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	90 81       	ld	r25, Z
    325e:	8e 81       	ldd	r24, Y+6	; 0x06
    3260:	89 2b       	or	r24, r25
    3262:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3264:	a6 e2       	ldi	r26, 0x26	; 38
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e6 e2       	ldi	r30, 0x26	; 38
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 64       	ori	r24, 0x40	; 64
    3270:	8c 93       	st	X, r24
    3272:	0b c0       	rjmp	.+22     	; 0x328a <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	9a 81       	ldd	r25, Y+2	; 0x02
    3278:	ab 81       	ldd	r26, Y+3	; 0x03
    327a:	bc 81       	ldd	r27, Y+4	; 0x04
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	a1 1d       	adc	r26, r1
    3280:	b1 1d       	adc	r27, r1
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	9a 83       	std	Y+2, r25	; 0x02
    3286:	ab 83       	std	Y+3, r26	; 0x03
    3288:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    328a:	e6 e2       	ldi	r30, 0x26	; 38
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	82 95       	swap	r24
    3292:	8f 70       	andi	r24, 0x0F	; 15
    3294:	88 2f       	mov	r24, r24
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	81 70       	andi	r24, 0x01	; 1
    329a:	90 70       	andi	r25, 0x00	; 0
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	61 f4       	brne	.+24     	; 0x32b8 <ADC_u8GetResultSync+0xb6>
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	ab 81       	ldd	r26, Y+3	; 0x03
    32a6:	bc 81       	ldd	r27, Y+4	; 0x04
    32a8:	80 35       	cpi	r24, 0x50	; 80
    32aa:	23 ec       	ldi	r18, 0xC3	; 195
    32ac:	92 07       	cpc	r25, r18
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	a2 07       	cpc	r26, r18
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	b2 07       	cpc	r27, r18
    32b6:	f0 f2       	brcs	.-68     	; 0x3274 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	ab 81       	ldd	r26, Y+3	; 0x03
    32be:	bc 81       	ldd	r27, Y+4	; 0x04
    32c0:	80 35       	cpi	r24, 0x50	; 80
    32c2:	23 ec       	ldi	r18, 0xC3	; 195
    32c4:	92 07       	cpc	r25, r18
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	a2 07       	cpc	r26, r18
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	b2 07       	cpc	r27, r18
    32ce:	19 f4       	brne	.+6      	; 0x32d6 <ADC_u8GetResultSync+0xd4>
      {
        Local_u8ErrorState = NOK;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	19 c0       	rjmp	.+50     	; 0x3308 <ADC_u8GetResultSync+0x106>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    32d6:	a6 e2       	ldi	r26, 0x26	; 38
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e6 e2       	ldi	r30, 0x26	; 38
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	80 61       	ori	r24, 0x10	; 16
    32e2:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    32e4:	e4 e2       	ldi	r30, 0x24	; 36
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	28 2f       	mov	r18, r24
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	e5 e2       	ldi	r30, 0x25	; 37
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	98 2f       	mov	r25, r24
    32fa:	88 27       	eor	r24, r24
    32fc:	82 2b       	or	r24, r18
    32fe:	93 2b       	or	r25, r19
    3300:	ef 81       	ldd	r30, Y+7	; 0x07
    3302:	f8 85       	ldd	r31, Y+8	; 0x08
    3304:	91 83       	std	Z+1, r25	; 0x01
    3306:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    3308:	10 92 a8 01 	sts	0x01A8, r1
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <ADC_u8GetResultSync+0x116>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    330e:	83 e0       	ldi	r24, 0x03	; 3
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <ADC_u8GetResultSync+0x116>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
}
    331a:	28 96       	adiw	r28, 0x08	; 8
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	00 d0       	rcall	.+0      	; 0x3332 <ADC_u8StartConversionAsynch+0x6>
    3332:	00 d0       	rcall	.+0      	; 0x3334 <ADC_u8StartConversionAsynch+0x8>
    3334:	00 d0       	rcall	.+0      	; 0x3336 <ADC_u8StartConversionAsynch+0xa>
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	8a 83       	std	Y+2, r24	; 0x02
    333c:	7c 83       	std	Y+4, r23	; 0x04
    333e:	6b 83       	std	Y+3, r22	; 0x03
    3340:	5e 83       	std	Y+6, r21	; 0x06
    3342:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    3344:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	e9 f1       	breq	.+122    	; 0x33c8 <ADC_u8StartConversionAsynch+0x9c>
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	c9 f1       	breq	.+114    	; 0x33c8 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    3356:	80 91 a8 01 	lds	r24, 0x01A8
    335a:	88 23       	and	r24, r24
    335c:	91 f5       	brne	.+100    	; 0x33c2 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	80 93 a8 01 	sts	0x01A8, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    3364:	10 92 a9 01 	sts	0x01A9, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	90 93 a5 01 	sts	0x01A5, r25
    3370:	80 93 a4 01 	sts	0x01A4, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	90 93 a7 01 	sts	0x01A7, r25
    337c:	80 93 a6 01 	sts	0x01A6, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	80 32       	cpi	r24, 0x20	; 32
    3384:	78 f4       	brcc	.+30     	; 0x33a4 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    3386:	a7 e2       	ldi	r26, 0x27	; 39
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e7 e2       	ldi	r30, 0x27	; 39
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	80 7e       	andi	r24, 0xE0	; 224
    3392:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3394:	a7 e2       	ldi	r26, 0x27	; 39
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e7 e2       	ldi	r30, 0x27	; 39
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	90 81       	ld	r25, Z
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	89 2b       	or	r24, r25
    33a2:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    33a4:	a6 e2       	ldi	r26, 0x26	; 38
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e6 e2       	ldi	r30, 0x26	; 38
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	80 64       	ori	r24, 0x40	; 64
    33b0:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    33b2:	a6 e2       	ldi	r26, 0x26	; 38
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	e6 e2       	ldi	r30, 0x26	; 38
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	88 60       	ori	r24, 0x08	; 8
    33be:	8c 93       	st	X, r24
    33c0:	05 c0       	rjmp	.+10     	; 0x33cc <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    33c2:	83 e0       	ldi	r24, 0x03	; 3
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ce:	26 96       	adiw	r28, 0x06	; 6
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	08 95       	ret

000033e0 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <ADC_u8StartChainAsynch+0x6>
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	9b 83       	std	Y+3, r25	; 0x03
    33ee:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    33f0:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	09 f4       	brne	.+2      	; 0x33fc <ADC_u8StartChainAsynch+0x1c>
    33fa:	79 c0       	rjmp	.+242    	; 0x34ee <ADC_u8StartChainAsynch+0x10e>
    33fc:	ea 81       	ldd	r30, Y+2	; 0x02
    33fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	09 f4       	brne	.+2      	; 0x340a <ADC_u8StartChainAsynch+0x2a>
    3408:	72 c0       	rjmp	.+228    	; 0x34ee <ADC_u8StartChainAsynch+0x10e>
    340a:	ea 81       	ldd	r30, Y+2	; 0x02
    340c:	fb 81       	ldd	r31, Y+3	; 0x03
    340e:	85 81       	ldd	r24, Z+5	; 0x05
    3410:	96 81       	ldd	r25, Z+6	; 0x06
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	09 f4       	brne	.+2      	; 0x3418 <ADC_u8StartChainAsynch+0x38>
    3416:	6b c0       	rjmp	.+214    	; 0x34ee <ADC_u8StartChainAsynch+0x10e>
    3418:	ea 81       	ldd	r30, Y+2	; 0x02
    341a:	fb 81       	ldd	r31, Y+3	; 0x03
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	09 f4       	brne	.+2      	; 0x3426 <ADC_u8StartChainAsynch+0x46>
    3424:	64 c0       	rjmp	.+200    	; 0x34ee <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    3426:	80 91 a8 01 	lds	r24, 0x01A8
    342a:	88 23       	and	r24, r24
    342c:	09 f0       	breq	.+2      	; 0x3430 <ADC_u8StartChainAsynch+0x50>
    342e:	5c c0       	rjmp	.+184    	; 0x34e8 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 a8 01 	sts	0x01A8, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 93 a9 01 	sts	0x01A9, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    343c:	ea 81       	ldd	r30, Y+2	; 0x02
    343e:	fb 81       	ldd	r31, Y+3	; 0x03
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	90 93 a5 01 	sts	0x01A5, r25
    3448:	80 93 a4 01 	sts	0x01A4, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    344c:	ea 81       	ldd	r30, Y+2	; 0x02
    344e:	fb 81       	ldd	r31, Y+3	; 0x03
    3450:	80 81       	ld	r24, Z
    3452:	91 81       	ldd	r25, Z+1	; 0x01
    3454:	90 93 ab 01 	sts	0x01AB, r25
    3458:	80 93 aa 01 	sts	0x01AA, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    345c:	ea 81       	ldd	r30, Y+2	; 0x02
    345e:	fb 81       	ldd	r31, Y+3	; 0x03
    3460:	84 81       	ldd	r24, Z+4	; 0x04
    3462:	80 93 ac 01 	sts	0x01AC, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    3466:	ea 81       	ldd	r30, Y+2	; 0x02
    3468:	fb 81       	ldd	r31, Y+3	; 0x03
    346a:	85 81       	ldd	r24, Z+5	; 0x05
    346c:	96 81       	ldd	r25, Z+6	; 0x06
    346e:	90 93 a7 01 	sts	0x01A7, r25
    3472:	80 93 a6 01 	sts	0x01A6, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    3476:	10 92 ad 01 	sts	0x01AD, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    347a:	20 91 aa 01 	lds	r18, 0x01AA
    347e:	30 91 ab 01 	lds	r19, 0x01AB
    3482:	80 91 ad 01 	lds	r24, 0x01AD
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	f9 01       	movw	r30, r18
    348c:	e8 0f       	add	r30, r24
    348e:	f9 1f       	adc	r31, r25
    3490:	80 81       	ld	r24, Z
    3492:	80 32       	cpi	r24, 0x20	; 32
    3494:	d0 f4       	brcc	.+52     	; 0x34ca <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    3496:	a7 e2       	ldi	r26, 0x27	; 39
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e7 e2       	ldi	r30, 0x27	; 39
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	80 7e       	andi	r24, 0xE0	; 224
    34a2:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    34a4:	a7 e2       	ldi	r26, 0x27	; 39
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e7 e2       	ldi	r30, 0x27	; 39
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	40 81       	ld	r20, Z
    34ae:	20 91 aa 01 	lds	r18, 0x01AA
    34b2:	30 91 ab 01 	lds	r19, 0x01AB
    34b6:	80 91 ad 01 	lds	r24, 0x01AD
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	f9 01       	movw	r30, r18
    34c0:	e8 0f       	add	r30, r24
    34c2:	f9 1f       	adc	r31, r25
    34c4:	80 81       	ld	r24, Z
    34c6:	84 2b       	or	r24, r20
    34c8:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    34ca:	a6 e2       	ldi	r26, 0x26	; 38
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e6 e2       	ldi	r30, 0x26	; 38
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	80 64       	ori	r24, 0x40	; 64
    34d6:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    34d8:	a6 e2       	ldi	r26, 0x26	; 38
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e6 e2       	ldi	r30, 0x26	; 38
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	88 60       	ori	r24, 0x08	; 8
    34e4:	8c 93       	st	X, r24
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    34e8:	83 e0       	ldi	r24, 0x03	; 3
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    3500:	1f 92       	push	r1
    3502:	0f 92       	push	r0
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	0f 92       	push	r0
    3508:	11 24       	eor	r1, r1
    350a:	2f 93       	push	r18
    350c:	3f 93       	push	r19
    350e:	4f 93       	push	r20
    3510:	5f 93       	push	r21
    3512:	6f 93       	push	r22
    3514:	7f 93       	push	r23
    3516:	8f 93       	push	r24
    3518:	9f 93       	push	r25
    351a:	af 93       	push	r26
    351c:	bf 93       	push	r27
    351e:	ef 93       	push	r30
    3520:	ff 93       	push	r31
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    352a:	80 91 a9 01 	lds	r24, 0x01A9
    352e:	88 23       	and	r24, r24
    3530:	19 f5       	brne	.+70     	; 0x3578 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    3532:	a0 91 a4 01 	lds	r26, 0x01A4
    3536:	b0 91 a5 01 	lds	r27, 0x01A5
    353a:	e4 e2       	ldi	r30, 0x24	; 36
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	e5 e2       	ldi	r30, 0x25	; 37
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	98 2f       	mov	r25, r24
    3550:	88 27       	eor	r24, r24
    3552:	82 2b       	or	r24, r18
    3554:	93 2b       	or	r25, r19
    3556:	8d 93       	st	X+, r24
    3558:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    355a:	10 92 a8 01 	sts	0x01A8, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    355e:	e0 91 a6 01 	lds	r30, 0x01A6
    3562:	f0 91 a7 01 	lds	r31, 0x01A7
    3566:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3568:	a6 e2       	ldi	r26, 0x26	; 38
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	e6 e2       	ldi	r30, 0x26	; 38
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	87 7f       	andi	r24, 0xF7	; 247
    3574:	8c 93       	st	X, r24
    3576:	6c c0       	rjmp	.+216    	; 0x3650 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    3578:	80 91 a9 01 	lds	r24, 0x01A9
    357c:	81 30       	cpi	r24, 0x01	; 1
    357e:	09 f0       	breq	.+2      	; 0x3582 <__vector_16+0x82>
    3580:	67 c0       	rjmp	.+206    	; 0x3650 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    3582:	20 91 a4 01 	lds	r18, 0x01A4
    3586:	30 91 a5 01 	lds	r19, 0x01A5
    358a:	80 91 ad 01 	lds	r24, 0x01AD
    358e:	88 2f       	mov	r24, r24
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	d9 01       	movw	r26, r18
    3598:	a8 0f       	add	r26, r24
    359a:	b9 1f       	adc	r27, r25
    359c:	e4 e2       	ldi	r30, 0x24	; 36
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	28 2f       	mov	r18, r24
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	e5 e2       	ldi	r30, 0x25	; 37
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	98 2f       	mov	r25, r24
    35b2:	88 27       	eor	r24, r24
    35b4:	82 2b       	or	r24, r18
    35b6:	93 2b       	or	r25, r19
    35b8:	11 96       	adiw	r26, 0x01	; 1
    35ba:	9c 93       	st	X, r25
    35bc:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    35be:	80 91 ad 01 	lds	r24, 0x01AD
    35c2:	8f 5f       	subi	r24, 0xFF	; 255
    35c4:	80 93 ad 01 	sts	0x01AD, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    35c8:	90 91 ad 01 	lds	r25, 0x01AD
    35cc:	80 91 ac 01 	lds	r24, 0x01AC
    35d0:	98 17       	cp	r25, r24
    35d2:	79 f4       	brne	.+30     	; 0x35f2 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    35d4:	10 92 a8 01 	sts	0x01A8, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    35d8:	e0 91 a6 01 	lds	r30, 0x01A6
    35dc:	f0 91 a7 01 	lds	r31, 0x01A7
    35e0:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    35e2:	a6 e2       	ldi	r26, 0x26	; 38
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e6 e2       	ldi	r30, 0x26	; 38
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	87 7f       	andi	r24, 0xF7	; 247
    35ee:	8c 93       	st	X, r24
    35f0:	2f c0       	rjmp	.+94     	; 0x3650 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    35f2:	20 91 aa 01 	lds	r18, 0x01AA
    35f6:	30 91 ab 01 	lds	r19, 0x01AB
    35fa:	80 91 ad 01 	lds	r24, 0x01AD
    35fe:	88 2f       	mov	r24, r24
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	f9 01       	movw	r30, r18
    3604:	e8 0f       	add	r30, r24
    3606:	f9 1f       	adc	r31, r25
    3608:	80 81       	ld	r24, Z
    360a:	80 32       	cpi	r24, 0x20	; 32
    360c:	d0 f4       	brcc	.+52     	; 0x3642 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    360e:	a7 e2       	ldi	r26, 0x27	; 39
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e7 e2       	ldi	r30, 0x27	; 39
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	80 7e       	andi	r24, 0xE0	; 224
    361a:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    361c:	a7 e2       	ldi	r26, 0x27	; 39
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e7 e2       	ldi	r30, 0x27	; 39
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	40 81       	ld	r20, Z
    3626:	20 91 aa 01 	lds	r18, 0x01AA
    362a:	30 91 ab 01 	lds	r19, 0x01AB
    362e:	80 91 ad 01 	lds	r24, 0x01AD
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	f9 01       	movw	r30, r18
    3638:	e8 0f       	add	r30, r24
    363a:	f9 1f       	adc	r31, r25
    363c:	80 81       	ld	r24, Z
    363e:	84 2b       	or	r24, r20
    3640:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3642:	a6 e2       	ldi	r26, 0x26	; 38
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	e6 e2       	ldi	r30, 0x26	; 38
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	80 64       	ori	r24, 0x40	; 64
    364e:	8c 93       	st	X, r24
    }
  }
}
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	ff 91       	pop	r31
    3656:	ef 91       	pop	r30
    3658:	bf 91       	pop	r27
    365a:	af 91       	pop	r26
    365c:	9f 91       	pop	r25
    365e:	8f 91       	pop	r24
    3660:	7f 91       	pop	r23
    3662:	6f 91       	pop	r22
    3664:	5f 91       	pop	r21
    3666:	4f 91       	pop	r20
    3668:	3f 91       	pop	r19
    366a:	2f 91       	pop	r18
    366c:	0f 90       	pop	r0
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	0f 90       	pop	r0
    3672:	1f 90       	pop	r1
    3674:	18 95       	reti

00003676 <DIO_enumSetPinDirection>:


//void DIO_voidSetPinDirection  ( u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Direction ){

DIO_ErrorStatus DIO_enumSetPinDirection  (u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Direction )
{
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	28 97       	sbiw	r28, 0x08	; 8
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	8a 83       	std	Y+2, r24	; 0x02
    368c:	6b 83       	std	Y+3, r22	; 0x03
    368e:	4c 83       	std	Y+4, r20	; 0x04
 DIO_ErrorStatus loc_enumState =DIO_OK ;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7)){
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	84 30       	cpi	r24, 0x04	; 4
    3698:	08 f0       	brcs	.+2      	; 0x369c <DIO_enumSetPinDirection+0x26>
    369a:	f1 c0       	rjmp	.+482    	; 0x387e <DIO_enumSetPinDirection+0x208>
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	88 30       	cpi	r24, 0x08	; 8
    36a0:	08 f0       	brcs	.+2      	; 0x36a4 <DIO_enumSetPinDirection+0x2e>
    36a2:	ed c0       	rjmp	.+474    	; 0x387e <DIO_enumSetPinDirection+0x208>

	if(copy_u8Direction == DIO_PIN_OUTPUT ){
    36a4:	8c 81       	ldd	r24, Y+4	; 0x04
    36a6:	81 30       	cpi	r24, 0x01	; 1
    36a8:	09 f0       	breq	.+2      	; 0x36ac <DIO_enumSetPinDirection+0x36>
    36aa:	6f c0       	rjmp	.+222    	; 0x378a <DIO_enumSetPinDirection+0x114>
	switch(copy_u8PORT){
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	38 87       	std	Y+8, r19	; 0x08
    36b4:	2f 83       	std	Y+7, r18	; 0x07
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	98 85       	ldd	r25, Y+8	; 0x08
    36ba:	81 30       	cpi	r24, 0x01	; 1
    36bc:	91 05       	cpc	r25, r1
    36be:	49 f1       	breq	.+82     	; 0x3712 <DIO_enumSetPinDirection+0x9c>
    36c0:	2f 81       	ldd	r18, Y+7	; 0x07
    36c2:	38 85       	ldd	r19, Y+8	; 0x08
    36c4:	22 30       	cpi	r18, 0x02	; 2
    36c6:	31 05       	cpc	r19, r1
    36c8:	2c f4       	brge	.+10     	; 0x36d4 <DIO_enumSetPinDirection+0x5e>
    36ca:	8f 81       	ldd	r24, Y+7	; 0x07
    36cc:	98 85       	ldd	r25, Y+8	; 0x08
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	61 f0       	breq	.+24     	; 0x36ea <DIO_enumSetPinDirection+0x74>
    36d2:	d6 c0       	rjmp	.+428    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
    36d4:	2f 81       	ldd	r18, Y+7	; 0x07
    36d6:	38 85       	ldd	r19, Y+8	; 0x08
    36d8:	22 30       	cpi	r18, 0x02	; 2
    36da:	31 05       	cpc	r19, r1
    36dc:	71 f1       	breq	.+92     	; 0x373a <DIO_enumSetPinDirection+0xc4>
    36de:	8f 81       	ldd	r24, Y+7	; 0x07
    36e0:	98 85       	ldd	r25, Y+8	; 0x08
    36e2:	83 30       	cpi	r24, 0x03	; 3
    36e4:	91 05       	cpc	r25, r1
    36e6:	e9 f1       	breq	.+122    	; 0x3762 <DIO_enumSetPinDirection+0xec>
    36e8:	cb c0       	rjmp	.+406    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTA : SET_BIT(DDRA_REG, copy_u8PIN );break;
    36ea:	aa e3       	ldi	r26, 0x3A	; 58
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ea e3       	ldi	r30, 0x3A	; 58
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	48 2f       	mov	r20, r24
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	02 2e       	mov	r0, r18
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <DIO_enumSetPinDirection+0x92>
    3704:	88 0f       	add	r24, r24
    3706:	99 1f       	adc	r25, r25
    3708:	0a 94       	dec	r0
    370a:	e2 f7       	brpl	.-8      	; 0x3704 <DIO_enumSetPinDirection+0x8e>
    370c:	84 2b       	or	r24, r20
    370e:	8c 93       	st	X, r24
    3710:	b7 c0       	rjmp	.+366    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTB : SET_BIT(DDRB_REG, copy_u8PIN );break;
    3712:	a7 e3       	ldi	r26, 0x37	; 55
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e7 e3       	ldi	r30, 0x37	; 55
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	48 2f       	mov	r20, r24
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	02 2e       	mov	r0, r18
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <DIO_enumSetPinDirection+0xba>
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	0a 94       	dec	r0
    3732:	e2 f7       	brpl	.-8      	; 0x372c <DIO_enumSetPinDirection+0xb6>
    3734:	84 2b       	or	r24, r20
    3736:	8c 93       	st	X, r24
    3738:	a3 c0       	rjmp	.+326    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTC : SET_BIT(DDRC_REG, copy_u8PIN );break;
    373a:	a4 e3       	ldi	r26, 0x34	; 52
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e4 e3       	ldi	r30, 0x34	; 52
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	48 2f       	mov	r20, r24
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	28 2f       	mov	r18, r24
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	02 2e       	mov	r0, r18
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <DIO_enumSetPinDirection+0xe2>
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	0a 94       	dec	r0
    375a:	e2 f7       	brpl	.-8      	; 0x3754 <DIO_enumSetPinDirection+0xde>
    375c:	84 2b       	or	r24, r20
    375e:	8c 93       	st	X, r24
    3760:	8f c0       	rjmp	.+286    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTD : SET_BIT(DDRD_REG, copy_u8PIN );break;
    3762:	a1 e3       	ldi	r26, 0x31	; 49
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	e1 e3       	ldi	r30, 0x31	; 49
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	48 2f       	mov	r20, r24
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	02 2e       	mov	r0, r18
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <DIO_enumSetPinDirection+0x10a>
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	0a 94       	dec	r0
    3782:	e2 f7       	brpl	.-8      	; 0x377c <DIO_enumSetPinDirection+0x106>
    3784:	84 2b       	or	r24, r20
    3786:	8c 93       	st	X, r24
    3788:	7b c0       	rjmp	.+246    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	}
	}
	else if(copy_u8Direction == DIO_PIN_INPUT ){
    378a:	8c 81       	ldd	r24, Y+4	; 0x04
    378c:	88 23       	and	r24, r24
    378e:	09 f0       	breq	.+2      	; 0x3792 <DIO_enumSetPinDirection+0x11c>
    3790:	74 c0       	rjmp	.+232    	; 0x387a <DIO_enumSetPinDirection+0x204>

		switch(copy_u8PORT){
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	3e 83       	std	Y+6, r19	; 0x06
    379a:	2d 83       	std	Y+5, r18	; 0x05
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	81 30       	cpi	r24, 0x01	; 1
    37a2:	91 05       	cpc	r25, r1
    37a4:	59 f1       	breq	.+86     	; 0x37fc <DIO_enumSetPinDirection+0x186>
    37a6:	2d 81       	ldd	r18, Y+5	; 0x05
    37a8:	3e 81       	ldd	r19, Y+6	; 0x06
    37aa:	22 30       	cpi	r18, 0x02	; 2
    37ac:	31 05       	cpc	r19, r1
    37ae:	2c f4       	brge	.+10     	; 0x37ba <DIO_enumSetPinDirection+0x144>
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	69 f0       	breq	.+26     	; 0x37d2 <DIO_enumSetPinDirection+0x15c>
    37b8:	63 c0       	rjmp	.+198    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
    37ba:	2d 81       	ldd	r18, Y+5	; 0x05
    37bc:	3e 81       	ldd	r19, Y+6	; 0x06
    37be:	22 30       	cpi	r18, 0x02	; 2
    37c0:	31 05       	cpc	r19, r1
    37c2:	89 f1       	breq	.+98     	; 0x3826 <DIO_enumSetPinDirection+0x1b0>
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	83 30       	cpi	r24, 0x03	; 3
    37ca:	91 05       	cpc	r25, r1
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <DIO_enumSetPinDirection+0x15a>
    37ce:	40 c0       	rjmp	.+128    	; 0x3850 <DIO_enumSetPinDirection+0x1da>
    37d0:	57 c0       	rjmp	.+174    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTA : CLR_BIT(DDRA_REG, copy_u8PIN );break;
    37d2:	aa e3       	ldi	r26, 0x3A	; 58
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	ea e3       	ldi	r30, 0x3A	; 58
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	48 2f       	mov	r20, r24
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	02 2e       	mov	r0, r18
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <DIO_enumSetPinDirection+0x17a>
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	0a 94       	dec	r0
    37f2:	e2 f7       	brpl	.-8      	; 0x37ec <DIO_enumSetPinDirection+0x176>
    37f4:	80 95       	com	r24
    37f6:	84 23       	and	r24, r20
    37f8:	8c 93       	st	X, r24
    37fa:	42 c0       	rjmp	.+132    	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTB : CLR_BIT(DDRB_REG, copy_u8PIN );break;
    37fc:	a7 e3       	ldi	r26, 0x37	; 55
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e7 e3       	ldi	r30, 0x37	; 55
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	48 2f       	mov	r20, r24
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	28 2f       	mov	r18, r24
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	02 2e       	mov	r0, r18
    3814:	02 c0       	rjmp	.+4      	; 0x381a <DIO_enumSetPinDirection+0x1a4>
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	0a 94       	dec	r0
    381c:	e2 f7       	brpl	.-8      	; 0x3816 <DIO_enumSetPinDirection+0x1a0>
    381e:	80 95       	com	r24
    3820:	84 23       	and	r24, r20
    3822:	8c 93       	st	X, r24
    3824:	2d c0       	rjmp	.+90     	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTC : CLR_BIT(DDRC_REG, copy_u8PIN );break;
    3826:	a4 e3       	ldi	r26, 0x34	; 52
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e4 e3       	ldi	r30, 0x34	; 52
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	48 2f       	mov	r20, r24
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	28 2f       	mov	r18, r24
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	02 2e       	mov	r0, r18
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <DIO_enumSetPinDirection+0x1ce>
    3840:	88 0f       	add	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	0a 94       	dec	r0
    3846:	e2 f7       	brpl	.-8      	; 0x3840 <DIO_enumSetPinDirection+0x1ca>
    3848:	80 95       	com	r24
    384a:	84 23       	and	r24, r20
    384c:	8c 93       	st	X, r24
    384e:	18 c0       	rjmp	.+48     	; 0x3880 <DIO_enumSetPinDirection+0x20a>
	case DIO_PORTD : CLR_BIT(DDRD_REG, copy_u8PIN );break;
    3850:	a1 e3       	ldi	r26, 0x31	; 49
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	e1 e3       	ldi	r30, 0x31	; 49
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	48 2f       	mov	r20, r24
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	02 2e       	mov	r0, r18
    3868:	02 c0       	rjmp	.+4      	; 0x386e <DIO_enumSetPinDirection+0x1f8>
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	0a 94       	dec	r0
    3870:	e2 f7       	brpl	.-8      	; 0x386a <DIO_enumSetPinDirection+0x1f4>
    3872:	80 95       	com	r24
    3874:	84 23       	and	r24, r20
    3876:	8c 93       	st	X, r24
    3878:	03 c0       	rjmp	.+6      	; 0x3880 <DIO_enumSetPinDirection+0x20a>

	}
}
else {
loc_enumState =DIO_NOK ;
    387a:	19 82       	std	Y+1, r1	; 0x01
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <DIO_enumSetPinDirection+0x20a>
}
}
else {
loc_enumState =DIO_NOK ;
    387e:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3880:	89 81       	ldd	r24, Y+1	; 0x01
}
    3882:	28 96       	adiw	r28, 0x08	; 8
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <DIO_enumWritePinValue>:

//void DIO_voidWritePinValue      ( u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value     ){

DIO_ErrorStatus DIO_enumWritePinValue   (u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value )
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	28 97       	sbiw	r28, 0x08	; 8
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	8a 83       	std	Y+2, r24	; 0x02
    38aa:	6b 83       	std	Y+3, r22	; 0x03
    38ac:	4c 83       	std	Y+4, r20	; 0x04
DIO_ErrorStatus loc_enumState =DIO_OK ;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7))
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	84 30       	cpi	r24, 0x04	; 4
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <DIO_enumWritePinValue+0x26>
    38b8:	f1 c0       	rjmp	.+482    	; 0x3a9c <DIO_enumWritePinValue+0x208>
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	88 30       	cpi	r24, 0x08	; 8
    38be:	08 f0       	brcs	.+2      	; 0x38c2 <DIO_enumWritePinValue+0x2e>
    38c0:	ed c0       	rjmp	.+474    	; 0x3a9c <DIO_enumWritePinValue+0x208>
 {
	if(copy_u8Value == DIO_PIN_OUTPUT )
    38c2:	8c 81       	ldd	r24, Y+4	; 0x04
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	09 f0       	breq	.+2      	; 0x38ca <DIO_enumWritePinValue+0x36>
    38c8:	6f c0       	rjmp	.+222    	; 0x39a8 <DIO_enumWritePinValue+0x114>
	{
	switch(copy_u8PORT)
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	28 2f       	mov	r18, r24
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	38 87       	std	Y+8, r19	; 0x08
    38d2:	2f 83       	std	Y+7, r18	; 0x07
    38d4:	8f 81       	ldd	r24, Y+7	; 0x07
    38d6:	98 85       	ldd	r25, Y+8	; 0x08
    38d8:	81 30       	cpi	r24, 0x01	; 1
    38da:	91 05       	cpc	r25, r1
    38dc:	49 f1       	breq	.+82     	; 0x3930 <DIO_enumWritePinValue+0x9c>
    38de:	2f 81       	ldd	r18, Y+7	; 0x07
    38e0:	38 85       	ldd	r19, Y+8	; 0x08
    38e2:	22 30       	cpi	r18, 0x02	; 2
    38e4:	31 05       	cpc	r19, r1
    38e6:	2c f4       	brge	.+10     	; 0x38f2 <DIO_enumWritePinValue+0x5e>
    38e8:	8f 81       	ldd	r24, Y+7	; 0x07
    38ea:	98 85       	ldd	r25, Y+8	; 0x08
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	61 f0       	breq	.+24     	; 0x3908 <DIO_enumWritePinValue+0x74>
    38f0:	d6 c0       	rjmp	.+428    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
    38f2:	2f 81       	ldd	r18, Y+7	; 0x07
    38f4:	38 85       	ldd	r19, Y+8	; 0x08
    38f6:	22 30       	cpi	r18, 0x02	; 2
    38f8:	31 05       	cpc	r19, r1
    38fa:	71 f1       	breq	.+92     	; 0x3958 <DIO_enumWritePinValue+0xc4>
    38fc:	8f 81       	ldd	r24, Y+7	; 0x07
    38fe:	98 85       	ldd	r25, Y+8	; 0x08
    3900:	83 30       	cpi	r24, 0x03	; 3
    3902:	91 05       	cpc	r25, r1
    3904:	e9 f1       	breq	.+122    	; 0x3980 <DIO_enumWritePinValue+0xec>
    3906:	cb c0       	rjmp	.+406    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	{
	case DIO_PORTA : SET_BIT(PORTA_REG , copy_u8PIN );break;
    3908:	ab e3       	ldi	r26, 0x3B	; 59
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	eb e3       	ldi	r30, 0x3B	; 59
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	80 81       	ld	r24, Z
    3912:	48 2f       	mov	r20, r24
    3914:	8b 81       	ldd	r24, Y+3	; 0x03
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	02 2e       	mov	r0, r18
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <DIO_enumWritePinValue+0x92>
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	0a 94       	dec	r0
    3928:	e2 f7       	brpl	.-8      	; 0x3922 <DIO_enumWritePinValue+0x8e>
    392a:	84 2b       	or	r24, r20
    392c:	8c 93       	st	X, r24
    392e:	b7 c0       	rjmp	.+366    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTB : SET_BIT(PORTB_REG, copy_u8PIN );break;
    3930:	a8 e3       	ldi	r26, 0x38	; 56
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	e8 e3       	ldi	r30, 0x38	; 56
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	48 2f       	mov	r20, r24
    393c:	8b 81       	ldd	r24, Y+3	; 0x03
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	02 2e       	mov	r0, r18
    3948:	02 c0       	rjmp	.+4      	; 0x394e <DIO_enumWritePinValue+0xba>
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	0a 94       	dec	r0
    3950:	e2 f7       	brpl	.-8      	; 0x394a <DIO_enumWritePinValue+0xb6>
    3952:	84 2b       	or	r24, r20
    3954:	8c 93       	st	X, r24
    3956:	a3 c0       	rjmp	.+326    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTC : SET_BIT(PORTC_REG, copy_u8PIN );break;
    3958:	a5 e3       	ldi	r26, 0x35	; 53
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e5 e3       	ldi	r30, 0x35	; 53
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	48 2f       	mov	r20, r24
    3964:	8b 81       	ldd	r24, Y+3	; 0x03
    3966:	28 2f       	mov	r18, r24
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	02 2e       	mov	r0, r18
    3970:	02 c0       	rjmp	.+4      	; 0x3976 <DIO_enumWritePinValue+0xe2>
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	0a 94       	dec	r0
    3978:	e2 f7       	brpl	.-8      	; 0x3972 <DIO_enumWritePinValue+0xde>
    397a:	84 2b       	or	r24, r20
    397c:	8c 93       	st	X, r24
    397e:	8f c0       	rjmp	.+286    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTD : SET_BIT(PORTD_REG, copy_u8PIN );break;
    3980:	a2 e3       	ldi	r26, 0x32	; 50
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	e2 e3       	ldi	r30, 0x32	; 50
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	48 2f       	mov	r20, r24
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	28 2f       	mov	r18, r24
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	02 2e       	mov	r0, r18
    3998:	02 c0       	rjmp	.+4      	; 0x399e <DIO_enumWritePinValue+0x10a>
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	0a 94       	dec	r0
    39a0:	e2 f7       	brpl	.-8      	; 0x399a <DIO_enumWritePinValue+0x106>
    39a2:	84 2b       	or	r24, r20
    39a4:	8c 93       	st	X, r24
    39a6:	7b c0       	rjmp	.+246    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	}
	}
	else if(copy_u8Value == DIO_PIN_INPUT ){
    39a8:	8c 81       	ldd	r24, Y+4	; 0x04
    39aa:	88 23       	and	r24, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <DIO_enumWritePinValue+0x11c>
    39ae:	74 c0       	rjmp	.+232    	; 0x3a98 <DIO_enumWritePinValue+0x204>

		switch(copy_u8PORT){
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	3e 83       	std	Y+6, r19	; 0x06
    39b8:	2d 83       	std	Y+5, r18	; 0x05
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	91 05       	cpc	r25, r1
    39c2:	59 f1       	breq	.+86     	; 0x3a1a <DIO_enumWritePinValue+0x186>
    39c4:	2d 81       	ldd	r18, Y+5	; 0x05
    39c6:	3e 81       	ldd	r19, Y+6	; 0x06
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	2c f4       	brge	.+10     	; 0x39d8 <DIO_enumWritePinValue+0x144>
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	69 f0       	breq	.+26     	; 0x39f0 <DIO_enumWritePinValue+0x15c>
    39d6:	63 c0       	rjmp	.+198    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
    39d8:	2d 81       	ldd	r18, Y+5	; 0x05
    39da:	3e 81       	ldd	r19, Y+6	; 0x06
    39dc:	22 30       	cpi	r18, 0x02	; 2
    39de:	31 05       	cpc	r19, r1
    39e0:	89 f1       	breq	.+98     	; 0x3a44 <DIO_enumWritePinValue+0x1b0>
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	83 30       	cpi	r24, 0x03	; 3
    39e8:	91 05       	cpc	r25, r1
    39ea:	09 f4       	brne	.+2      	; 0x39ee <DIO_enumWritePinValue+0x15a>
    39ec:	40 c0       	rjmp	.+128    	; 0x3a6e <DIO_enumWritePinValue+0x1da>
    39ee:	57 c0       	rjmp	.+174    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTA : CLR_BIT(PORTA_REG , copy_u8PIN );break;
    39f0:	ab e3       	ldi	r26, 0x3B	; 59
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	eb e3       	ldi	r30, 0x3B	; 59
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	48 2f       	mov	r20, r24
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	02 2e       	mov	r0, r18
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <DIO_enumWritePinValue+0x17a>
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	0a 94       	dec	r0
    3a10:	e2 f7       	brpl	.-8      	; 0x3a0a <DIO_enumWritePinValue+0x176>
    3a12:	80 95       	com	r24
    3a14:	84 23       	and	r24, r20
    3a16:	8c 93       	st	X, r24
    3a18:	42 c0       	rjmp	.+132    	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTB : CLR_BIT(PORTB_REG, copy_u8PIN );break;
    3a1a:	a8 e3       	ldi	r26, 0x38	; 56
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e8 e3       	ldi	r30, 0x38	; 56
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	48 2f       	mov	r20, r24
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	02 2e       	mov	r0, r18
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <DIO_enumWritePinValue+0x1a4>
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	0a 94       	dec	r0
    3a3a:	e2 f7       	brpl	.-8      	; 0x3a34 <DIO_enumWritePinValue+0x1a0>
    3a3c:	80 95       	com	r24
    3a3e:	84 23       	and	r24, r20
    3a40:	8c 93       	st	X, r24
    3a42:	2d c0       	rjmp	.+90     	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTC : CLR_BIT(PORTC_REG, copy_u8PIN );break;
    3a44:	a5 e3       	ldi	r26, 0x35	; 53
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e5 e3       	ldi	r30, 0x35	; 53
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	48 2f       	mov	r20, r24
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	28 2f       	mov	r18, r24
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	02 2e       	mov	r0, r18
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <DIO_enumWritePinValue+0x1ce>
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	0a 94       	dec	r0
    3a64:	e2 f7       	brpl	.-8      	; 0x3a5e <DIO_enumWritePinValue+0x1ca>
    3a66:	80 95       	com	r24
    3a68:	84 23       	and	r24, r20
    3a6a:	8c 93       	st	X, r24
    3a6c:	18 c0       	rjmp	.+48     	; 0x3a9e <DIO_enumWritePinValue+0x20a>
	case DIO_PORTD : CLR_BIT(PORTD_REG, copy_u8PIN );break;
    3a6e:	a2 e3       	ldi	r26, 0x32	; 50
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	e2 e3       	ldi	r30, 0x32	; 50
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	48 2f       	mov	r20, r24
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	02 2e       	mov	r0, r18
    3a86:	02 c0       	rjmp	.+4      	; 0x3a8c <DIO_enumWritePinValue+0x1f8>
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	0a 94       	dec	r0
    3a8e:	e2 f7       	brpl	.-8      	; 0x3a88 <DIO_enumWritePinValue+0x1f4>
    3a90:	80 95       	com	r24
    3a92:	84 23       	and	r24, r20
    3a94:	8c 93       	st	X, r24
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <DIO_enumWritePinValue+0x20a>
		}
	}
else {
loc_enumState =DIO_NOK ;
    3a98:	19 82       	std	Y+1, r1	; 0x01
    3a9a:	01 c0       	rjmp	.+2      	; 0x3a9e <DIO_enumWritePinValue+0x20a>
}
	}
else {
loc_enumState =DIO_NOK ;
    3a9c:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aa0:	28 96       	adiw	r28, 0x08	; 8
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <DIO_enumReadPinValue>:

//u8 void DIO_voidGetPinValue   ( u8 copy_u8PORT , u8 copy_u8PIN


DIO_ErrorStatus DIO_enumReadPinValue  (u8 copy_u8PORT , u8 copy_u8PIN , u8* copy_ptru8Data ){
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
    3aba:	27 97       	sbiw	r28, 0x07	; 7
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
    3ac6:	8a 83       	std	Y+2, r24	; 0x02
    3ac8:	6b 83       	std	Y+3, r22	; 0x03
    3aca:	5d 83       	std	Y+5, r21	; 0x05
    3acc:	4c 83       	std	Y+4, r20	; 0x04
DIO_ErrorStatus loc_enumState =DIO_OK ;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	89 83       	std	Y+1, r24	; 0x01
 //make sure that the port id and pin id are in valid rane
 if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7)){
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	84 30       	cpi	r24, 0x04	; 4
    3ad6:	08 f0       	brcs	.+2      	; 0x3ada <DIO_enumReadPinValue+0x28>
    3ad8:	a6 c0       	rjmp	.+332    	; 0x3c26 <DIO_enumReadPinValue+0x174>
    3ada:	8b 81       	ldd	r24, Y+3	; 0x03
    3adc:	88 30       	cpi	r24, 0x08	; 8
    3ade:	08 f0       	brcs	.+2      	; 0x3ae2 <DIO_enumReadPinValue+0x30>
    3ae0:	a2 c0       	rjmp	.+324    	; 0x3c26 <DIO_enumReadPinValue+0x174>
//u8 loc_u8status=0;
switch(copy_u8PORT){
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	28 2f       	mov	r18, r24
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	3f 83       	std	Y+7, r19	; 0x07
    3aea:	2e 83       	std	Y+6, r18	; 0x06
    3aec:	4e 81       	ldd	r20, Y+6	; 0x06
    3aee:	5f 81       	ldd	r21, Y+7	; 0x07
    3af0:	41 30       	cpi	r20, 0x01	; 1
    3af2:	51 05       	cpc	r21, r1
    3af4:	c1 f1       	breq	.+112    	; 0x3b66 <DIO_enumReadPinValue+0xb4>
    3af6:	8e 81       	ldd	r24, Y+6	; 0x06
    3af8:	9f 81       	ldd	r25, Y+7	; 0x07
    3afa:	82 30       	cpi	r24, 0x02	; 2
    3afc:	91 05       	cpc	r25, r1
    3afe:	34 f4       	brge	.+12     	; 0x3b0c <DIO_enumReadPinValue+0x5a>
    3b00:	2e 81       	ldd	r18, Y+6	; 0x06
    3b02:	3f 81       	ldd	r19, Y+7	; 0x07
    3b04:	21 15       	cp	r18, r1
    3b06:	31 05       	cpc	r19, r1
    3b08:	71 f0       	breq	.+28     	; 0x3b26 <DIO_enumReadPinValue+0x74>
    3b0a:	8e c0       	rjmp	.+284    	; 0x3c28 <DIO_enumReadPinValue+0x176>
    3b0c:	4e 81       	ldd	r20, Y+6	; 0x06
    3b0e:	5f 81       	ldd	r21, Y+7	; 0x07
    3b10:	42 30       	cpi	r20, 0x02	; 2
    3b12:	51 05       	cpc	r21, r1
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <DIO_enumReadPinValue+0x66>
    3b16:	47 c0       	rjmp	.+142    	; 0x3ba6 <DIO_enumReadPinValue+0xf4>
    3b18:	8e 81       	ldd	r24, Y+6	; 0x06
    3b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b1c:	83 30       	cpi	r24, 0x03	; 3
    3b1e:	91 05       	cpc	r25, r1
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <DIO_enumReadPinValue+0x72>
    3b22:	61 c0       	rjmp	.+194    	; 0x3be6 <DIO_enumReadPinValue+0x134>
    3b24:	81 c0       	rjmp	.+258    	; 0x3c28 <DIO_enumReadPinValue+0x176>
	case DIO_PORTA : * copy_ptru8Data= GET_BIT(PINA_REG, copy_u8PIN );break;
    3b26:	e9 e3       	ldi	r30, 0x39	; 57
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	48 2f       	mov	r20, r24
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	8b 81       	ldd	r24, Y+3	; 0x03
    3b32:	28 2f       	mov	r18, r24
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	02 c0       	rjmp	.+4      	; 0x3b40 <DIO_enumReadPinValue+0x8e>
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	2a 95       	dec	r18
    3b42:	e2 f7       	brpl	.-8      	; 0x3b3c <DIO_enumReadPinValue+0x8a>
    3b44:	9a 01       	movw	r18, r20
    3b46:	28 23       	and	r18, r24
    3b48:	39 23       	and	r19, r25
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	88 2f       	mov	r24, r24
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	a9 01       	movw	r20, r18
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <DIO_enumReadPinValue+0xa6>
    3b54:	55 95       	asr	r21
    3b56:	47 95       	ror	r20
    3b58:	8a 95       	dec	r24
    3b5a:	e2 f7       	brpl	.-8      	; 0x3b54 <DIO_enumReadPinValue+0xa2>
    3b5c:	ca 01       	movw	r24, r20
    3b5e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b60:	fd 81       	ldd	r31, Y+5	; 0x05
    3b62:	80 83       	st	Z, r24
    3b64:	61 c0       	rjmp	.+194    	; 0x3c28 <DIO_enumReadPinValue+0x176>
	case DIO_PORTB : * copy_ptru8Data= GET_BIT(PINB_REG, copy_u8PIN );break;
    3b66:	e6 e3       	ldi	r30, 0x36	; 54
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	80 81       	ld	r24, Z
    3b6c:	48 2f       	mov	r20, r24
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <DIO_enumReadPinValue+0xce>
    3b7c:	88 0f       	add	r24, r24
    3b7e:	99 1f       	adc	r25, r25
    3b80:	2a 95       	dec	r18
    3b82:	e2 f7       	brpl	.-8      	; 0x3b7c <DIO_enumReadPinValue+0xca>
    3b84:	9a 01       	movw	r18, r20
    3b86:	28 23       	and	r18, r24
    3b88:	39 23       	and	r19, r25
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	88 2f       	mov	r24, r24
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	a9 01       	movw	r20, r18
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <DIO_enumReadPinValue+0xe6>
    3b94:	55 95       	asr	r21
    3b96:	47 95       	ror	r20
    3b98:	8a 95       	dec	r24
    3b9a:	e2 f7       	brpl	.-8      	; 0x3b94 <DIO_enumReadPinValue+0xe2>
    3b9c:	ca 01       	movw	r24, r20
    3b9e:	ec 81       	ldd	r30, Y+4	; 0x04
    3ba0:	fd 81       	ldd	r31, Y+5	; 0x05
    3ba2:	80 83       	st	Z, r24
    3ba4:	41 c0       	rjmp	.+130    	; 0x3c28 <DIO_enumReadPinValue+0x176>
	case DIO_PORTC : * copy_ptru8Data= GET_BIT(PINC_REG, copy_u8PIN );break;
    3ba6:	e3 e3       	ldi	r30, 0x33	; 51
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	48 2f       	mov	r20, r24
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <DIO_enumReadPinValue+0x10e>
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	2a 95       	dec	r18
    3bc2:	e2 f7       	brpl	.-8      	; 0x3bbc <DIO_enumReadPinValue+0x10a>
    3bc4:	9a 01       	movw	r18, r20
    3bc6:	28 23       	and	r18, r24
    3bc8:	39 23       	and	r19, r25
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	88 2f       	mov	r24, r24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	a9 01       	movw	r20, r18
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <DIO_enumReadPinValue+0x126>
    3bd4:	55 95       	asr	r21
    3bd6:	47 95       	ror	r20
    3bd8:	8a 95       	dec	r24
    3bda:	e2 f7       	brpl	.-8      	; 0x3bd4 <DIO_enumReadPinValue+0x122>
    3bdc:	ca 01       	movw	r24, r20
    3bde:	ec 81       	ldd	r30, Y+4	; 0x04
    3be0:	fd 81       	ldd	r31, Y+5	; 0x05
    3be2:	80 83       	st	Z, r24
    3be4:	21 c0       	rjmp	.+66     	; 0x3c28 <DIO_enumReadPinValue+0x176>
	case DIO_PORTD : * copy_ptru8Data= GET_BIT(PIND_REG, copy_u8PIN );break;
    3be6:	e0 e3       	ldi	r30, 0x30	; 48
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	48 2f       	mov	r20, r24
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	02 c0       	rjmp	.+4      	; 0x3c00 <DIO_enumReadPinValue+0x14e>
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	2a 95       	dec	r18
    3c02:	e2 f7       	brpl	.-8      	; 0x3bfc <DIO_enumReadPinValue+0x14a>
    3c04:	9a 01       	movw	r18, r20
    3c06:	28 23       	and	r18, r24
    3c08:	39 23       	and	r19, r25
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	a9 01       	movw	r20, r18
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <DIO_enumReadPinValue+0x166>
    3c14:	55 95       	asr	r21
    3c16:	47 95       	ror	r20
    3c18:	8a 95       	dec	r24
    3c1a:	e2 f7       	brpl	.-8      	; 0x3c14 <DIO_enumReadPinValue+0x162>
    3c1c:	ca 01       	movw	r24, r20
    3c1e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c20:	fd 81       	ldd	r31, Y+5	; 0x05
    3c22:	80 83       	st	Z, r24
    3c24:	01 c0       	rjmp	.+2      	; 0x3c28 <DIO_enumReadPinValue+0x176>
}
 }
else {
loc_enumState =DIO_NOK ;
    3c26:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c2a:	27 96       	adiw	r28, 0x07	; 7
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	de bf       	out	0x3e, r29	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	08 95       	ret

00003c3c <DIO_enumTogglePinValue>:
//void DIO_voidTogglePinValue   (u8 copy_u8PORT , u8 copy_u8PIN   ){

DIO_ErrorStatus DIO_enumTogglePinValue  (u8 copy_u8PORT , u8 copy_u8PIN  )
{
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <DIO_enumTogglePinValue+0x6>
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <DIO_enumTogglePinValue+0x8>
    3c44:	0f 92       	push	r0
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	8a 83       	std	Y+2, r24	; 0x02
    3c4c:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState = DIO_OK ;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD) && (copy_u8PIN <= DIO_PIN7))
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	84 30       	cpi	r24, 0x04	; 4
    3c56:	08 f0       	brcs	.+2      	; 0x3c5a <DIO_enumTogglePinValue+0x1e>
    3c58:	73 c0       	rjmp	.+230    	; 0x3d40 <DIO_enumTogglePinValue+0x104>
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	88 30       	cpi	r24, 0x08	; 8
    3c5e:	08 f0       	brcs	.+2      	; 0x3c62 <DIO_enumTogglePinValue+0x26>
    3c60:	6f c0       	rjmp	.+222    	; 0x3d40 <DIO_enumTogglePinValue+0x104>
	{
	switch(copy_u8PORT)
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	3d 83       	std	Y+5, r19	; 0x05
    3c6a:	2c 83       	std	Y+4, r18	; 0x04
    3c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c70:	81 30       	cpi	r24, 0x01	; 1
    3c72:	91 05       	cpc	r25, r1
    3c74:	49 f1       	breq	.+82     	; 0x3cc8 <DIO_enumTogglePinValue+0x8c>
    3c76:	2c 81       	ldd	r18, Y+4	; 0x04
    3c78:	3d 81       	ldd	r19, Y+5	; 0x05
    3c7a:	22 30       	cpi	r18, 0x02	; 2
    3c7c:	31 05       	cpc	r19, r1
    3c7e:	2c f4       	brge	.+10     	; 0x3c8a <DIO_enumTogglePinValue+0x4e>
    3c80:	8c 81       	ldd	r24, Y+4	; 0x04
    3c82:	9d 81       	ldd	r25, Y+5	; 0x05
    3c84:	00 97       	sbiw	r24, 0x00	; 0
    3c86:	61 f0       	breq	.+24     	; 0x3ca0 <DIO_enumTogglePinValue+0x64>
    3c88:	5c c0       	rjmp	.+184    	; 0x3d42 <DIO_enumTogglePinValue+0x106>
    3c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c8e:	22 30       	cpi	r18, 0x02	; 2
    3c90:	31 05       	cpc	r19, r1
    3c92:	71 f1       	breq	.+92     	; 0x3cf0 <DIO_enumTogglePinValue+0xb4>
    3c94:	8c 81       	ldd	r24, Y+4	; 0x04
    3c96:	9d 81       	ldd	r25, Y+5	; 0x05
    3c98:	83 30       	cpi	r24, 0x03	; 3
    3c9a:	91 05       	cpc	r25, r1
    3c9c:	e9 f1       	breq	.+122    	; 0x3d18 <DIO_enumTogglePinValue+0xdc>
    3c9e:	51 c0       	rjmp	.+162    	; 0x3d42 <DIO_enumTogglePinValue+0x106>
	{
	case DIO_PORTA : TOG_BIT(PORTA_REG , copy_u8PIN );break;
    3ca0:	ab e3       	ldi	r26, 0x3B	; 59
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	eb e3       	ldi	r30, 0x3B	; 59
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 81       	ld	r24, Z
    3caa:	48 2f       	mov	r20, r24
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	02 2e       	mov	r0, r18
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <DIO_enumTogglePinValue+0x82>
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	0a 94       	dec	r0
    3cc0:	e2 f7       	brpl	.-8      	; 0x3cba <DIO_enumTogglePinValue+0x7e>
    3cc2:	84 27       	eor	r24, r20
    3cc4:	8c 93       	st	X, r24
    3cc6:	3d c0       	rjmp	.+122    	; 0x3d42 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTB : TOG_BIT(PORTB_REG, copy_u8PIN );break;
    3cc8:	a8 e3       	ldi	r26, 0x38	; 56
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	e8 e3       	ldi	r30, 0x38	; 56
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	80 81       	ld	r24, Z
    3cd2:	48 2f       	mov	r20, r24
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	28 2f       	mov	r18, r24
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	02 2e       	mov	r0, r18
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <DIO_enumTogglePinValue+0xaa>
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	0a 94       	dec	r0
    3ce8:	e2 f7       	brpl	.-8      	; 0x3ce2 <DIO_enumTogglePinValue+0xa6>
    3cea:	84 27       	eor	r24, r20
    3cec:	8c 93       	st	X, r24
    3cee:	29 c0       	rjmp	.+82     	; 0x3d42 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTC : TOG_BIT(PORTC_REG, copy_u8PIN );break;
    3cf0:	a5 e3       	ldi	r26, 0x35	; 53
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	e5 e3       	ldi	r30, 0x35	; 53
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 81       	ld	r24, Z
    3cfa:	48 2f       	mov	r20, r24
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	02 2e       	mov	r0, r18
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <DIO_enumTogglePinValue+0xd2>
    3d0a:	88 0f       	add	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	0a 94       	dec	r0
    3d10:	e2 f7       	brpl	.-8      	; 0x3d0a <DIO_enumTogglePinValue+0xce>
    3d12:	84 27       	eor	r24, r20
    3d14:	8c 93       	st	X, r24
    3d16:	15 c0       	rjmp	.+42     	; 0x3d42 <DIO_enumTogglePinValue+0x106>
	case DIO_PORTD : TOG_BIT(PORTD_REG, copy_u8PIN );break;
    3d18:	a2 e3       	ldi	r26, 0x32	; 50
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	e2 e3       	ldi	r30, 0x32	; 50
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	80 81       	ld	r24, Z
    3d22:	48 2f       	mov	r20, r24
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	28 2f       	mov	r18, r24
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	02 2e       	mov	r0, r18
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <DIO_enumTogglePinValue+0xfa>
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	0a 94       	dec	r0
    3d38:	e2 f7       	brpl	.-8      	; 0x3d32 <DIO_enumTogglePinValue+0xf6>
    3d3a:	84 27       	eor	r24, r20
    3d3c:	8c 93       	st	X, r24
    3d3e:	01 c0       	rjmp	.+2      	; 0x3d42 <DIO_enumTogglePinValue+0x106>
	}

}
else {
loc_enumState =DIO_NOK ;
    3d40:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <DIO_enumSetPortDirection>:

DIO_ErrorStatus DIO_enumSetPortDirection  (u8 copy_u8PORT , u8 copy_u8Direction )
{
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <DIO_enumSetPortDirection+0x6>
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <DIO_enumSetPortDirection+0x8>
    3d5c:	0f 92       	push	r0
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	8a 83       	std	Y+2, r24	; 0x02
    3d64:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PORT <= DIO_PORTD )
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	84 30       	cpi	r24, 0x04	; 4
    3d6e:	a8 f5       	brcc	.+106    	; 0x3dda <DIO_enumSetPortDirection+0x86>
	{
	switch(copy_u8PORT)
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	3d 83       	std	Y+5, r19	; 0x05
    3d78:	2c 83       	std	Y+4, r18	; 0x04
    3d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	91 05       	cpc	r25, r1
    3d82:	d1 f0       	breq	.+52     	; 0x3db8 <DIO_enumSetPortDirection+0x64>
    3d84:	2c 81       	ldd	r18, Y+4	; 0x04
    3d86:	3d 81       	ldd	r19, Y+5	; 0x05
    3d88:	22 30       	cpi	r18, 0x02	; 2
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	2c f4       	brge	.+10     	; 0x3d98 <DIO_enumSetPortDirection+0x44>
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	9d 81       	ldd	r25, Y+5	; 0x05
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	61 f0       	breq	.+24     	; 0x3dae <DIO_enumSetPortDirection+0x5a>
    3d96:	1f c0       	rjmp	.+62     	; 0x3dd6 <DIO_enumSetPortDirection+0x82>
    3d98:	2c 81       	ldd	r18, Y+4	; 0x04
    3d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    3d9c:	22 30       	cpi	r18, 0x02	; 2
    3d9e:	31 05       	cpc	r19, r1
    3da0:	81 f0       	breq	.+32     	; 0x3dc2 <DIO_enumSetPortDirection+0x6e>
    3da2:	8c 81       	ldd	r24, Y+4	; 0x04
    3da4:	9d 81       	ldd	r25, Y+5	; 0x05
    3da6:	83 30       	cpi	r24, 0x03	; 3
    3da8:	91 05       	cpc	r25, r1
    3daa:	81 f0       	breq	.+32     	; 0x3dcc <DIO_enumSetPortDirection+0x78>
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <DIO_enumSetPortDirection+0x82>
	{
	case DIO_PORTA : (DDRA_REG = copy_u8Direction );break;
    3dae:	ea e3       	ldi	r30, 0x3A	; 58
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	80 83       	st	Z, r24
    3db6:	12 c0       	rjmp	.+36     	; 0x3ddc <DIO_enumSetPortDirection+0x88>
	case DIO_PORTB : (DDRB_REG = copy_u8Direction );break;
    3db8:	e7 e3       	ldi	r30, 0x37	; 55
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	80 83       	st	Z, r24
    3dc0:	0d c0       	rjmp	.+26     	; 0x3ddc <DIO_enumSetPortDirection+0x88>
	case DIO_PORTC : (DDRC_REG = copy_u8Direction );break;
    3dc2:	e4 e3       	ldi	r30, 0x34	; 52
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc8:	80 83       	st	Z, r24
    3dca:	08 c0       	rjmp	.+16     	; 0x3ddc <DIO_enumSetPortDirection+0x88>
	case DIO_PORTD : (DDRD_REG = copy_u8Direction );break;
    3dcc:	e1 e3       	ldi	r30, 0x31	; 49
    3dce:	f0 e0       	ldi	r31, 0x00	; 0
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	80 83       	st	Z, r24
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <DIO_enumSetPortDirection+0x88>
	default: loc_enumState =DIO_NOK ; break;
    3dd6:	19 82       	std	Y+1, r1	; 0x01
    3dd8:	01 c0       	rjmp	.+2      	; 0x3ddc <DIO_enumSetPortDirection+0x88>
	}
}
else {
loc_enumState =DIO_NOK ;
    3dda:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	08 95       	ret

00003dee <DIO_enumWritePortValue>:


DIO_ErrorStatus DIO_enumWritePortValue   (u8 copy_u8PORT , u8 portu8Value         )
{
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <DIO_enumWritePortValue+0x6>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <DIO_enumWritePortValue+0x8>
    3df6:	0f 92       	push	r0
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	8a 83       	std	Y+2, r24	; 0x02
    3dfe:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD) && ((portu8Value <= 255)|| (portu8Value == DIO_PORT_LOW)||(portu8Value == DIO_PORT_HIGH)))
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	84 30       	cpi	r24, 0x04	; 4
    3e08:	98 f5       	brcc	.+102    	; 0x3e70 <DIO_enumWritePortValue+0x82>
	{
	switch(copy_u8PORT){
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	28 2f       	mov	r18, r24
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	3d 83       	std	Y+5, r19	; 0x05
    3e12:	2c 83       	std	Y+4, r18	; 0x04
    3e14:	8c 81       	ldd	r24, Y+4	; 0x04
    3e16:	9d 81       	ldd	r25, Y+5	; 0x05
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	91 05       	cpc	r25, r1
    3e1c:	d1 f0       	breq	.+52     	; 0x3e52 <DIO_enumWritePortValue+0x64>
    3e1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e20:	3d 81       	ldd	r19, Y+5	; 0x05
    3e22:	22 30       	cpi	r18, 0x02	; 2
    3e24:	31 05       	cpc	r19, r1
    3e26:	2c f4       	brge	.+10     	; 0x3e32 <DIO_enumWritePortValue+0x44>
    3e28:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	61 f0       	breq	.+24     	; 0x3e48 <DIO_enumWritePortValue+0x5a>
    3e30:	20 c0       	rjmp	.+64     	; 0x3e72 <DIO_enumWritePortValue+0x84>
    3e32:	2c 81       	ldd	r18, Y+4	; 0x04
    3e34:	3d 81       	ldd	r19, Y+5	; 0x05
    3e36:	22 30       	cpi	r18, 0x02	; 2
    3e38:	31 05       	cpc	r19, r1
    3e3a:	81 f0       	breq	.+32     	; 0x3e5c <DIO_enumWritePortValue+0x6e>
    3e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e40:	83 30       	cpi	r24, 0x03	; 3
    3e42:	91 05       	cpc	r25, r1
    3e44:	81 f0       	breq	.+32     	; 0x3e66 <DIO_enumWritePortValue+0x78>
    3e46:	15 c0       	rjmp	.+42     	; 0x3e72 <DIO_enumWritePortValue+0x84>
	case DIO_PORTA : PORTA_REG  = portu8Value ;break;
    3e48:	eb e3       	ldi	r30, 0x3B	; 59
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4e:	80 83       	st	Z, r24
    3e50:	10 c0       	rjmp	.+32     	; 0x3e72 <DIO_enumWritePortValue+0x84>
	case DIO_PORTB : PORTB_REG = portu8Value ;break;
    3e52:	e8 e3       	ldi	r30, 0x38	; 56
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	8b 81       	ldd	r24, Y+3	; 0x03
    3e58:	80 83       	st	Z, r24
    3e5a:	0b c0       	rjmp	.+22     	; 0x3e72 <DIO_enumWritePortValue+0x84>
	case DIO_PORTC : PORTC_REG = portu8Value ;break;
    3e5c:	e5 e3       	ldi	r30, 0x35	; 53
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	8b 81       	ldd	r24, Y+3	; 0x03
    3e62:	80 83       	st	Z, r24
    3e64:	06 c0       	rjmp	.+12     	; 0x3e72 <DIO_enumWritePortValue+0x84>
	case DIO_PORTD : PORTD_REG = portu8Value ;break;
    3e66:	e2 e3       	ldi	r30, 0x32	; 50
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6c:	80 83       	st	Z, r24
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <DIO_enumWritePortValue+0x84>
	}
}
else {
loc_enumState =DIO_NOK ;
    3e70:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <DIO_enumReadPortValue>:

DIO_ErrorStatus DIO_enumReadPortValue  (u8 copy_u8PORT , u8 * copy_ptrData )
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <DIO_enumReadPortValue+0x6>
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <DIO_enumReadPortValue+0x8>
    3e8c:	00 d0       	rcall	.+0      	; 0x3e8e <DIO_enumReadPortValue+0xa>
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	8a 83       	std	Y+2, r24	; 0x02
    3e94:	7c 83       	std	Y+4, r23	; 0x04
    3e96:	6b 83       	std	Y+3, r22	; 0x03
DIO_ErrorStatus loc_enumState =DIO_OK ;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PORT <= DIO_PORTD))
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	84 30       	cpi	r24, 0x04	; 4
    3ea0:	e8 f5       	brcc	.+122    	; 0x3f1c <DIO_enumReadPortValue+0x98>
	{
 switch(copy_u8PORT)
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	3e 83       	std	Y+6, r19	; 0x06
    3eaa:	2d 83       	std	Y+5, r18	; 0x05
    3eac:	8d 81       	ldd	r24, Y+5	; 0x05
    3eae:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb0:	81 30       	cpi	r24, 0x01	; 1
    3eb2:	91 05       	cpc	r25, r1
    3eb4:	e1 f0       	breq	.+56     	; 0x3eee <DIO_enumReadPortValue+0x6a>
    3eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    3eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    3eba:	22 30       	cpi	r18, 0x02	; 2
    3ebc:	31 05       	cpc	r19, r1
    3ebe:	2c f4       	brge	.+10     	; 0x3eca <DIO_enumReadPortValue+0x46>
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec4:	00 97       	sbiw	r24, 0x00	; 0
    3ec6:	61 f0       	breq	.+24     	; 0x3ee0 <DIO_enumReadPortValue+0x5c>
    3ec8:	27 c0       	rjmp	.+78     	; 0x3f18 <DIO_enumReadPortValue+0x94>
    3eca:	2d 81       	ldd	r18, Y+5	; 0x05
    3ecc:	3e 81       	ldd	r19, Y+6	; 0x06
    3ece:	22 30       	cpi	r18, 0x02	; 2
    3ed0:	31 05       	cpc	r19, r1
    3ed2:	a1 f0       	breq	.+40     	; 0x3efc <DIO_enumReadPortValue+0x78>
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	83 30       	cpi	r24, 0x03	; 3
    3eda:	91 05       	cpc	r25, r1
    3edc:	b1 f0       	breq	.+44     	; 0x3f0a <DIO_enumReadPortValue+0x86>
    3ede:	1c c0       	rjmp	.+56     	; 0x3f18 <DIO_enumReadPortValue+0x94>
 {
	case DIO_PORTA : * copy_ptrData= PINA_REG;break;
    3ee0:	e9 e3       	ldi	r30, 0x39	; 57
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	80 81       	ld	r24, Z
    3ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    3eea:	80 83       	st	Z, r24
    3eec:	18 c0       	rjmp	.+48     	; 0x3f1e <DIO_enumReadPortValue+0x9a>
	case DIO_PORTB : * copy_ptrData=PINA_REG;break;
    3eee:	e9 e3       	ldi	r30, 0x39	; 57
    3ef0:	f0 e0       	ldi	r31, 0x00	; 0
    3ef2:	80 81       	ld	r24, Z
    3ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ef8:	80 83       	st	Z, r24
    3efa:	11 c0       	rjmp	.+34     	; 0x3f1e <DIO_enumReadPortValue+0x9a>
	case DIO_PORTC : * copy_ptrData= PINA_REG;break;
    3efc:	e9 e3       	ldi	r30, 0x39	; 57
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	80 81       	ld	r24, Z
    3f02:	eb 81       	ldd	r30, Y+3	; 0x03
    3f04:	fc 81       	ldd	r31, Y+4	; 0x04
    3f06:	80 83       	st	Z, r24
    3f08:	0a c0       	rjmp	.+20     	; 0x3f1e <DIO_enumReadPortValue+0x9a>
	case DIO_PORTD : * copy_ptrData= PINA_REG;break;
    3f0a:	e9 e3       	ldi	r30, 0x39	; 57
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	eb 81       	ldd	r30, Y+3	; 0x03
    3f12:	fc 81       	ldd	r31, Y+4	; 0x04
    3f14:	80 83       	st	Z, r24
    3f16:	03 c0       	rjmp	.+6      	; 0x3f1e <DIO_enumReadPortValue+0x9a>
	default	: loc_enumState =DIO_NOK ;break;
    3f18:	19 82       	std	Y+1, r1	; 0x01
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <DIO_enumReadPortValue+0x9a>
 }
	}
else {
loc_enumState =DIO_NOK ;
    3f1c:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f20:	26 96       	adiw	r28, 0x06	; 6
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	08 95       	ret

00003f32 <DIO_enumTogglePortValue>:
DIO_ErrorStatus DIO_enumTogglePortValue  (u8 copy_u8PORT)
{
    3f32:	df 93       	push	r29
    3f34:	cf 93       	push	r28
    3f36:	00 d0       	rcall	.+0      	; 0x3f38 <DIO_enumTogglePortValue+0x6>
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <DIO_enumTogglePortValue+0x8>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	8a 83       	std	Y+2, r24	; 0x02
DIO_ErrorStatus loc_enumState =DIO_OK ;
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	89 83       	std	Y+1, r24	; 0x01

if((copy_u8PORT <= DIO_PORTD))
    3f44:	8a 81       	ldd	r24, Y+2	; 0x02
    3f46:	84 30       	cpi	r24, 0x04	; 4
    3f48:	08 f0       	brcs	.+2      	; 0x3f4c <DIO_enumTogglePortValue+0x1a>
    3f4a:	3f c0       	rjmp	.+126    	; 0x3fca <DIO_enumTogglePortValue+0x98>
{
switch(copy_u8PORT)
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	28 2f       	mov	r18, r24
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	3c 83       	std	Y+4, r19	; 0x04
    3f54:	2b 83       	std	Y+3, r18	; 0x03
    3f56:	8b 81       	ldd	r24, Y+3	; 0x03
    3f58:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	e9 f0       	breq	.+58     	; 0x3f9a <DIO_enumTogglePortValue+0x68>
    3f60:	2b 81       	ldd	r18, Y+3	; 0x03
    3f62:	3c 81       	ldd	r19, Y+4	; 0x04
    3f64:	22 30       	cpi	r18, 0x02	; 2
    3f66:	31 05       	cpc	r19, r1
    3f68:	2c f4       	brge	.+10     	; 0x3f74 <DIO_enumTogglePortValue+0x42>
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	61 f0       	breq	.+24     	; 0x3f8a <DIO_enumTogglePortValue+0x58>
    3f72:	2c c0       	rjmp	.+88     	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
    3f74:	2b 81       	ldd	r18, Y+3	; 0x03
    3f76:	3c 81       	ldd	r19, Y+4	; 0x04
    3f78:	22 30       	cpi	r18, 0x02	; 2
    3f7a:	31 05       	cpc	r19, r1
    3f7c:	b1 f0       	breq	.+44     	; 0x3faa <DIO_enumTogglePortValue+0x78>
    3f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f80:	9c 81       	ldd	r25, Y+4	; 0x04
    3f82:	83 30       	cpi	r24, 0x03	; 3
    3f84:	91 05       	cpc	r25, r1
    3f86:	c9 f0       	breq	.+50     	; 0x3fba <DIO_enumTogglePortValue+0x88>
    3f88:	21 c0       	rjmp	.+66     	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
{
	case DIO_PORTA : PORTA_REG  = ~PORTA_REG;break;
    3f8a:	ab e3       	ldi	r26, 0x3B	; 59
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	eb e3       	ldi	r30, 0x3B	; 59
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	80 95       	com	r24
    3f96:	8c 93       	st	X, r24
    3f98:	19 c0       	rjmp	.+50     	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTB : PORTB_REG = ~PORTB_REG;break;
    3f9a:	a8 e3       	ldi	r26, 0x38	; 56
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	e8 e3       	ldi	r30, 0x38	; 56
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	80 95       	com	r24
    3fa6:	8c 93       	st	X, r24
    3fa8:	11 c0       	rjmp	.+34     	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTC : PORTC_REG = ~PORTC_REG;break;
    3faa:	a5 e3       	ldi	r26, 0x35	; 53
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	e5 e3       	ldi	r30, 0x35	; 53
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	80 81       	ld	r24, Z
    3fb4:	80 95       	com	r24
    3fb6:	8c 93       	st	X, r24
    3fb8:	09 c0       	rjmp	.+18     	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
	case DIO_PORTD : PORTD_REG = ~PORTD_REG;break;
    3fba:	a2 e3       	ldi	r26, 0x32	; 50
    3fbc:	b0 e0       	ldi	r27, 0x00	; 0
    3fbe:	e2 e3       	ldi	r30, 0x32	; 50
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	80 81       	ld	r24, Z
    3fc4:	80 95       	com	r24
    3fc6:	8c 93       	st	X, r24
    3fc8:	01 c0       	rjmp	.+2      	; 0x3fcc <DIO_enumTogglePortValue+0x9a>
}
}
else {
loc_enumState =DIO_NOK ;
    3fca:	19 82       	std	Y+1, r1	; 0x01
}
return loc_enumState ;
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	cf 91       	pop	r28
    3fd8:	df 91       	pop	r29
    3fda:	08 95       	ret

00003fdc <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    3fdc:	df 93       	push	r29
    3fde:	cf 93       	push	r28
    3fe0:	00 d0       	rcall	.+0      	; 0x3fe2 <DIO_enumConnectPullUp+0x6>
    3fe2:	00 d0       	rcall	.+0      	; 0x3fe4 <DIO_enumConnectPullUp+0x8>
    3fe4:	00 d0       	rcall	.+0      	; 0x3fe6 <DIO_enumConnectPullUp+0xa>
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
    3fea:	8a 83       	std	Y+2, r24	; 0x02
    3fec:	6b 83       	std	Y+3, r22	; 0x03
    3fee:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	84 30       	cpi	r24, 0x04	; 4
    3ff8:	08 f0       	brcs	.+2      	; 0x3ffc <DIO_enumConnectPullUp+0x20>
    3ffa:	3e c1       	rjmp	.+636    	; 0x4278 <DIO_enumConnectPullUp+0x29c>
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	88 30       	cpi	r24, 0x08	; 8
    4000:	08 f0       	brcs	.+2      	; 0x4004 <DIO_enumConnectPullUp+0x28>
    4002:	3a c1       	rjmp	.+628    	; 0x4278 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	28 2f       	mov	r18, r24
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	3e 83       	std	Y+6, r19	; 0x06
    400c:	2d 83       	std	Y+5, r18	; 0x05
    400e:	8d 81       	ldd	r24, Y+5	; 0x05
    4010:	9e 81       	ldd	r25, Y+6	; 0x06
    4012:	81 30       	cpi	r24, 0x01	; 1
    4014:	91 05       	cpc	r25, r1
    4016:	09 f4       	brne	.+2      	; 0x401a <DIO_enumConnectPullUp+0x3e>
    4018:	5d c0       	rjmp	.+186    	; 0x40d4 <DIO_enumConnectPullUp+0xf8>
    401a:	2d 81       	ldd	r18, Y+5	; 0x05
    401c:	3e 81       	ldd	r19, Y+6	; 0x06
    401e:	22 30       	cpi	r18, 0x02	; 2
    4020:	31 05       	cpc	r19, r1
    4022:	2c f4       	brge	.+10     	; 0x402e <DIO_enumConnectPullUp+0x52>
    4024:	8d 81       	ldd	r24, Y+5	; 0x05
    4026:	9e 81       	ldd	r25, Y+6	; 0x06
    4028:	00 97       	sbiw	r24, 0x00	; 0
    402a:	71 f0       	breq	.+28     	; 0x4048 <DIO_enumConnectPullUp+0x6c>
    402c:	26 c1       	rjmp	.+588    	; 0x427a <DIO_enumConnectPullUp+0x29e>
    402e:	2d 81       	ldd	r18, Y+5	; 0x05
    4030:	3e 81       	ldd	r19, Y+6	; 0x06
    4032:	22 30       	cpi	r18, 0x02	; 2
    4034:	31 05       	cpc	r19, r1
    4036:	09 f4       	brne	.+2      	; 0x403a <DIO_enumConnectPullUp+0x5e>
    4038:	93 c0       	rjmp	.+294    	; 0x4160 <DIO_enumConnectPullUp+0x184>
    403a:	8d 81       	ldd	r24, Y+5	; 0x05
    403c:	9e 81       	ldd	r25, Y+6	; 0x06
    403e:	83 30       	cpi	r24, 0x03	; 3
    4040:	91 05       	cpc	r25, r1
    4042:	09 f4       	brne	.+2      	; 0x4046 <DIO_enumConnectPullUp+0x6a>
    4044:	d3 c0       	rjmp	.+422    	; 0x41ec <DIO_enumConnectPullUp+0x210>
    4046:	19 c1       	rjmp	.+562    	; 0x427a <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    4048:	8c 81       	ldd	r24, Y+4	; 0x04
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	71 f5       	brne	.+92     	; 0x40aa <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    404e:	a0 e5       	ldi	r26, 0x50	; 80
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	e0 e5       	ldi	r30, 0x50	; 80
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	80 81       	ld	r24, Z
    4058:	8b 7f       	andi	r24, 0xFB	; 251
    405a:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    405c:	aa e3       	ldi	r26, 0x3A	; 58
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	ea e3       	ldi	r30, 0x3A	; 58
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	48 2f       	mov	r20, r24
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
    406a:	28 2f       	mov	r18, r24
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <DIO_enumConnectPullUp+0x9c>
    4074:	88 0f       	add	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	2a 95       	dec	r18
    407a:	e2 f7       	brpl	.-8      	; 0x4074 <DIO_enumConnectPullUp+0x98>
    407c:	80 95       	com	r24
    407e:	84 23       	and	r24, r20
    4080:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    4082:	ab e3       	ldi	r26, 0x3B	; 59
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	eb e3       	ldi	r30, 0x3B	; 59
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	48 2f       	mov	r20, r24
    408e:	8b 81       	ldd	r24, Y+3	; 0x03
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	02 2e       	mov	r0, r18
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <DIO_enumConnectPullUp+0xc4>
    409c:	88 0f       	add	r24, r24
    409e:	99 1f       	adc	r25, r25
    40a0:	0a 94       	dec	r0
    40a2:	e2 f7       	brpl	.-8      	; 0x409c <DIO_enumConnectPullUp+0xc0>
    40a4:	84 2b       	or	r24, r20
    40a6:	8c 93       	st	X, r24
    40a8:	e8 c0       	rjmp	.+464    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    40aa:	ab e3       	ldi	r26, 0x3B	; 59
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	eb e3       	ldi	r30, 0x3B	; 59
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	48 2f       	mov	r20, r24
    40b6:	8b 81       	ldd	r24, Y+3	; 0x03
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	02 2e       	mov	r0, r18
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <DIO_enumConnectPullUp+0xec>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	0a 94       	dec	r0
    40ca:	e2 f7       	brpl	.-8      	; 0x40c4 <DIO_enumConnectPullUp+0xe8>
    40cc:	80 95       	com	r24
    40ce:	84 23       	and	r24, r20
    40d0:	8c 93       	st	X, r24
    40d2:	d3 c0       	rjmp	.+422    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    40d4:	8c 81       	ldd	r24, Y+4	; 0x04
    40d6:	81 30       	cpi	r24, 0x01	; 1
    40d8:	71 f5       	brne	.+92     	; 0x4136 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    40da:	a0 e5       	ldi	r26, 0x50	; 80
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	e0 e5       	ldi	r30, 0x50	; 80
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	8b 7f       	andi	r24, 0xFB	; 251
    40e6:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    40e8:	a7 e3       	ldi	r26, 0x37	; 55
    40ea:	b0 e0       	ldi	r27, 0x00	; 0
    40ec:	e7 e3       	ldi	r30, 0x37	; 55
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	80 81       	ld	r24, Z
    40f2:	48 2f       	mov	r20, r24
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	28 2f       	mov	r18, r24
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	02 c0       	rjmp	.+4      	; 0x4104 <DIO_enumConnectPullUp+0x128>
    4100:	88 0f       	add	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	2a 95       	dec	r18
    4106:	e2 f7       	brpl	.-8      	; 0x4100 <DIO_enumConnectPullUp+0x124>
    4108:	80 95       	com	r24
    410a:	84 23       	and	r24, r20
    410c:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    410e:	a8 e3       	ldi	r26, 0x38	; 56
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	e8 e3       	ldi	r30, 0x38	; 56
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	48 2f       	mov	r20, r24
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	28 2f       	mov	r18, r24
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	02 2e       	mov	r0, r18
    4126:	02 c0       	rjmp	.+4      	; 0x412c <DIO_enumConnectPullUp+0x150>
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	0a 94       	dec	r0
    412e:	e2 f7       	brpl	.-8      	; 0x4128 <DIO_enumConnectPullUp+0x14c>
    4130:	84 2b       	or	r24, r20
    4132:	8c 93       	st	X, r24
    4134:	a2 c0       	rjmp	.+324    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    4136:	a8 e3       	ldi	r26, 0x38	; 56
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	e8 e3       	ldi	r30, 0x38	; 56
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	80 81       	ld	r24, Z
    4140:	48 2f       	mov	r20, r24
    4142:	8b 81       	ldd	r24, Y+3	; 0x03
    4144:	28 2f       	mov	r18, r24
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	02 2e       	mov	r0, r18
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <DIO_enumConnectPullUp+0x178>
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	0a 94       	dec	r0
    4156:	e2 f7       	brpl	.-8      	; 0x4150 <DIO_enumConnectPullUp+0x174>
    4158:	80 95       	com	r24
    415a:	84 23       	and	r24, r20
    415c:	8c 93       	st	X, r24
    415e:	8d c0       	rjmp	.+282    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    4160:	8c 81       	ldd	r24, Y+4	; 0x04
    4162:	81 30       	cpi	r24, 0x01	; 1
    4164:	71 f5       	brne	.+92     	; 0x41c2 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD );
    4166:	a0 e5       	ldi	r26, 0x50	; 80
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e0 e5       	ldi	r30, 0x50	; 80
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	8b 7f       	andi	r24, 0xFB	; 251
    4172:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    4174:	a4 e3       	ldi	r26, 0x34	; 52
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e4 e3       	ldi	r30, 0x34	; 52
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	48 2f       	mov	r20, r24
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	28 2f       	mov	r18, r24
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <DIO_enumConnectPullUp+0x1b4>
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	2a 95       	dec	r18
    4192:	e2 f7       	brpl	.-8      	; 0x418c <DIO_enumConnectPullUp+0x1b0>
    4194:	80 95       	com	r24
    4196:	84 23       	and	r24, r20
    4198:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    419a:	a5 e3       	ldi	r26, 0x35	; 53
    419c:	b0 e0       	ldi	r27, 0x00	; 0
    419e:	e5 e3       	ldi	r30, 0x35	; 53
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	80 81       	ld	r24, Z
    41a4:	48 2f       	mov	r20, r24
    41a6:	8b 81       	ldd	r24, Y+3	; 0x03
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	02 2e       	mov	r0, r18
    41b2:	02 c0       	rjmp	.+4      	; 0x41b8 <DIO_enumConnectPullUp+0x1dc>
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	0a 94       	dec	r0
    41ba:	e2 f7       	brpl	.-8      	; 0x41b4 <DIO_enumConnectPullUp+0x1d8>
    41bc:	84 2b       	or	r24, r20
    41be:	8c 93       	st	X, r24
    41c0:	5c c0       	rjmp	.+184    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    41c2:	a5 e3       	ldi	r26, 0x35	; 53
    41c4:	b0 e0       	ldi	r27, 0x00	; 0
    41c6:	e5 e3       	ldi	r30, 0x35	; 53
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	48 2f       	mov	r20, r24
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	28 2f       	mov	r18, r24
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	02 2e       	mov	r0, r18
    41da:	02 c0       	rjmp	.+4      	; 0x41e0 <DIO_enumConnectPullUp+0x204>
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	0a 94       	dec	r0
    41e2:	e2 f7       	brpl	.-8      	; 0x41dc <DIO_enumConnectPullUp+0x200>
    41e4:	80 95       	com	r24
    41e6:	84 23       	and	r24, r20
    41e8:	8c 93       	st	X, r24
    41ea:	47 c0       	rjmp	.+142    	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    41ec:	8c 81       	ldd	r24, Y+4	; 0x04
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	71 f5       	brne	.+92     	; 0x424e <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    41f2:	a0 e5       	ldi	r26, 0x50	; 80
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	e0 e5       	ldi	r30, 0x50	; 80
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	80 81       	ld	r24, Z
    41fc:	8b 7f       	andi	r24, 0xFB	; 251
    41fe:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    4200:	a1 e3       	ldi	r26, 0x31	; 49
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	e1 e3       	ldi	r30, 0x31	; 49
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	80 81       	ld	r24, Z
    420a:	48 2f       	mov	r20, r24
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	28 2f       	mov	r18, r24
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 c0       	rjmp	.+4      	; 0x421c <DIO_enumConnectPullUp+0x240>
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	2a 95       	dec	r18
    421e:	e2 f7       	brpl	.-8      	; 0x4218 <DIO_enumConnectPullUp+0x23c>
    4220:	80 95       	com	r24
    4222:	84 23       	and	r24, r20
    4224:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    4226:	a2 e3       	ldi	r26, 0x32	; 50
    4228:	b0 e0       	ldi	r27, 0x00	; 0
    422a:	e2 e3       	ldi	r30, 0x32	; 50
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	80 81       	ld	r24, Z
    4230:	48 2f       	mov	r20, r24
    4232:	8b 81       	ldd	r24, Y+3	; 0x03
    4234:	28 2f       	mov	r18, r24
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	02 2e       	mov	r0, r18
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <DIO_enumConnectPullUp+0x268>
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	0a 94       	dec	r0
    4246:	e2 f7       	brpl	.-8      	; 0x4240 <DIO_enumConnectPullUp+0x264>
    4248:	84 2b       	or	r24, r20
    424a:	8c 93       	st	X, r24
    424c:	16 c0       	rjmp	.+44     	; 0x427a <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    424e:	a2 e3       	ldi	r26, 0x32	; 50
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	e2 e3       	ldi	r30, 0x32	; 50
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	48 2f       	mov	r20, r24
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	02 2e       	mov	r0, r18
    4266:	02 c0       	rjmp	.+4      	; 0x426c <DIO_enumConnectPullUp+0x290>
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	0a 94       	dec	r0
    426e:	e2 f7       	brpl	.-8      	; 0x4268 <DIO_enumConnectPullUp+0x28c>
    4270:	80 95       	com	r24
    4272:	84 23       	and	r24, r20
    4274:	8c 93       	st	X, r24
    4276:	01 c0       	rjmp	.+2      	; 0x427a <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    4278:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    427a:	89 81       	ldd	r24, Y+1	; 0x01
}
    427c:	26 96       	adiw	r28, 0x06	; 6
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	08 95       	ret

0000428e <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	00 d0       	rcall	.+0      	; 0x4294 <DIO_vWriteLowNibble+0x6>
    4294:	00 d0       	rcall	.+0      	; 0x4296 <DIO_vWriteLowNibble+0x8>
    4296:	0f 92       	push	r0
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	8a 83       	std	Y+2, r24	; 0x02
    429e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    42a4:	8a 81       	ldd	r24, Y+2	; 0x02
    42a6:	84 30       	cpi	r24, 0x04	; 4
    42a8:	08 f0       	brcs	.+2      	; 0x42ac <DIO_vWriteLowNibble+0x1e>
    42aa:	62 c0       	rjmp	.+196    	; 0x4370 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	8f 70       	andi	r24, 0x0F	; 15
    42b0:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	28 2f       	mov	r18, r24
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	3d 83       	std	Y+5, r19	; 0x05
    42ba:	2c 83       	std	Y+4, r18	; 0x04
    42bc:	8c 81       	ldd	r24, Y+4	; 0x04
    42be:	9d 81       	ldd	r25, Y+5	; 0x05
    42c0:	81 30       	cpi	r24, 0x01	; 1
    42c2:	91 05       	cpc	r25, r1
    42c4:	29 f1       	breq	.+74     	; 0x4310 <DIO_vWriteLowNibble+0x82>
    42c6:	2c 81       	ldd	r18, Y+4	; 0x04
    42c8:	3d 81       	ldd	r19, Y+5	; 0x05
    42ca:	22 30       	cpi	r18, 0x02	; 2
    42cc:	31 05       	cpc	r19, r1
    42ce:	2c f4       	brge	.+10     	; 0x42da <DIO_vWriteLowNibble+0x4c>
    42d0:	8c 81       	ldd	r24, Y+4	; 0x04
    42d2:	9d 81       	ldd	r25, Y+5	; 0x05
    42d4:	00 97       	sbiw	r24, 0x00	; 0
    42d6:	61 f0       	breq	.+24     	; 0x42f0 <DIO_vWriteLowNibble+0x62>
    42d8:	4c c0       	rjmp	.+152    	; 0x4372 <DIO_vWriteLowNibble+0xe4>
    42da:	2c 81       	ldd	r18, Y+4	; 0x04
    42dc:	3d 81       	ldd	r19, Y+5	; 0x05
    42de:	22 30       	cpi	r18, 0x02	; 2
    42e0:	31 05       	cpc	r19, r1
    42e2:	31 f1       	breq	.+76     	; 0x4330 <DIO_vWriteLowNibble+0xa2>
    42e4:	8c 81       	ldd	r24, Y+4	; 0x04
    42e6:	9d 81       	ldd	r25, Y+5	; 0x05
    42e8:	83 30       	cpi	r24, 0x03	; 3
    42ea:	91 05       	cpc	r25, r1
    42ec:	89 f1       	breq	.+98     	; 0x4350 <DIO_vWriteLowNibble+0xc2>
    42ee:	41 c0       	rjmp	.+130    	; 0x4372 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    42f0:	ab e3       	ldi	r26, 0x3B	; 59
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	eb e3       	ldi	r30, 0x3B	; 59
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	80 81       	ld	r24, Z
    42fa:	80 7f       	andi	r24, 0xF0	; 240
    42fc:	8c 93       	st	X, r24
      PORTA_REG |= value;
    42fe:	ab e3       	ldi	r26, 0x3B	; 59
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	eb e3       	ldi	r30, 0x3B	; 59
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	90 81       	ld	r25, Z
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	89 2b       	or	r24, r25
    430c:	8c 93       	st	X, r24
    430e:	31 c0       	rjmp	.+98     	; 0x4372 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    4310:	a8 e3       	ldi	r26, 0x38	; 56
    4312:	b0 e0       	ldi	r27, 0x00	; 0
    4314:	e8 e3       	ldi	r30, 0x38	; 56
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	80 81       	ld	r24, Z
    431a:	80 7f       	andi	r24, 0xF0	; 240
    431c:	8c 93       	st	X, r24
      PORTB_REG |= value;
    431e:	a8 e3       	ldi	r26, 0x38	; 56
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	e8 e3       	ldi	r30, 0x38	; 56
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	90 81       	ld	r25, Z
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	89 2b       	or	r24, r25
    432c:	8c 93       	st	X, r24
    432e:	21 c0       	rjmp	.+66     	; 0x4372 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    4330:	a5 e3       	ldi	r26, 0x35	; 53
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	e5 e3       	ldi	r30, 0x35	; 53
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	80 7f       	andi	r24, 0xF0	; 240
    433c:	8c 93       	st	X, r24
      PORTC_REG |= value;
    433e:	a5 e3       	ldi	r26, 0x35	; 53
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	e5 e3       	ldi	r30, 0x35	; 53
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	90 81       	ld	r25, Z
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	89 2b       	or	r24, r25
    434c:	8c 93       	st	X, r24
    434e:	11 c0       	rjmp	.+34     	; 0x4372 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    4350:	a2 e3       	ldi	r26, 0x32	; 50
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	e2 e3       	ldi	r30, 0x32	; 50
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	80 81       	ld	r24, Z
    435a:	80 7f       	andi	r24, 0xF0	; 240
    435c:	8c 93       	st	X, r24
      PORTD_REG |= value;
    435e:	a2 e3       	ldi	r26, 0x32	; 50
    4360:	b0 e0       	ldi	r27, 0x00	; 0
    4362:	e2 e3       	ldi	r30, 0x32	; 50
    4364:	f0 e0       	ldi	r31, 0x00	; 0
    4366:	90 81       	ld	r25, Z
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	89 2b       	or	r24, r25
    436c:	8c 93       	st	X, r24
    436e:	01 c0       	rjmp	.+2      	; 0x4372 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    4370:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    4372:	89 81       	ldd	r24, Y+1	; 0x01
}
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	cf 91       	pop	r28
    4380:	df 91       	pop	r29
    4382:	08 95       	ret

00004384 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    4384:	df 93       	push	r29
    4386:	cf 93       	push	r28
    4388:	00 d0       	rcall	.+0      	; 0x438a <DIO_vWriteHighNibble+0x6>
    438a:	00 d0       	rcall	.+0      	; 0x438c <DIO_vWriteHighNibble+0x8>
    438c:	0f 92       	push	r0
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    4392:	8a 83       	std	Y+2, r24	; 0x02
    4394:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    439a:	8a 81       	ldd	r24, Y+2	; 0x02
    439c:	84 30       	cpi	r24, 0x04	; 4
    439e:	08 f0       	brcs	.+2      	; 0x43a2 <DIO_vWriteHighNibble+0x1e>
    43a0:	63 c0       	rjmp	.+198    	; 0x4468 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    43a2:	8b 81       	ldd	r24, Y+3	; 0x03
    43a4:	82 95       	swap	r24
    43a6:	80 7f       	andi	r24, 0xF0	; 240
    43a8:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    43aa:	8a 81       	ldd	r24, Y+2	; 0x02
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	3d 83       	std	Y+5, r19	; 0x05
    43b2:	2c 83       	std	Y+4, r18	; 0x04
    43b4:	8c 81       	ldd	r24, Y+4	; 0x04
    43b6:	9d 81       	ldd	r25, Y+5	; 0x05
    43b8:	81 30       	cpi	r24, 0x01	; 1
    43ba:	91 05       	cpc	r25, r1
    43bc:	29 f1       	breq	.+74     	; 0x4408 <DIO_vWriteHighNibble+0x84>
    43be:	2c 81       	ldd	r18, Y+4	; 0x04
    43c0:	3d 81       	ldd	r19, Y+5	; 0x05
    43c2:	22 30       	cpi	r18, 0x02	; 2
    43c4:	31 05       	cpc	r19, r1
    43c6:	2c f4       	brge	.+10     	; 0x43d2 <DIO_vWriteHighNibble+0x4e>
    43c8:	8c 81       	ldd	r24, Y+4	; 0x04
    43ca:	9d 81       	ldd	r25, Y+5	; 0x05
    43cc:	00 97       	sbiw	r24, 0x00	; 0
    43ce:	61 f0       	breq	.+24     	; 0x43e8 <DIO_vWriteHighNibble+0x64>
    43d0:	4c c0       	rjmp	.+152    	; 0x446a <DIO_vWriteHighNibble+0xe6>
    43d2:	2c 81       	ldd	r18, Y+4	; 0x04
    43d4:	3d 81       	ldd	r19, Y+5	; 0x05
    43d6:	22 30       	cpi	r18, 0x02	; 2
    43d8:	31 05       	cpc	r19, r1
    43da:	31 f1       	breq	.+76     	; 0x4428 <DIO_vWriteHighNibble+0xa4>
    43dc:	8c 81       	ldd	r24, Y+4	; 0x04
    43de:	9d 81       	ldd	r25, Y+5	; 0x05
    43e0:	83 30       	cpi	r24, 0x03	; 3
    43e2:	91 05       	cpc	r25, r1
    43e4:	89 f1       	breq	.+98     	; 0x4448 <DIO_vWriteHighNibble+0xc4>
    43e6:	41 c0       	rjmp	.+130    	; 0x446a <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    43e8:	ab e3       	ldi	r26, 0x3B	; 59
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	eb e3       	ldi	r30, 0x3B	; 59
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	8f 70       	andi	r24, 0x0F	; 15
    43f4:	8c 93       	st	X, r24
      PORTA_REG|= value;
    43f6:	ab e3       	ldi	r26, 0x3B	; 59
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	eb e3       	ldi	r30, 0x3B	; 59
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	90 81       	ld	r25, Z
    4400:	8b 81       	ldd	r24, Y+3	; 0x03
    4402:	89 2b       	or	r24, r25
    4404:	8c 93       	st	X, r24
    4406:	31 c0       	rjmp	.+98     	; 0x446a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    4408:	a8 e3       	ldi	r26, 0x38	; 56
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e8 e3       	ldi	r30, 0x38	; 56
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	8f 70       	andi	r24, 0x0F	; 15
    4414:	8c 93       	st	X, r24
      PORTB_REG |= value;
    4416:	a8 e3       	ldi	r26, 0x38	; 56
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	e8 e3       	ldi	r30, 0x38	; 56
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	90 81       	ld	r25, Z
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	89 2b       	or	r24, r25
    4424:	8c 93       	st	X, r24
    4426:	21 c0       	rjmp	.+66     	; 0x446a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    4428:	a5 e3       	ldi	r26, 0x35	; 53
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	e5 e3       	ldi	r30, 0x35	; 53
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	8f 70       	andi	r24, 0x0F	; 15
    4434:	8c 93       	st	X, r24
      PORTC_REG |= value;
    4436:	a5 e3       	ldi	r26, 0x35	; 53
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	e5 e3       	ldi	r30, 0x35	; 53
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	90 81       	ld	r25, Z
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	89 2b       	or	r24, r25
    4444:	8c 93       	st	X, r24
    4446:	11 c0       	rjmp	.+34     	; 0x446a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    4448:	a2 e3       	ldi	r26, 0x32	; 50
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	e2 e3       	ldi	r30, 0x32	; 50
    444e:	f0 e0       	ldi	r31, 0x00	; 0
    4450:	80 81       	ld	r24, Z
    4452:	8f 70       	andi	r24, 0x0F	; 15
    4454:	8c 93       	st	X, r24
      PORTD_REG |= value;
    4456:	a2 e3       	ldi	r26, 0x32	; 50
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	e2 e3       	ldi	r30, 0x32	; 50
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	90 81       	ld	r25, Z
    4460:	8b 81       	ldd	r24, Y+3	; 0x03
    4462:	89 2b       	or	r24, r25
    4464:	8c 93       	st	X, r24
    4466:	01 c0       	rjmp	.+2      	; 0x446a <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    4468:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    446a:	89 81       	ldd	r24, Y+1	; 0x01
}
    446c:	0f 90       	pop	r0
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_ErrorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{DIO_ErrorStatus LOC_enumState = DIO_OK;
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	00 d0       	rcall	.+0      	; 0x4482 <DIO_vSetLowNibbleDir+0x6>
    4482:	00 d0       	rcall	.+0      	; 0x4484 <DIO_vSetLowNibbleDir+0x8>
    4484:	0f 92       	push	r0
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	8a 83       	std	Y+2, r24	; 0x02
    448c:	6b 83       	std	Y+3, r22	; 0x03
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    4492:	8a 81       	ldd	r24, Y+2	; 0x02
    4494:	84 30       	cpi	r24, 0x04	; 4
    4496:	08 f0       	brcs	.+2      	; 0x449a <DIO_vSetLowNibbleDir+0x1e>
    4498:	62 c0       	rjmp	.+196    	; 0x455e <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    449a:	8b 81       	ldd	r24, Y+3	; 0x03
    449c:	8f 70       	andi	r24, 0x0F	; 15
    449e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    44a0:	8a 81       	ldd	r24, Y+2	; 0x02
    44a2:	28 2f       	mov	r18, r24
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	3d 83       	std	Y+5, r19	; 0x05
    44a8:	2c 83       	std	Y+4, r18	; 0x04
    44aa:	8c 81       	ldd	r24, Y+4	; 0x04
    44ac:	9d 81       	ldd	r25, Y+5	; 0x05
    44ae:	81 30       	cpi	r24, 0x01	; 1
    44b0:	91 05       	cpc	r25, r1
    44b2:	29 f1       	breq	.+74     	; 0x44fe <DIO_vSetLowNibbleDir+0x82>
    44b4:	2c 81       	ldd	r18, Y+4	; 0x04
    44b6:	3d 81       	ldd	r19, Y+5	; 0x05
    44b8:	22 30       	cpi	r18, 0x02	; 2
    44ba:	31 05       	cpc	r19, r1
    44bc:	2c f4       	brge	.+10     	; 0x44c8 <DIO_vSetLowNibbleDir+0x4c>
    44be:	8c 81       	ldd	r24, Y+4	; 0x04
    44c0:	9d 81       	ldd	r25, Y+5	; 0x05
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	61 f0       	breq	.+24     	; 0x44de <DIO_vSetLowNibbleDir+0x62>
    44c6:	4c c0       	rjmp	.+152    	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
    44c8:	2c 81       	ldd	r18, Y+4	; 0x04
    44ca:	3d 81       	ldd	r19, Y+5	; 0x05
    44cc:	22 30       	cpi	r18, 0x02	; 2
    44ce:	31 05       	cpc	r19, r1
    44d0:	31 f1       	breq	.+76     	; 0x451e <DIO_vSetLowNibbleDir+0xa2>
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	9d 81       	ldd	r25, Y+5	; 0x05
    44d6:	83 30       	cpi	r24, 0x03	; 3
    44d8:	91 05       	cpc	r25, r1
    44da:	89 f1       	breq	.+98     	; 0x453e <DIO_vSetLowNibbleDir+0xc2>
    44dc:	41 c0       	rjmp	.+130    	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    44de:	aa e3       	ldi	r26, 0x3A	; 58
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	ea e3       	ldi	r30, 0x3A	; 58
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	80 7f       	andi	r24, 0xF0	; 240
    44ea:	8c 93       	st	X, r24
      DDRA_REG |= value;
    44ec:	aa e3       	ldi	r26, 0x3A	; 58
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	ea e3       	ldi	r30, 0x3A	; 58
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	90 81       	ld	r25, Z
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	89 2b       	or	r24, r25
    44fa:	8c 93       	st	X, r24
    44fc:	31 c0       	rjmp	.+98     	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    44fe:	a7 e3       	ldi	r26, 0x37	; 55
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	e7 e3       	ldi	r30, 0x37	; 55
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	80 7f       	andi	r24, 0xF0	; 240
    450a:	8c 93       	st	X, r24
      DDRB_REG |= value;
    450c:	a7 e3       	ldi	r26, 0x37	; 55
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	e7 e3       	ldi	r30, 0x37	; 55
    4512:	f0 e0       	ldi	r31, 0x00	; 0
    4514:	90 81       	ld	r25, Z
    4516:	8b 81       	ldd	r24, Y+3	; 0x03
    4518:	89 2b       	or	r24, r25
    451a:	8c 93       	st	X, r24
    451c:	21 c0       	rjmp	.+66     	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    451e:	a4 e3       	ldi	r26, 0x34	; 52
    4520:	b0 e0       	ldi	r27, 0x00	; 0
    4522:	e4 e3       	ldi	r30, 0x34	; 52
    4524:	f0 e0       	ldi	r31, 0x00	; 0
    4526:	80 81       	ld	r24, Z
    4528:	80 7f       	andi	r24, 0xF0	; 240
    452a:	8c 93       	st	X, r24
      DDRC_REG |= value;
    452c:	a4 e3       	ldi	r26, 0x34	; 52
    452e:	b0 e0       	ldi	r27, 0x00	; 0
    4530:	e4 e3       	ldi	r30, 0x34	; 52
    4532:	f0 e0       	ldi	r31, 0x00	; 0
    4534:	90 81       	ld	r25, Z
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	89 2b       	or	r24, r25
    453a:	8c 93       	st	X, r24
    453c:	11 c0       	rjmp	.+34     	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    453e:	a1 e3       	ldi	r26, 0x31	; 49
    4540:	b0 e0       	ldi	r27, 0x00	; 0
    4542:	e1 e3       	ldi	r30, 0x31	; 49
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	80 81       	ld	r24, Z
    4548:	80 7f       	andi	r24, 0xF0	; 240
    454a:	8c 93       	st	X, r24
      DDRD_REG|= value;
    454c:	a1 e3       	ldi	r26, 0x31	; 49
    454e:	b0 e0       	ldi	r27, 0x00	; 0
    4550:	e1 e3       	ldi	r30, 0x31	; 49
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	90 81       	ld	r25, Z
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	89 2b       	or	r24, r25
    455a:	8c 93       	st	X, r24
    455c:	01 c0       	rjmp	.+2      	; 0x4560 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    455e:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    4560:	89 81       	ldd	r24, Y+1	; 0x01
}
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	cf 91       	pop	r28
    456e:	df 91       	pop	r29
    4570:	08 95       	ret

00004572 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_ErrorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    4572:	df 93       	push	r29
    4574:	cf 93       	push	r28
    4576:	00 d0       	rcall	.+0      	; 0x4578 <DIO_vSetHighNibbleDir+0x6>
    4578:	00 d0       	rcall	.+0      	; 0x457a <DIO_vSetHighNibbleDir+0x8>
    457a:	0f 92       	push	r0
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	8a 83       	std	Y+2, r24	; 0x02
    4582:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    4588:	8a 81       	ldd	r24, Y+2	; 0x02
    458a:	84 30       	cpi	r24, 0x04	; 4
    458c:	08 f0       	brcs	.+2      	; 0x4590 <DIO_vSetHighNibbleDir+0x1e>
    458e:	63 c0       	rjmp	.+198    	; 0x4656 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    4590:	8b 81       	ldd	r24, Y+3	; 0x03
    4592:	82 95       	swap	r24
    4594:	80 7f       	andi	r24, 0xF0	; 240
    4596:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    4598:	8a 81       	ldd	r24, Y+2	; 0x02
    459a:	28 2f       	mov	r18, r24
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	3d 83       	std	Y+5, r19	; 0x05
    45a0:	2c 83       	std	Y+4, r18	; 0x04
    45a2:	8c 81       	ldd	r24, Y+4	; 0x04
    45a4:	9d 81       	ldd	r25, Y+5	; 0x05
    45a6:	81 30       	cpi	r24, 0x01	; 1
    45a8:	91 05       	cpc	r25, r1
    45aa:	29 f1       	breq	.+74     	; 0x45f6 <DIO_vSetHighNibbleDir+0x84>
    45ac:	2c 81       	ldd	r18, Y+4	; 0x04
    45ae:	3d 81       	ldd	r19, Y+5	; 0x05
    45b0:	22 30       	cpi	r18, 0x02	; 2
    45b2:	31 05       	cpc	r19, r1
    45b4:	2c f4       	brge	.+10     	; 0x45c0 <DIO_vSetHighNibbleDir+0x4e>
    45b6:	8c 81       	ldd	r24, Y+4	; 0x04
    45b8:	9d 81       	ldd	r25, Y+5	; 0x05
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	61 f0       	breq	.+24     	; 0x45d6 <DIO_vSetHighNibbleDir+0x64>
    45be:	4c c0       	rjmp	.+152    	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
    45c0:	2c 81       	ldd	r18, Y+4	; 0x04
    45c2:	3d 81       	ldd	r19, Y+5	; 0x05
    45c4:	22 30       	cpi	r18, 0x02	; 2
    45c6:	31 05       	cpc	r19, r1
    45c8:	31 f1       	breq	.+76     	; 0x4616 <DIO_vSetHighNibbleDir+0xa4>
    45ca:	8c 81       	ldd	r24, Y+4	; 0x04
    45cc:	9d 81       	ldd	r25, Y+5	; 0x05
    45ce:	83 30       	cpi	r24, 0x03	; 3
    45d0:	91 05       	cpc	r25, r1
    45d2:	89 f1       	breq	.+98     	; 0x4636 <DIO_vSetHighNibbleDir+0xc4>
    45d4:	41 c0       	rjmp	.+130    	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    45d6:	aa e3       	ldi	r26, 0x3A	; 58
    45d8:	b0 e0       	ldi	r27, 0x00	; 0
    45da:	ea e3       	ldi	r30, 0x3A	; 58
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	8f 70       	andi	r24, 0x0F	; 15
    45e2:	8c 93       	st	X, r24
      DDRA_REG |= value;
    45e4:	aa e3       	ldi	r26, 0x3A	; 58
    45e6:	b0 e0       	ldi	r27, 0x00	; 0
    45e8:	ea e3       	ldi	r30, 0x3A	; 58
    45ea:	f0 e0       	ldi	r31, 0x00	; 0
    45ec:	90 81       	ld	r25, Z
    45ee:	8b 81       	ldd	r24, Y+3	; 0x03
    45f0:	89 2b       	or	r24, r25
    45f2:	8c 93       	st	X, r24
    45f4:	31 c0       	rjmp	.+98     	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    45f6:	a7 e3       	ldi	r26, 0x37	; 55
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	e7 e3       	ldi	r30, 0x37	; 55
    45fc:	f0 e0       	ldi	r31, 0x00	; 0
    45fe:	80 81       	ld	r24, Z
    4600:	8f 70       	andi	r24, 0x0F	; 15
    4602:	8c 93       	st	X, r24
      DDRB_REG |= value;
    4604:	a7 e3       	ldi	r26, 0x37	; 55
    4606:	b0 e0       	ldi	r27, 0x00	; 0
    4608:	e7 e3       	ldi	r30, 0x37	; 55
    460a:	f0 e0       	ldi	r31, 0x00	; 0
    460c:	90 81       	ld	r25, Z
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	89 2b       	or	r24, r25
    4612:	8c 93       	st	X, r24
    4614:	21 c0       	rjmp	.+66     	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    4616:	a4 e3       	ldi	r26, 0x34	; 52
    4618:	b0 e0       	ldi	r27, 0x00	; 0
    461a:	e4 e3       	ldi	r30, 0x34	; 52
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	80 81       	ld	r24, Z
    4620:	8f 70       	andi	r24, 0x0F	; 15
    4622:	8c 93       	st	X, r24
      DDRC_REG |= value;
    4624:	a4 e3       	ldi	r26, 0x34	; 52
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	e4 e3       	ldi	r30, 0x34	; 52
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	90 81       	ld	r25, Z
    462e:	8b 81       	ldd	r24, Y+3	; 0x03
    4630:	89 2b       	or	r24, r25
    4632:	8c 93       	st	X, r24
    4634:	11 c0       	rjmp	.+34     	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    4636:	a1 e3       	ldi	r26, 0x31	; 49
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e1 e3       	ldi	r30, 0x31	; 49
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	8f 70       	andi	r24, 0x0F	; 15
    4642:	8c 93       	st	X, r24
      DDRD_REG |= value;
    4644:	a1 e3       	ldi	r26, 0x31	; 49
    4646:	b0 e0       	ldi	r27, 0x00	; 0
    4648:	e1 e3       	ldi	r30, 0x31	; 49
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	90 81       	ld	r25, Z
    464e:	8b 81       	ldd	r24, Y+3	; 0x03
    4650:	89 2b       	or	r24, r25
    4652:	8c 93       	st	X, r24
    4654:	01 c0       	rjmp	.+2      	; 0x4658 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    4656:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    4658:	89 81       	ldd	r24, Y+1	; 0x01
}
    465a:	0f 90       	pop	r0
    465c:	0f 90       	pop	r0
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	cf 91       	pop	r28
    4666:	df 91       	pop	r29
    4668:	08 95       	ret

0000466a <EEPROM_write>:
 */
#include <avr/io.h>
#include "../Lib/BIT_MATH.h"
#include "../Lib/std_typs.h"
// دالة الكتابة (تدعم بيانات متعددة البايتات)
void EEPROM_write(unsigned short address, const u8 *data, u8 size) {
    466a:	df 93       	push	r29
    466c:	cf 93       	push	r28
    466e:	00 d0       	rcall	.+0      	; 0x4670 <EEPROM_write+0x6>
    4670:	00 d0       	rcall	.+0      	; 0x4672 <EEPROM_write+0x8>
    4672:	00 d0       	rcall	.+0      	; 0x4674 <EEPROM_write+0xa>
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	9b 83       	std	Y+3, r25	; 0x03
    467a:	8a 83       	std	Y+2, r24	; 0x02
    467c:	7d 83       	std	Y+5, r23	; 0x05
    467e:	6c 83       	std	Y+4, r22	; 0x04
    4680:	4e 83       	std	Y+6, r20	; 0x06
    for(u8 i = 0; i < size; i++) {
    4682:	19 82       	std	Y+1, r1	; 0x01
    4684:	33 c0       	rjmp	.+102    	; 0x46ec <EEPROM_write+0x82>
        EEAR = address + i; // تعيين العنوان الحالي
    4686:	ee e3       	ldi	r30, 0x3E	; 62
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	28 2f       	mov	r18, r24
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	8a 81       	ldd	r24, Y+2	; 0x02
    4692:	9b 81       	ldd	r25, Y+3	; 0x03
    4694:	82 0f       	add	r24, r18
    4696:	93 1f       	adc	r25, r19
    4698:	91 83       	std	Z+1, r25	; 0x01
    469a:	80 83       	st	Z, r24
        EEDR = data[i]; // تعيين البيانات
    469c:	ad e3       	ldi	r26, 0x3D	; 61
    469e:	b0 e0       	ldi	r27, 0x00	; 0
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	28 2f       	mov	r18, r24
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	8c 81       	ldd	r24, Y+4	; 0x04
    46a8:	9d 81       	ldd	r25, Y+5	; 0x05
    46aa:	fc 01       	movw	r30, r24
    46ac:	e2 0f       	add	r30, r18
    46ae:	f3 1f       	adc	r31, r19
    46b0:	80 81       	ld	r24, Z
    46b2:	8c 93       	st	X, r24
        SET_BIT(EECR, EEMWE); // تمكين الكتابة
    46b4:	ac e3       	ldi	r26, 0x3C	; 60
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	ec e3       	ldi	r30, 0x3C	; 60
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	84 60       	ori	r24, 0x04	; 4
    46c0:	8c 93       	st	X, r24
        SET_BIT(EECR, EEWE); // بدء الكتابة
    46c2:	ac e3       	ldi	r26, 0x3C	; 60
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	ec e3       	ldi	r30, 0x3C	; 60
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	80 81       	ld	r24, Z
    46cc:	82 60       	ori	r24, 0x02	; 2
    46ce:	8c 93       	st	X, r24
        while (GET_BIT(EECR, EEWE)); // انتظار اكتمال الكتابة
    46d0:	ec e3       	ldi	r30, 0x3C	; 60
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	80 81       	ld	r24, Z
    46d6:	88 2f       	mov	r24, r24
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	82 70       	andi	r24, 0x02	; 2
    46dc:	90 70       	andi	r25, 0x00	; 0
    46de:	95 95       	asr	r25
    46e0:	87 95       	ror	r24
    46e2:	00 97       	sbiw	r24, 0x00	; 0
    46e4:	a9 f7       	brne	.-22     	; 0x46d0 <EEPROM_write+0x66>
#include <avr/io.h>
#include "../Lib/BIT_MATH.h"
#include "../Lib/std_typs.h"
// دالة الكتابة (تدعم بيانات متعددة البايتات)
void EEPROM_write(unsigned short address, const u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
    46ea:	89 83       	std	Y+1, r24	; 0x01
    46ec:	99 81       	ldd	r25, Y+1	; 0x01
    46ee:	8e 81       	ldd	r24, Y+6	; 0x06
    46f0:	98 17       	cp	r25, r24
    46f2:	48 f2       	brcs	.-110    	; 0x4686 <EEPROM_write+0x1c>
        EEDR = data[i]; // تعيين البيانات
        SET_BIT(EECR, EEMWE); // تمكين الكتابة
        SET_BIT(EECR, EEWE); // بدء الكتابة
        while (GET_BIT(EECR, EEWE)); // انتظار اكتمال الكتابة
    }
}
    46f4:	26 96       	adiw	r28, 0x06	; 6
    46f6:	0f b6       	in	r0, 0x3f	; 63
    46f8:	f8 94       	cli
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	0f be       	out	0x3f, r0	; 63
    46fe:	cd bf       	out	0x3d, r28	; 61
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	08 95       	ret

00004706 <EEPROM_read>:

// دالة القراءة (تدعم بيانات متعددة البايتات)
void EEPROM_read(unsigned short address, u8 *data, u8 size) {
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	00 d0       	rcall	.+0      	; 0x470c <EEPROM_read+0x6>
    470c:	00 d0       	rcall	.+0      	; 0x470e <EEPROM_read+0x8>
    470e:	00 d0       	rcall	.+0      	; 0x4710 <EEPROM_read+0xa>
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62
    4714:	9b 83       	std	Y+3, r25	; 0x03
    4716:	8a 83       	std	Y+2, r24	; 0x02
    4718:	7d 83       	std	Y+5, r23	; 0x05
    471a:	6c 83       	std	Y+4, r22	; 0x04
    471c:	4e 83       	std	Y+6, r20	; 0x06
    for(u8 i = 0; i < size; i++) {
    471e:	19 82       	std	Y+1, r1	; 0x01
    4720:	21 c0       	rjmp	.+66     	; 0x4764 <EEPROM_read+0x5e>
        EEAR = address + i; // تعيين العنوان الحالي
    4722:	ee e3       	ldi	r30, 0x3E	; 62
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	89 81       	ldd	r24, Y+1	; 0x01
    4728:	28 2f       	mov	r18, r24
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	9b 81       	ldd	r25, Y+3	; 0x03
    4730:	82 0f       	add	r24, r18
    4732:	93 1f       	adc	r25, r19
    4734:	91 83       	std	Z+1, r25	; 0x01
    4736:	80 83       	st	Z, r24
        SET_BIT(EECR, EERE); // بدء القراءة
    4738:	ac e3       	ldi	r26, 0x3C	; 60
    473a:	b0 e0       	ldi	r27, 0x00	; 0
    473c:	ec e3       	ldi	r30, 0x3C	; 60
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	81 60       	ori	r24, 0x01	; 1
    4744:	8c 93       	st	X, r24
        data[i] = EEDR; // تخزين البيانات المقروءة
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	28 2f       	mov	r18, r24
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	8c 81       	ldd	r24, Y+4	; 0x04
    474e:	9d 81       	ldd	r25, Y+5	; 0x05
    4750:	dc 01       	movw	r26, r24
    4752:	a2 0f       	add	r26, r18
    4754:	b3 1f       	adc	r27, r19
    4756:	ed e3       	ldi	r30, 0x3D	; 61
    4758:	f0 e0       	ldi	r31, 0x00	; 0
    475a:	80 81       	ld	r24, Z
    475c:	8c 93       	st	X, r24
    }
}

// دالة القراءة (تدعم بيانات متعددة البايتات)
void EEPROM_read(unsigned short address, u8 *data, u8 size) {
    for(u8 i = 0; i < size; i++) {
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	8f 5f       	subi	r24, 0xFF	; 255
    4762:	89 83       	std	Y+1, r24	; 0x01
    4764:	99 81       	ldd	r25, Y+1	; 0x01
    4766:	8e 81       	ldd	r24, Y+6	; 0x06
    4768:	98 17       	cp	r25, r24
    476a:	d8 f2       	brcs	.-74     	; 0x4722 <EEPROM_read+0x1c>
        EEAR = address + i; // تعيين العنوان الحالي
        SET_BIT(EECR, EERE); // بدء القراءة
        data[i] = EEDR; // تخزين البيانات المقروءة
    }
}
    476c:	26 96       	adiw	r28, 0x06	; 6
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	f8 94       	cli
    4772:	de bf       	out	0x3e, r29	; 62
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	cd bf       	out	0x3d, r28	; 61
    4778:	cf 91       	pop	r28
    477a:	df 91       	pop	r29
    477c:	08 95       	ret

0000477e <TWI_vInitMaster>:

/*___________________________________________________________________________________________________________________*/

/*Set master address to 0 if master will not be addressed*/
void TWI_vInitMaster(u8 Copy_u8Address)
{
    477e:	df 93       	push	r29
    4780:	cf 93       	push	r28
    4782:	0f 92       	push	r0
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR = (u8) (((F_CPU/SCL_Clock) - 16) / (2 * TWI_PRESCALLER));
    478a:	e0 e2       	ldi	r30, 0x20	; 32
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	#if TWI_PRESCALLER == PRESCALLER_BY_1
		TWSR = 0;
    4792:	e1 e2       	ldi	r30, 0x21	; 33
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	10 82       	st	Z, r1
	#else
		#error "wrong TWI_PRESCALLER config"
	#endif

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	88 23       	and	r24, r24
    479c:	29 f0       	breq	.+10     	; 0x47a8 <TWI_vInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
    479e:	e2 e2       	ldi	r30, 0x22	; 34
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	88 0f       	add	r24, r24
    47a6:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    47a8:	a6 e5       	ldi	r26, 0x56	; 86
    47aa:	b0 e0       	ldi	r27, 0x00	; 0
    47ac:	e6 e5       	ldi	r30, 0x56	; 86
    47ae:	f0 e0       	ldi	r31, 0x00	; 0
    47b0:	80 81       	ld	r24, Z
    47b2:	80 64       	ori	r24, 0x40	; 64
    47b4:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    47b6:	a6 e5       	ldi	r26, 0x56	; 86
    47b8:	b0 e0       	ldi	r27, 0x00	; 0
    47ba:	e6 e5       	ldi	r30, 0x56	; 86
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	80 81       	ld	r24, Z
    47c0:	84 60       	ori	r24, 0x04	; 4
    47c2:	8c 93       	st	X, r24
}
    47c4:	0f 90       	pop	r0
    47c6:	cf 91       	pop	r28
    47c8:	df 91       	pop	r29
    47ca:	08 95       	ret

000047cc <TWI_vInitSlave>:

void TWI_vInitSlave(u8 Copy_u8Address)
{
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	0f 92       	push	r0
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
    47d8:	e2 e2       	ldi	r30, 0x22	; 34
    47da:	f0 e0       	ldi	r31, 0x00	; 0
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	88 0f       	add	r24, r24
    47e0:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    47e2:	a6 e5       	ldi	r26, 0x56	; 86
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	e6 e5       	ldi	r30, 0x56	; 86
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	80 64       	ori	r24, 0x40	; 64
    47ee:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    47f0:	a6 e5       	ldi	r26, 0x56	; 86
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	e6 e5       	ldi	r30, 0x56	; 86
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	84 60       	ori	r24, 0x04	; 4
    47fc:	8c 93       	st	X, r24
}
    47fe:	0f 90       	pop	r0
    4800:	cf 91       	pop	r28
    4802:	df 91       	pop	r29
    4804:	08 95       	ret

00004806 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
    4806:	df 93       	push	r29
    4808:	cf 93       	push	r28
    480a:	0f 92       	push	r0
    480c:	cd b7       	in	r28, 0x3d	; 61
    480e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    4810:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    4812:	a6 e5       	ldi	r26, 0x56	; 86
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	e6 e5       	ldi	r30, 0x56	; 86
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	80 62       	ori	r24, 0x20	; 32
    481e:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    4820:	a6 e5       	ldi	r26, 0x56	; 86
    4822:	b0 e0       	ldi	r27, 0x00	; 0
    4824:	e6 e5       	ldi	r30, 0x56	; 86
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	80 81       	ld	r24, Z
    482a:	80 68       	ori	r24, 0x80	; 128
    482c:	8c 93       	st	X, r24
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
   while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    482e:	e6 e5       	ldi	r30, 0x56	; 86
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	88 23       	and	r24, r24
    4836:	dc f7       	brge	.-10     	; 0x482e <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
    4838:	e1 e2       	ldi	r30, 0x21	; 33
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	88 2f       	mov	r24, r24
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	88 7f       	andi	r24, 0xF8	; 248
    4844:	90 70       	andi	r25, 0x00	; 0
    4846:	88 30       	cpi	r24, 0x08	; 8
    4848:	91 05       	cpc	r25, r1
    484a:	11 f0       	breq	.+4      	; 0x4850 <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    4850:	89 81       	ldd	r24, Y+1	; 0x01
}
    4852:	0f 90       	pop	r0
    4854:	cf 91       	pop	r28
    4856:	df 91       	pop	r29
    4858:	08 95       	ret

0000485a <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
    485a:	df 93       	push	r29
    485c:	cf 93       	push	r28
    485e:	0f 92       	push	r0
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    4864:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    4866:	a6 e5       	ldi	r26, 0x56	; 86
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	e6 e5       	ldi	r30, 0x56	; 86
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	80 62       	ori	r24, 0x20	; 32
    4872:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4874:	a6 e5       	ldi	r26, 0x56	; 86
    4876:	b0 e0       	ldi	r27, 0x00	; 0
    4878:	e6 e5       	ldi	r30, 0x56	; 86
    487a:	f0 e0       	ldi	r31, 0x00	; 0
    487c:	80 81       	ld	r24, Z
    487e:	80 68       	ori	r24, 0x80	; 128
    4880:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    4882:	e6 e5       	ldi	r30, 0x56	; 86
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	80 81       	ld	r24, Z
    4888:	88 23       	and	r24, r24
    488a:	dc f7       	brge	.-10     	; 0x4882 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
    488c:	e1 e2       	ldi	r30, 0x21	; 33
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	88 2f       	mov	r24, r24
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	88 7f       	andi	r24, 0xF8	; 248
    4898:	90 70       	andi	r25, 0x00	; 0
    489a:	80 31       	cpi	r24, 0x10	; 16
    489c:	91 05       	cpc	r25, r1
    489e:	11 f0       	breq	.+4      	; 0x48a4 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
    48a0:	82 e0       	ldi	r24, 0x02	; 2
    48a2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    48a6:	0f 90       	pop	r0
    48a8:	cf 91       	pop	r28
    48aa:	df 91       	pop	r29
    48ac:	08 95       	ret

000048ae <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	00 d0       	rcall	.+0      	; 0x48b4 <TWI_SendSlaveAddressWithWrite+0x6>
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    48ba:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
    48bc:	e3 e2       	ldi	r30, 0x23	; 35
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	8a 81       	ldd	r24, Y+2	; 0x02
    48c2:	88 0f       	add	r24, r24
    48c4:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    48c6:	a3 e2       	ldi	r26, 0x23	; 35
    48c8:	b0 e0       	ldi	r27, 0x00	; 0
    48ca:	e3 e2       	ldi	r30, 0x23	; 35
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	80 81       	ld	r24, Z
    48d0:	8e 7f       	andi	r24, 0xFE	; 254
    48d2:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    48d4:	a6 e5       	ldi	r26, 0x56	; 86
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	e6 e5       	ldi	r30, 0x56	; 86
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	80 81       	ld	r24, Z
    48de:	8f 7d       	andi	r24, 0xDF	; 223
    48e0:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    48e2:	a6 e5       	ldi	r26, 0x56	; 86
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	e6 e5       	ldi	r30, 0x56	; 86
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	80 68       	ori	r24, 0x80	; 128
    48ee:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    48f0:	e6 e5       	ldi	r30, 0x56	; 86
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
    48f6:	88 23       	and	r24, r24
    48f8:	dc f7       	brge	.-10     	; 0x48f0 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    48fa:	e1 e2       	ldi	r30, 0x21	; 33
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	88 2f       	mov	r24, r24
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	88 7f       	andi	r24, 0xF8	; 248
    4906:	90 70       	andi	r25, 0x00	; 0
    4908:	88 31       	cpi	r24, 0x18	; 24
    490a:	91 05       	cpc	r25, r1
    490c:	11 f0       	breq	.+4      	; 0x4912 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    4912:	89 81       	ldd	r24, Y+1	; 0x01
}
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	cf 91       	pop	r28
    491a:	df 91       	pop	r29
    491c:	08 95       	ret

0000491e <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    491e:	df 93       	push	r29
    4920:	cf 93       	push	r28
    4922:	00 d0       	rcall	.+0      	; 0x4924 <TWI_SendSlaveAddressWithRead+0x6>
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
    4928:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    492a:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    492c:	e3 e2       	ldi	r30, 0x23	; 35
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	8a 81       	ldd	r24, Y+2	; 0x02
    4932:	88 0f       	add	r24, r24
    4934:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR, 0);
    4936:	a3 e2       	ldi	r26, 0x23	; 35
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	e3 e2       	ldi	r30, 0x23	; 35
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	81 60       	ori	r24, 0x01	; 1
    4942:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    4944:	a6 e5       	ldi	r26, 0x56	; 86
    4946:	b0 e0       	ldi	r27, 0x00	; 0
    4948:	e6 e5       	ldi	r30, 0x56	; 86
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	80 81       	ld	r24, Z
    494e:	8f 7d       	andi	r24, 0xDF	; 223
    4950:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4952:	a6 e5       	ldi	r26, 0x56	; 86
    4954:	b0 e0       	ldi	r27, 0x00	; 0
    4956:	e6 e5       	ldi	r30, 0x56	; 86
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	80 81       	ld	r24, Z
    495c:	80 68       	ori	r24, 0x80	; 128
    495e:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    4960:	e6 e5       	ldi	r30, 0x56	; 86
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	88 23       	and	r24, r24
    4968:	dc f7       	brge	.-10     	; 0x4960 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    496a:	e1 e2       	ldi	r30, 0x21	; 33
    496c:	f0 e0       	ldi	r31, 0x00	; 0
    496e:	80 81       	ld	r24, Z
    4970:	88 2f       	mov	r24, r24
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	88 7f       	andi	r24, 0xF8	; 248
    4976:	90 70       	andi	r25, 0x00	; 0
    4978:	80 34       	cpi	r24, 0x40	; 64
    497a:	91 05       	cpc	r25, r1
    497c:	11 f0       	breq	.+4      	; 0x4982 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
    497e:	84 e0       	ldi	r24, 0x04	; 4
    4980:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    4982:	89 81       	ldd	r24, Y+1	; 0x01
}
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	cf 91       	pop	r28
    498a:	df 91       	pop	r29
    498c:	08 95       	ret

0000498e <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    498e:	df 93       	push	r29
    4990:	cf 93       	push	r28
    4992:	00 d0       	rcall	.+0      	; 0x4994 <TWI_MasterWriteDataByte+0x6>
    4994:	cd b7       	in	r28, 0x3d	; 61
    4996:	de b7       	in	r29, 0x3e	; 62
    4998:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    499a:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    499c:	e3 e2       	ldi	r30, 0x23	; 35
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	8a 81       	ldd	r24, Y+2	; 0x02
    49a2:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    49a4:	a6 e5       	ldi	r26, 0x56	; 86
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	e6 e5       	ldi	r30, 0x56	; 86
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	80 68       	ori	r24, 0x80	; 128
    49b0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0 );
    49b2:	e6 e5       	ldi	r30, 0x56	; 86
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	88 23       	and	r24, r24
    49ba:	dc f7       	brge	.-10     	; 0x49b2 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    49bc:	e1 e2       	ldi	r30, 0x21	; 33
    49be:	f0 e0       	ldi	r31, 0x00	; 0
    49c0:	80 81       	ld	r24, Z
    49c2:	88 2f       	mov	r24, r24
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	88 7f       	andi	r24, 0xF8	; 248
    49c8:	90 70       	andi	r25, 0x00	; 0
    49ca:	88 32       	cpi	r24, 0x28	; 40
    49cc:	91 05       	cpc	r25, r1
    49ce:	11 f0       	breq	.+4      	; 0x49d4 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
    49d0:	85 e0       	ldi	r24, 0x05	; 5
    49d2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    49d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    49d6:	0f 90       	pop	r0
    49d8:	0f 90       	pop	r0
    49da:	cf 91       	pop	r28
    49dc:	df 91       	pop	r29
    49de:	08 95       	ret

000049e0 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    49e0:	df 93       	push	r29
    49e2:	cf 93       	push	r28
    49e4:	00 d0       	rcall	.+0      	; 0x49e6 <TWI_MasterReadDataByte+0x6>
    49e6:	0f 92       	push	r0
    49e8:	cd b7       	in	r28, 0x3d	; 61
    49ea:	de b7       	in	r29, 0x3e	; 62
    49ec:	9b 83       	std	Y+3, r25	; 0x03
    49ee:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    49f0:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    49f2:	a6 e5       	ldi	r26, 0x56	; 86
    49f4:	b0 e0       	ldi	r27, 0x00	; 0
    49f6:	e6 e5       	ldi	r30, 0x56	; 86
    49f8:	f0 e0       	ldi	r31, 0x00	; 0
    49fa:	80 81       	ld	r24, Z
    49fc:	80 68       	ori	r24, 0x80	; 128
    49fe:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    4a00:	e6 e5       	ldi	r30, 0x56	; 86
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 81       	ld	r24, Z
    4a06:	88 23       	and	r24, r24
    4a08:	dc f7       	brge	.-10     	; 0x4a00 <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    4a0a:	e1 e2       	ldi	r30, 0x21	; 33
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	88 2f       	mov	r24, r24
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	88 7f       	andi	r24, 0xF8	; 248
    4a16:	90 70       	andi	r25, 0x00	; 0
    4a18:	80 35       	cpi	r24, 0x50	; 80
    4a1a:	91 05       	cpc	r25, r1
    4a1c:	19 f0       	breq	.+6      	; 0x4a24 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
    4a1e:	86 e0       	ldi	r24, 0x06	; 6
    4a20:	89 83       	std	Y+1, r24	; 0x01
    4a22:	06 c0       	rjmp	.+12     	; 0x4a30 <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    4a24:	e3 e2       	ldi	r30, 0x23	; 35
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	80 81       	ld	r24, Z
    4a2a:	ea 81       	ldd	r30, Y+2	; 0x02
    4a2c:	fb 81       	ldd	r31, Y+3	; 0x03
    4a2e:	80 83       	st	Z, r24
	}

	return Local_Error;
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	cf 91       	pop	r28
    4a3a:	df 91       	pop	r29
    4a3c:	08 95       	ret

00004a3e <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
    4a3e:	df 93       	push	r29
    4a40:	cf 93       	push	r28
    4a42:	00 d0       	rcall	.+0      	; 0x4a44 <TWI_SlaveWriteDataByte+0x6>
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    4a4a:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    4a4c:	e3 e2       	ldi	r30, 0x23	; 35
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4a54:	a6 e5       	ldi	r26, 0x56	; 86
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	e6 e5       	ldi	r30, 0x56	; 86
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	80 81       	ld	r24, Z
    4a5e:	80 68       	ori	r24, 0x80	; 128
    4a60:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT))==0);
    4a62:	e6 e5       	ldi	r30, 0x56	; 86
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	88 23       	and	r24, r24
    4a6a:	dc f7       	brge	.-10     	; 0x4a62 <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    4a6c:	e1 e2       	ldi	r30, 0x21	; 33
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
    4a70:	80 81       	ld	r24, Z
    4a72:	88 2f       	mov	r24, r24
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	88 7f       	andi	r24, 0xF8	; 248
    4a78:	90 70       	andi	r25, 0x00	; 0
    4a7a:	88 3b       	cpi	r24, 0xB8	; 184
    4a7c:	91 05       	cpc	r25, r1
    4a7e:	11 f0       	breq	.+4      	; 0x4a84 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
    4a80:	87 e0       	ldi	r24, 0x07	; 7
    4a82:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    4a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	cf 91       	pop	r28
    4a8c:	df 91       	pop	r29
    4a8e:	08 95       	ret

00004a90 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    4a90:	df 93       	push	r29
    4a92:	cf 93       	push	r28
    4a94:	00 d0       	rcall	.+0      	; 0x4a96 <TWI_SlaveReadDataByte+0x6>
    4a96:	0f 92       	push	r0
    4a98:	cd b7       	in	r28, 0x3d	; 61
    4a9a:	de b7       	in	r29, 0x3e	; 62
    4a9c:	9b 83       	std	Y+3, r25	; 0x03
    4a9e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    4aa0:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    4aa2:	a6 e5       	ldi	r26, 0x56	; 86
    4aa4:	b0 e0       	ldi	r27, 0x00	; 0
    4aa6:	e6 e5       	ldi	r30, 0x56	; 86
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	80 81       	ld	r24, Z
    4aac:	80 68       	ori	r24, 0x80	; 128
    4aae:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised*/
	while((READ_BIT(TWCR,TWCR_TWINT)) == 0);
    4ab0:	e6 e5       	ldi	r30, 0x56	; 86
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	88 23       	and	r24, r24
    4ab8:	dc f7       	brge	.-10     	; 0x4ab0 <TWI_SlaveReadDataByte+0x20>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    4aba:	e1 e2       	ldi	r30, 0x21	; 33
    4abc:	f0 e0       	ldi	r31, 0x00	; 0
    4abe:	80 81       	ld	r24, Z
    4ac0:	88 2f       	mov	r24, r24
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	88 7f       	andi	r24, 0xF8	; 248
    4ac6:	90 70       	andi	r25, 0x00	; 0
    4ac8:	80 38       	cpi	r24, 0x80	; 128
    4aca:	91 05       	cpc	r25, r1
    4acc:	19 f0       	breq	.+6      	; 0x4ad4 <TWI_SlaveReadDataByte+0x44>
	{
		Local_Error = SlaveReadByteErr;
    4ace:	88 e0       	ldi	r24, 0x08	; 8
    4ad0:	89 83       	std	Y+1, r24	; 0x01
    4ad2:	06 c0       	rjmp	.+12     	; 0x4ae0 <TWI_SlaveReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    4ad4:	e3 e2       	ldi	r30, 0x23	; 35
    4ad6:	f0 e0       	ldi	r31, 0x00	; 0
    4ad8:	80 81       	ld	r24, Z
    4ada:	ea 81       	ldd	r30, Y+2	; 0x02
    4adc:	fb 81       	ldd	r31, Y+3	; 0x03
    4ade:	80 83       	st	Z, r24
	}

	return Local_Error;
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	cf 91       	pop	r28
    4aea:	df 91       	pop	r29
    4aec:	08 95       	ret

00004aee <TWI_vSendStopCondition>:


void TWI_vSendStopCondition(void)
{
    4aee:	df 93       	push	r29
    4af0:	cf 93       	push	r28
    4af2:	cd b7       	in	r28, 0x3d	; 61
    4af4:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    4af6:	a6 e5       	ldi	r26, 0x56	; 86
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	e6 e5       	ldi	r30, 0x56	; 86
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	80 81       	ld	r24, Z
    4b00:	80 61       	ori	r24, 0x10	; 16
    4b02:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4b04:	a6 e5       	ldi	r26, 0x56	; 86
    4b06:	b0 e0       	ldi	r27, 0x00	; 0
    4b08:	e6 e5       	ldi	r30, 0x56	; 86
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	80 68       	ori	r24, 0x80	; 128
    4b10:	8c 93       	st	X, r24

}
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <main>:
#include "MCAL/DIO_intervace.h"
#include "hal/CLCD_intreface.h"
#include "hal/MQ2_interface.h"
#include "hal/MQ2_config.h"

int main(void) {
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	ac 97       	sbiw	r28, 0x2c	; 44
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    /* تهيئة شاشة LCD */
    CLCD_voidInit();
    4b2c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidInit>
        .Copy_u8Channel = MQ2_CHANNEL_3,
        .Copy_u8VoltageRefrence = MQ2_VREF_AVCC,
        .Copy_u8ADCRes = MQ2_RES_10_BIT,
        .Copy_u16R0 = MQ2_DEFAULT_R0,
        .Copy_u16RL = MQ2_DEFAULT_RL
    };
    4b30:	ce 01       	movw	r24, r28
    4b32:	0f 96       	adiw	r24, 0x0f	; 15
    4b34:	99 a7       	std	Y+41, r25	; 0x29
    4b36:	88 a7       	std	Y+40, r24	; 0x28
    4b38:	ed e9       	ldi	r30, 0x9D	; 157
    4b3a:	f1 e0       	ldi	r31, 0x01	; 1
    4b3c:	fb a7       	std	Y+43, r31	; 0x2b
    4b3e:	ea a7       	std	Y+42, r30	; 0x2a
    4b40:	f7 e0       	ldi	r31, 0x07	; 7
    4b42:	fc a7       	std	Y+44, r31	; 0x2c
    4b44:	ea a5       	ldd	r30, Y+42	; 0x2a
    4b46:	fb a5       	ldd	r31, Y+43	; 0x2b
    4b48:	00 80       	ld	r0, Z
    4b4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b4c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b4e:	01 96       	adiw	r24, 0x01	; 1
    4b50:	9b a7       	std	Y+43, r25	; 0x2b
    4b52:	8a a7       	std	Y+42, r24	; 0x2a
    4b54:	e8 a5       	ldd	r30, Y+40	; 0x28
    4b56:	f9 a5       	ldd	r31, Y+41	; 0x29
    4b58:	00 82       	st	Z, r0
    4b5a:	88 a5       	ldd	r24, Y+40	; 0x28
    4b5c:	99 a5       	ldd	r25, Y+41	; 0x29
    4b5e:	01 96       	adiw	r24, 0x01	; 1
    4b60:	99 a7       	std	Y+41, r25	; 0x29
    4b62:	88 a7       	std	Y+40, r24	; 0x28
    4b64:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b66:	91 50       	subi	r25, 0x01	; 1
    4b68:	9c a7       	std	Y+44, r25	; 0x2c
    4b6a:	ec a5       	ldd	r30, Y+44	; 0x2c
    4b6c:	ee 23       	and	r30, r30
    4b6e:	51 f7       	brne	.-44     	; 0x4b44 <main+0x2c>

    MQ2_enumInit(&MQ2_Config);
    4b70:	ce 01       	movw	r24, r28
    4b72:	0f 96       	adiw	r24, 0x0f	; 15
    4b74:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <MQ2_enumInit>

    /* معايرة المستشعر (اختياري) */
    MQ2_enumCalibrate(&MQ2_Config);
    4b78:	ce 01       	movw	r24, r28
    4b7a:	0f 96       	adiw	r24, 0x0f	; 15
    4b7c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <MQ2_enumCalibrate>

    while (1) {
        u16 GasValue = 0;
    4b80:	1f 8a       	std	Y+23, r1	; 0x17
    4b82:	1e 8a       	std	Y+22, r1	; 0x16
        u8 Buffer[16];

        /* قراءة تركيز الغاز */
        MQ2_enumGetGasConcentration(&MQ2_Config, &GasValue);
    4b84:	ce 01       	movw	r24, r28
    4b86:	0f 96       	adiw	r24, 0x0f	; 15
    4b88:	9e 01       	movw	r18, r28
    4b8a:	2a 5e       	subi	r18, 0xEA	; 234
    4b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8e:	b9 01       	movw	r22, r18
    4b90:	0e 94 6f 16 	call	0x2cde	; 0x2cde <MQ2_enumGetGasConcentration>

        /* تحويل القيمة إلى نص */
        sprintf((char*)Buffer, "Gas: %4u ppm", GasValue);
    4b94:	2e 89       	ldd	r18, Y+22	; 0x16
    4b96:	3f 89       	ldd	r19, Y+23	; 0x17
    4b98:	00 d0       	rcall	.+0      	; 0x4b9a <main+0x82>
    4b9a:	00 d0       	rcall	.+0      	; 0x4b9c <main+0x84>
    4b9c:	00 d0       	rcall	.+0      	; 0x4b9e <main+0x86>
    4b9e:	ed b7       	in	r30, 0x3d	; 61
    4ba0:	fe b7       	in	r31, 0x3e	; 62
    4ba2:	31 96       	adiw	r30, 0x01	; 1
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	48 96       	adiw	r24, 0x18	; 24
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	80 e6       	ldi	r24, 0x60	; 96
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	93 83       	std	Z+3, r25	; 0x03
    4bb2:	82 83       	std	Z+2, r24	; 0x02
    4bb4:	35 83       	std	Z+5, r19	; 0x05
    4bb6:	24 83       	std	Z+4, r18	; 0x04
    4bb8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <sprintf>
    4bbc:	8d b7       	in	r24, 0x3d	; 61
    4bbe:	9e b7       	in	r25, 0x3e	; 62
    4bc0:	06 96       	adiw	r24, 0x06	; 6
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	9e bf       	out	0x3e, r25	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	8d bf       	out	0x3d, r24	; 61

        /* عرض النتائج على LCD */
        CLCD_voidClearScreen();
    4bcc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidClearScreen>
        CLCD_voidSetPosition(CLCD_Row_1, 1);
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	61 e0       	ldi	r22, 0x01	; 1
    4bd4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <CLCD_voidSetPosition>
        CLCD_voidsendString(Buffer);
    4bd8:	ce 01       	movw	r24, r28
    4bda:	48 96       	adiw	r24, 0x18	; 24
    4bdc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidsendString>
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	aa e7       	ldi	r26, 0x7A	; 122
    4be6:	b4 e4       	ldi	r27, 0x44	; 68
    4be8:	8b 87       	std	Y+11, r24	; 0x0b
    4bea:	9c 87       	std	Y+12, r25	; 0x0c
    4bec:	ad 87       	std	Y+13, r26	; 0x0d
    4bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	4a ef       	ldi	r20, 0xFA	; 250
    4bfe:	54 e4       	ldi	r21, 0x44	; 68
    4c00:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	8f 83       	std	Y+7, r24	; 0x07
    4c0a:	98 87       	std	Y+8, r25	; 0x08
    4c0c:	a9 87       	std	Y+9, r26	; 0x09
    4c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c10:	6f 81       	ldd	r22, Y+7	; 0x07
    4c12:	78 85       	ldd	r23, Y+8	; 0x08
    4c14:	89 85       	ldd	r24, Y+9	; 0x09
    4c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e8       	ldi	r20, 0x80	; 128
    4c1e:	5f e3       	ldi	r21, 0x3F	; 63
    4c20:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4c24:	88 23       	and	r24, r24
    4c26:	2c f4       	brge	.+10     	; 0x4c32 <main+0x11a>
		__ticks = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9e 83       	std	Y+6, r25	; 0x06
    4c2e:	8d 83       	std	Y+5, r24	; 0x05
    4c30:	3f c0       	rjmp	.+126    	; 0x4cb0 <main+0x198>
	else if (__tmp > 65535)
    4c32:	6f 81       	ldd	r22, Y+7	; 0x07
    4c34:	78 85       	ldd	r23, Y+8	; 0x08
    4c36:	89 85       	ldd	r24, Y+9	; 0x09
    4c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	3f ef       	ldi	r19, 0xFF	; 255
    4c3e:	4f e7       	ldi	r20, 0x7F	; 127
    4c40:	57 e4       	ldi	r21, 0x47	; 71
    4c42:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4c46:	18 16       	cp	r1, r24
    4c48:	4c f5       	brge	.+82     	; 0x4c9c <main+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e2       	ldi	r20, 0x20	; 32
    4c58:	51 e4       	ldi	r21, 0x41	; 65
    4c5a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	bc 01       	movw	r22, r24
    4c64:	cd 01       	movw	r24, r26
    4c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	9e 83       	std	Y+6, r25	; 0x06
    4c70:	8d 83       	std	Y+5, r24	; 0x05
    4c72:	0f c0       	rjmp	.+30     	; 0x4c92 <main+0x17a>
    4c74:	88 ec       	ldi	r24, 0xC8	; 200
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9c 83       	std	Y+4, r25	; 0x04
    4c7a:	8b 83       	std	Y+3, r24	; 0x03
    4c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <main+0x168>
    4c84:	9c 83       	std	Y+4, r25	; 0x04
    4c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c88:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c92:	8d 81       	ldd	r24, Y+5	; 0x05
    4c94:	9e 81       	ldd	r25, Y+6	; 0x06
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	69 f7       	brne	.-38     	; 0x4c74 <main+0x15c>
    4c9a:	72 cf       	rjmp	.-284    	; 0x4b80 <main+0x68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ca0:	89 85       	ldd	r24, Y+9	; 0x09
    4ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	9a 83       	std	Y+2, r25	; 0x02
    4cb6:	89 83       	std	Y+1, r24	; 0x01
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <main+0x1a4>
    4cc0:	9a 83       	std	Y+2, r25	; 0x02
    4cc2:	89 83       	std	Y+1, r24	; 0x01
    4cc4:	5d cf       	rjmp	.-326    	; 0x4b80 <main+0x68>

00004cc6 <__mulsi3>:
    4cc6:	62 9f       	mul	r22, r18
    4cc8:	d0 01       	movw	r26, r0
    4cca:	73 9f       	mul	r23, r19
    4ccc:	f0 01       	movw	r30, r0
    4cce:	82 9f       	mul	r24, r18
    4cd0:	e0 0d       	add	r30, r0
    4cd2:	f1 1d       	adc	r31, r1
    4cd4:	64 9f       	mul	r22, r20
    4cd6:	e0 0d       	add	r30, r0
    4cd8:	f1 1d       	adc	r31, r1
    4cda:	92 9f       	mul	r25, r18
    4cdc:	f0 0d       	add	r31, r0
    4cde:	83 9f       	mul	r24, r19
    4ce0:	f0 0d       	add	r31, r0
    4ce2:	74 9f       	mul	r23, r20
    4ce4:	f0 0d       	add	r31, r0
    4ce6:	65 9f       	mul	r22, r21
    4ce8:	f0 0d       	add	r31, r0
    4cea:	99 27       	eor	r25, r25
    4cec:	72 9f       	mul	r23, r18
    4cee:	b0 0d       	add	r27, r0
    4cf0:	e1 1d       	adc	r30, r1
    4cf2:	f9 1f       	adc	r31, r25
    4cf4:	63 9f       	mul	r22, r19
    4cf6:	b0 0d       	add	r27, r0
    4cf8:	e1 1d       	adc	r30, r1
    4cfa:	f9 1f       	adc	r31, r25
    4cfc:	bd 01       	movw	r22, r26
    4cfe:	cf 01       	movw	r24, r30
    4d00:	11 24       	eor	r1, r1
    4d02:	08 95       	ret

00004d04 <__udivmodhi4>:
    4d04:	aa 1b       	sub	r26, r26
    4d06:	bb 1b       	sub	r27, r27
    4d08:	51 e1       	ldi	r21, 0x11	; 17
    4d0a:	07 c0       	rjmp	.+14     	; 0x4d1a <__udivmodhi4_ep>

00004d0c <__udivmodhi4_loop>:
    4d0c:	aa 1f       	adc	r26, r26
    4d0e:	bb 1f       	adc	r27, r27
    4d10:	a6 17       	cp	r26, r22
    4d12:	b7 07       	cpc	r27, r23
    4d14:	10 f0       	brcs	.+4      	; 0x4d1a <__udivmodhi4_ep>
    4d16:	a6 1b       	sub	r26, r22
    4d18:	b7 0b       	sbc	r27, r23

00004d1a <__udivmodhi4_ep>:
    4d1a:	88 1f       	adc	r24, r24
    4d1c:	99 1f       	adc	r25, r25
    4d1e:	5a 95       	dec	r21
    4d20:	a9 f7       	brne	.-22     	; 0x4d0c <__udivmodhi4_loop>
    4d22:	80 95       	com	r24
    4d24:	90 95       	com	r25
    4d26:	bc 01       	movw	r22, r24
    4d28:	cd 01       	movw	r24, r26
    4d2a:	08 95       	ret

00004d2c <__udivmodsi4>:
    4d2c:	a1 e2       	ldi	r26, 0x21	; 33
    4d2e:	1a 2e       	mov	r1, r26
    4d30:	aa 1b       	sub	r26, r26
    4d32:	bb 1b       	sub	r27, r27
    4d34:	fd 01       	movw	r30, r26
    4d36:	0d c0       	rjmp	.+26     	; 0x4d52 <__udivmodsi4_ep>

00004d38 <__udivmodsi4_loop>:
    4d38:	aa 1f       	adc	r26, r26
    4d3a:	bb 1f       	adc	r27, r27
    4d3c:	ee 1f       	adc	r30, r30
    4d3e:	ff 1f       	adc	r31, r31
    4d40:	a2 17       	cp	r26, r18
    4d42:	b3 07       	cpc	r27, r19
    4d44:	e4 07       	cpc	r30, r20
    4d46:	f5 07       	cpc	r31, r21
    4d48:	20 f0       	brcs	.+8      	; 0x4d52 <__udivmodsi4_ep>
    4d4a:	a2 1b       	sub	r26, r18
    4d4c:	b3 0b       	sbc	r27, r19
    4d4e:	e4 0b       	sbc	r30, r20
    4d50:	f5 0b       	sbc	r31, r21

00004d52 <__udivmodsi4_ep>:
    4d52:	66 1f       	adc	r22, r22
    4d54:	77 1f       	adc	r23, r23
    4d56:	88 1f       	adc	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	1a 94       	dec	r1
    4d5c:	69 f7       	brne	.-38     	; 0x4d38 <__udivmodsi4_loop>
    4d5e:	60 95       	com	r22
    4d60:	70 95       	com	r23
    4d62:	80 95       	com	r24
    4d64:	90 95       	com	r25
    4d66:	9b 01       	movw	r18, r22
    4d68:	ac 01       	movw	r20, r24
    4d6a:	bd 01       	movw	r22, r26
    4d6c:	cf 01       	movw	r24, r30
    4d6e:	08 95       	ret

00004d70 <__divmodsi4>:
    4d70:	97 fb       	bst	r25, 7
    4d72:	09 2e       	mov	r0, r25
    4d74:	05 26       	eor	r0, r21
    4d76:	0e d0       	rcall	.+28     	; 0x4d94 <__divmodsi4_neg1>
    4d78:	57 fd       	sbrc	r21, 7
    4d7a:	04 d0       	rcall	.+8      	; 0x4d84 <__divmodsi4_neg2>
    4d7c:	d7 df       	rcall	.-82     	; 0x4d2c <__udivmodsi4>
    4d7e:	0a d0       	rcall	.+20     	; 0x4d94 <__divmodsi4_neg1>
    4d80:	00 1c       	adc	r0, r0
    4d82:	38 f4       	brcc	.+14     	; 0x4d92 <__divmodsi4_exit>

00004d84 <__divmodsi4_neg2>:
    4d84:	50 95       	com	r21
    4d86:	40 95       	com	r20
    4d88:	30 95       	com	r19
    4d8a:	21 95       	neg	r18
    4d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d90:	5f 4f       	sbci	r21, 0xFF	; 255

00004d92 <__divmodsi4_exit>:
    4d92:	08 95       	ret

00004d94 <__divmodsi4_neg1>:
    4d94:	f6 f7       	brtc	.-4      	; 0x4d92 <__divmodsi4_exit>
    4d96:	90 95       	com	r25
    4d98:	80 95       	com	r24
    4d9a:	70 95       	com	r23
    4d9c:	61 95       	neg	r22
    4d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4da0:	8f 4f       	sbci	r24, 0xFF	; 255
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	08 95       	ret

00004da6 <__prologue_saves__>:
    4da6:	2f 92       	push	r2
    4da8:	3f 92       	push	r3
    4daa:	4f 92       	push	r4
    4dac:	5f 92       	push	r5
    4dae:	6f 92       	push	r6
    4db0:	7f 92       	push	r7
    4db2:	8f 92       	push	r8
    4db4:	9f 92       	push	r9
    4db6:	af 92       	push	r10
    4db8:	bf 92       	push	r11
    4dba:	cf 92       	push	r12
    4dbc:	df 92       	push	r13
    4dbe:	ef 92       	push	r14
    4dc0:	ff 92       	push	r15
    4dc2:	0f 93       	push	r16
    4dc4:	1f 93       	push	r17
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	cd b7       	in	r28, 0x3d	; 61
    4dcc:	de b7       	in	r29, 0x3e	; 62
    4dce:	ca 1b       	sub	r28, r26
    4dd0:	db 0b       	sbc	r29, r27
    4dd2:	0f b6       	in	r0, 0x3f	; 63
    4dd4:	f8 94       	cli
    4dd6:	de bf       	out	0x3e, r29	; 62
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	cd bf       	out	0x3d, r28	; 61
    4ddc:	09 94       	ijmp

00004dde <__epilogue_restores__>:
    4dde:	2a 88       	ldd	r2, Y+18	; 0x12
    4de0:	39 88       	ldd	r3, Y+17	; 0x11
    4de2:	48 88       	ldd	r4, Y+16	; 0x10
    4de4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4de6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4de8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dea:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dec:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dee:	aa 84       	ldd	r10, Y+10	; 0x0a
    4df0:	b9 84       	ldd	r11, Y+9	; 0x09
    4df2:	c8 84       	ldd	r12, Y+8	; 0x08
    4df4:	df 80       	ldd	r13, Y+7	; 0x07
    4df6:	ee 80       	ldd	r14, Y+6	; 0x06
    4df8:	fd 80       	ldd	r15, Y+5	; 0x05
    4dfa:	0c 81       	ldd	r16, Y+4	; 0x04
    4dfc:	1b 81       	ldd	r17, Y+3	; 0x03
    4dfe:	aa 81       	ldd	r26, Y+2	; 0x02
    4e00:	b9 81       	ldd	r27, Y+1	; 0x01
    4e02:	ce 0f       	add	r28, r30
    4e04:	d1 1d       	adc	r29, r1
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	ed 01       	movw	r28, r26
    4e12:	08 95       	ret

00004e14 <sprintf>:
    4e14:	ae e0       	ldi	r26, 0x0E	; 14
    4e16:	b0 e0       	ldi	r27, 0x00	; 0
    4e18:	e0 e1       	ldi	r30, 0x10	; 16
    4e1a:	f7 e2       	ldi	r31, 0x27	; 39
    4e1c:	0c 94 e1 26 	jmp	0x4dc2	; 0x4dc2 <__prologue_saves__+0x1c>
    4e20:	0d 89       	ldd	r16, Y+21	; 0x15
    4e22:	1e 89       	ldd	r17, Y+22	; 0x16
    4e24:	86 e0       	ldi	r24, 0x06	; 6
    4e26:	8c 83       	std	Y+4, r24	; 0x04
    4e28:	1a 83       	std	Y+2, r17	; 0x02
    4e2a:	09 83       	std	Y+1, r16	; 0x01
    4e2c:	8f ef       	ldi	r24, 0xFF	; 255
    4e2e:	9f e7       	ldi	r25, 0x7F	; 127
    4e30:	9e 83       	std	Y+6, r25	; 0x06
    4e32:	8d 83       	std	Y+5, r24	; 0x05
    4e34:	9e 01       	movw	r18, r28
    4e36:	27 5e       	subi	r18, 0xE7	; 231
    4e38:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	6f 89       	ldd	r22, Y+23	; 0x17
    4e40:	78 8d       	ldd	r23, Y+24	; 0x18
    4e42:	a9 01       	movw	r20, r18
    4e44:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <vfprintf>
    4e48:	2f 81       	ldd	r18, Y+7	; 0x07
    4e4a:	38 85       	ldd	r19, Y+8	; 0x08
    4e4c:	02 0f       	add	r16, r18
    4e4e:	13 1f       	adc	r17, r19
    4e50:	f8 01       	movw	r30, r16
    4e52:	10 82       	st	Z, r1
    4e54:	2e 96       	adiw	r28, 0x0e	; 14
    4e56:	e4 e0       	ldi	r30, 0x04	; 4
    4e58:	0c 94 fd 26 	jmp	0x4dfa	; 0x4dfa <__epilogue_restores__+0x1c>

00004e5c <vfprintf>:
    4e5c:	ab e0       	ldi	r26, 0x0B	; 11
    4e5e:	b0 e0       	ldi	r27, 0x00	; 0
    4e60:	e4 e3       	ldi	r30, 0x34	; 52
    4e62:	f7 e2       	ldi	r31, 0x27	; 39
    4e64:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__prologue_saves__>
    4e68:	3c 01       	movw	r6, r24
    4e6a:	2b 01       	movw	r4, r22
    4e6c:	5a 01       	movw	r10, r20
    4e6e:	fc 01       	movw	r30, r24
    4e70:	17 82       	std	Z+7, r1	; 0x07
    4e72:	16 82       	std	Z+6, r1	; 0x06
    4e74:	83 81       	ldd	r24, Z+3	; 0x03
    4e76:	81 fd       	sbrc	r24, 1
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <vfprintf+0x24>
    4e7a:	6f ef       	ldi	r22, 0xFF	; 255
    4e7c:	7f ef       	ldi	r23, 0xFF	; 255
    4e7e:	c6 c1       	rjmp	.+908    	; 0x520c <vfprintf+0x3b0>
    4e80:	9a e0       	ldi	r25, 0x0A	; 10
    4e82:	89 2e       	mov	r8, r25
    4e84:	1e 01       	movw	r2, r28
    4e86:	08 94       	sec
    4e88:	21 1c       	adc	r2, r1
    4e8a:	31 1c       	adc	r3, r1
    4e8c:	f3 01       	movw	r30, r6
    4e8e:	23 81       	ldd	r18, Z+3	; 0x03
    4e90:	f2 01       	movw	r30, r4
    4e92:	23 fd       	sbrc	r18, 3
    4e94:	85 91       	lpm	r24, Z+
    4e96:	23 ff       	sbrs	r18, 3
    4e98:	81 91       	ld	r24, Z+
    4e9a:	2f 01       	movw	r4, r30
    4e9c:	88 23       	and	r24, r24
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <vfprintf+0x46>
    4ea0:	b2 c1       	rjmp	.+868    	; 0x5206 <vfprintf+0x3aa>
    4ea2:	85 32       	cpi	r24, 0x25	; 37
    4ea4:	39 f4       	brne	.+14     	; 0x4eb4 <vfprintf+0x58>
    4ea6:	23 fd       	sbrc	r18, 3
    4ea8:	85 91       	lpm	r24, Z+
    4eaa:	23 ff       	sbrs	r18, 3
    4eac:	81 91       	ld	r24, Z+
    4eae:	2f 01       	movw	r4, r30
    4eb0:	85 32       	cpi	r24, 0x25	; 37
    4eb2:	29 f4       	brne	.+10     	; 0x4ebe <vfprintf+0x62>
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	b3 01       	movw	r22, r6
    4eb8:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    4ebc:	e7 cf       	rjmp	.-50     	; 0x4e8c <vfprintf+0x30>
    4ebe:	98 2f       	mov	r25, r24
    4ec0:	ff 24       	eor	r15, r15
    4ec2:	ee 24       	eor	r14, r14
    4ec4:	99 24       	eor	r9, r9
    4ec6:	ff e1       	ldi	r31, 0x1F	; 31
    4ec8:	ff 15       	cp	r31, r15
    4eca:	d0 f0       	brcs	.+52     	; 0x4f00 <vfprintf+0xa4>
    4ecc:	9b 32       	cpi	r25, 0x2B	; 43
    4ece:	69 f0       	breq	.+26     	; 0x4eea <vfprintf+0x8e>
    4ed0:	9c 32       	cpi	r25, 0x2C	; 44
    4ed2:	28 f4       	brcc	.+10     	; 0x4ede <vfprintf+0x82>
    4ed4:	90 32       	cpi	r25, 0x20	; 32
    4ed6:	59 f0       	breq	.+22     	; 0x4eee <vfprintf+0x92>
    4ed8:	93 32       	cpi	r25, 0x23	; 35
    4eda:	91 f4       	brne	.+36     	; 0x4f00 <vfprintf+0xa4>
    4edc:	0e c0       	rjmp	.+28     	; 0x4efa <vfprintf+0x9e>
    4ede:	9d 32       	cpi	r25, 0x2D	; 45
    4ee0:	49 f0       	breq	.+18     	; 0x4ef4 <vfprintf+0x98>
    4ee2:	90 33       	cpi	r25, 0x30	; 48
    4ee4:	69 f4       	brne	.+26     	; 0x4f00 <vfprintf+0xa4>
    4ee6:	41 e0       	ldi	r20, 0x01	; 1
    4ee8:	24 c0       	rjmp	.+72     	; 0x4f32 <vfprintf+0xd6>
    4eea:	52 e0       	ldi	r21, 0x02	; 2
    4eec:	f5 2a       	or	r15, r21
    4eee:	84 e0       	ldi	r24, 0x04	; 4
    4ef0:	f8 2a       	or	r15, r24
    4ef2:	28 c0       	rjmp	.+80     	; 0x4f44 <vfprintf+0xe8>
    4ef4:	98 e0       	ldi	r25, 0x08	; 8
    4ef6:	f9 2a       	or	r15, r25
    4ef8:	25 c0       	rjmp	.+74     	; 0x4f44 <vfprintf+0xe8>
    4efa:	e0 e1       	ldi	r30, 0x10	; 16
    4efc:	fe 2a       	or	r15, r30
    4efe:	22 c0       	rjmp	.+68     	; 0x4f44 <vfprintf+0xe8>
    4f00:	f7 fc       	sbrc	r15, 7
    4f02:	29 c0       	rjmp	.+82     	; 0x4f56 <vfprintf+0xfa>
    4f04:	89 2f       	mov	r24, r25
    4f06:	80 53       	subi	r24, 0x30	; 48
    4f08:	8a 30       	cpi	r24, 0x0A	; 10
    4f0a:	70 f4       	brcc	.+28     	; 0x4f28 <vfprintf+0xcc>
    4f0c:	f6 fe       	sbrs	r15, 6
    4f0e:	05 c0       	rjmp	.+10     	; 0x4f1a <vfprintf+0xbe>
    4f10:	98 9c       	mul	r9, r8
    4f12:	90 2c       	mov	r9, r0
    4f14:	11 24       	eor	r1, r1
    4f16:	98 0e       	add	r9, r24
    4f18:	15 c0       	rjmp	.+42     	; 0x4f44 <vfprintf+0xe8>
    4f1a:	e8 9c       	mul	r14, r8
    4f1c:	e0 2c       	mov	r14, r0
    4f1e:	11 24       	eor	r1, r1
    4f20:	e8 0e       	add	r14, r24
    4f22:	f0 e2       	ldi	r31, 0x20	; 32
    4f24:	ff 2a       	or	r15, r31
    4f26:	0e c0       	rjmp	.+28     	; 0x4f44 <vfprintf+0xe8>
    4f28:	9e 32       	cpi	r25, 0x2E	; 46
    4f2a:	29 f4       	brne	.+10     	; 0x4f36 <vfprintf+0xda>
    4f2c:	f6 fc       	sbrc	r15, 6
    4f2e:	6b c1       	rjmp	.+726    	; 0x5206 <vfprintf+0x3aa>
    4f30:	40 e4       	ldi	r20, 0x40	; 64
    4f32:	f4 2a       	or	r15, r20
    4f34:	07 c0       	rjmp	.+14     	; 0x4f44 <vfprintf+0xe8>
    4f36:	9c 36       	cpi	r25, 0x6C	; 108
    4f38:	19 f4       	brne	.+6      	; 0x4f40 <vfprintf+0xe4>
    4f3a:	50 e8       	ldi	r21, 0x80	; 128
    4f3c:	f5 2a       	or	r15, r21
    4f3e:	02 c0       	rjmp	.+4      	; 0x4f44 <vfprintf+0xe8>
    4f40:	98 36       	cpi	r25, 0x68	; 104
    4f42:	49 f4       	brne	.+18     	; 0x4f56 <vfprintf+0xfa>
    4f44:	f2 01       	movw	r30, r4
    4f46:	23 fd       	sbrc	r18, 3
    4f48:	95 91       	lpm	r25, Z+
    4f4a:	23 ff       	sbrs	r18, 3
    4f4c:	91 91       	ld	r25, Z+
    4f4e:	2f 01       	movw	r4, r30
    4f50:	99 23       	and	r25, r25
    4f52:	09 f0       	breq	.+2      	; 0x4f56 <vfprintf+0xfa>
    4f54:	b8 cf       	rjmp	.-144    	; 0x4ec6 <vfprintf+0x6a>
    4f56:	89 2f       	mov	r24, r25
    4f58:	85 54       	subi	r24, 0x45	; 69
    4f5a:	83 30       	cpi	r24, 0x03	; 3
    4f5c:	18 f0       	brcs	.+6      	; 0x4f64 <vfprintf+0x108>
    4f5e:	80 52       	subi	r24, 0x20	; 32
    4f60:	83 30       	cpi	r24, 0x03	; 3
    4f62:	38 f4       	brcc	.+14     	; 0x4f72 <vfprintf+0x116>
    4f64:	44 e0       	ldi	r20, 0x04	; 4
    4f66:	50 e0       	ldi	r21, 0x00	; 0
    4f68:	a4 0e       	add	r10, r20
    4f6a:	b5 1e       	adc	r11, r21
    4f6c:	5f e3       	ldi	r21, 0x3F	; 63
    4f6e:	59 83       	std	Y+1, r21	; 0x01
    4f70:	0f c0       	rjmp	.+30     	; 0x4f90 <vfprintf+0x134>
    4f72:	93 36       	cpi	r25, 0x63	; 99
    4f74:	31 f0       	breq	.+12     	; 0x4f82 <vfprintf+0x126>
    4f76:	93 37       	cpi	r25, 0x73	; 115
    4f78:	79 f0       	breq	.+30     	; 0x4f98 <vfprintf+0x13c>
    4f7a:	93 35       	cpi	r25, 0x53	; 83
    4f7c:	09 f0       	breq	.+2      	; 0x4f80 <vfprintf+0x124>
    4f7e:	56 c0       	rjmp	.+172    	; 0x502c <vfprintf+0x1d0>
    4f80:	20 c0       	rjmp	.+64     	; 0x4fc2 <vfprintf+0x166>
    4f82:	f5 01       	movw	r30, r10
    4f84:	80 81       	ld	r24, Z
    4f86:	89 83       	std	Y+1, r24	; 0x01
    4f88:	42 e0       	ldi	r20, 0x02	; 2
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	a4 0e       	add	r10, r20
    4f8e:	b5 1e       	adc	r11, r21
    4f90:	61 01       	movw	r12, r2
    4f92:	01 e0       	ldi	r16, 0x01	; 1
    4f94:	10 e0       	ldi	r17, 0x00	; 0
    4f96:	12 c0       	rjmp	.+36     	; 0x4fbc <vfprintf+0x160>
    4f98:	f5 01       	movw	r30, r10
    4f9a:	c0 80       	ld	r12, Z
    4f9c:	d1 80       	ldd	r13, Z+1	; 0x01
    4f9e:	f6 fc       	sbrc	r15, 6
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <vfprintf+0x14c>
    4fa2:	6f ef       	ldi	r22, 0xFF	; 255
    4fa4:	7f ef       	ldi	r23, 0xFF	; 255
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <vfprintf+0x150>
    4fa8:	69 2d       	mov	r22, r9
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	42 e0       	ldi	r20, 0x02	; 2
    4fae:	50 e0       	ldi	r21, 0x00	; 0
    4fb0:	a4 0e       	add	r10, r20
    4fb2:	b5 1e       	adc	r11, r21
    4fb4:	c6 01       	movw	r24, r12
    4fb6:	0e 94 16 29 	call	0x522c	; 0x522c <strnlen>
    4fba:	8c 01       	movw	r16, r24
    4fbc:	5f e7       	ldi	r21, 0x7F	; 127
    4fbe:	f5 22       	and	r15, r21
    4fc0:	14 c0       	rjmp	.+40     	; 0x4fea <vfprintf+0x18e>
    4fc2:	f5 01       	movw	r30, r10
    4fc4:	c0 80       	ld	r12, Z
    4fc6:	d1 80       	ldd	r13, Z+1	; 0x01
    4fc8:	f6 fc       	sbrc	r15, 6
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <vfprintf+0x176>
    4fcc:	6f ef       	ldi	r22, 0xFF	; 255
    4fce:	7f ef       	ldi	r23, 0xFF	; 255
    4fd0:	02 c0       	rjmp	.+4      	; 0x4fd6 <vfprintf+0x17a>
    4fd2:	69 2d       	mov	r22, r9
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	42 e0       	ldi	r20, 0x02	; 2
    4fd8:	50 e0       	ldi	r21, 0x00	; 0
    4fda:	a4 0e       	add	r10, r20
    4fdc:	b5 1e       	adc	r11, r21
    4fde:	c6 01       	movw	r24, r12
    4fe0:	0e 94 0b 29 	call	0x5216	; 0x5216 <strnlen_P>
    4fe4:	8c 01       	movw	r16, r24
    4fe6:	50 e8       	ldi	r21, 0x80	; 128
    4fe8:	f5 2a       	or	r15, r21
    4fea:	f3 fe       	sbrs	r15, 3
    4fec:	07 c0       	rjmp	.+14     	; 0x4ffc <vfprintf+0x1a0>
    4fee:	1a c0       	rjmp	.+52     	; 0x5024 <vfprintf+0x1c8>
    4ff0:	80 e2       	ldi	r24, 0x20	; 32
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	b3 01       	movw	r22, r6
    4ff6:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    4ffa:	ea 94       	dec	r14
    4ffc:	8e 2d       	mov	r24, r14
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	08 17       	cp	r16, r24
    5002:	19 07       	cpc	r17, r25
    5004:	a8 f3       	brcs	.-22     	; 0x4ff0 <vfprintf+0x194>
    5006:	0e c0       	rjmp	.+28     	; 0x5024 <vfprintf+0x1c8>
    5008:	f6 01       	movw	r30, r12
    500a:	f7 fc       	sbrc	r15, 7
    500c:	85 91       	lpm	r24, Z+
    500e:	f7 fe       	sbrs	r15, 7
    5010:	81 91       	ld	r24, Z+
    5012:	6f 01       	movw	r12, r30
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	b3 01       	movw	r22, r6
    5018:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    501c:	e1 10       	cpse	r14, r1
    501e:	ea 94       	dec	r14
    5020:	01 50       	subi	r16, 0x01	; 1
    5022:	10 40       	sbci	r17, 0x00	; 0
    5024:	01 15       	cp	r16, r1
    5026:	11 05       	cpc	r17, r1
    5028:	79 f7       	brne	.-34     	; 0x5008 <vfprintf+0x1ac>
    502a:	ea c0       	rjmp	.+468    	; 0x5200 <vfprintf+0x3a4>
    502c:	94 36       	cpi	r25, 0x64	; 100
    502e:	11 f0       	breq	.+4      	; 0x5034 <vfprintf+0x1d8>
    5030:	99 36       	cpi	r25, 0x69	; 105
    5032:	69 f5       	brne	.+90     	; 0x508e <vfprintf+0x232>
    5034:	f7 fe       	sbrs	r15, 7
    5036:	08 c0       	rjmp	.+16     	; 0x5048 <vfprintf+0x1ec>
    5038:	f5 01       	movw	r30, r10
    503a:	20 81       	ld	r18, Z
    503c:	31 81       	ldd	r19, Z+1	; 0x01
    503e:	42 81       	ldd	r20, Z+2	; 0x02
    5040:	53 81       	ldd	r21, Z+3	; 0x03
    5042:	84 e0       	ldi	r24, 0x04	; 4
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0a c0       	rjmp	.+20     	; 0x505c <vfprintf+0x200>
    5048:	f5 01       	movw	r30, r10
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	9c 01       	movw	r18, r24
    5050:	44 27       	eor	r20, r20
    5052:	37 fd       	sbrc	r19, 7
    5054:	40 95       	com	r20
    5056:	54 2f       	mov	r21, r20
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	a8 0e       	add	r10, r24
    505e:	b9 1e       	adc	r11, r25
    5060:	9f e6       	ldi	r25, 0x6F	; 111
    5062:	f9 22       	and	r15, r25
    5064:	57 ff       	sbrs	r21, 7
    5066:	09 c0       	rjmp	.+18     	; 0x507a <vfprintf+0x21e>
    5068:	50 95       	com	r21
    506a:	40 95       	com	r20
    506c:	30 95       	com	r19
    506e:	21 95       	neg	r18
    5070:	3f 4f       	sbci	r19, 0xFF	; 255
    5072:	4f 4f       	sbci	r20, 0xFF	; 255
    5074:	5f 4f       	sbci	r21, 0xFF	; 255
    5076:	e0 e8       	ldi	r30, 0x80	; 128
    5078:	fe 2a       	or	r15, r30
    507a:	ca 01       	movw	r24, r20
    507c:	b9 01       	movw	r22, r18
    507e:	a1 01       	movw	r20, r2
    5080:	2a e0       	ldi	r18, 0x0A	; 10
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	0e 94 4d 29 	call	0x529a	; 0x529a <__ultoa_invert>
    5088:	d8 2e       	mov	r13, r24
    508a:	d2 18       	sub	r13, r2
    508c:	40 c0       	rjmp	.+128    	; 0x510e <vfprintf+0x2b2>
    508e:	95 37       	cpi	r25, 0x75	; 117
    5090:	29 f4       	brne	.+10     	; 0x509c <vfprintf+0x240>
    5092:	1f 2d       	mov	r17, r15
    5094:	1f 7e       	andi	r17, 0xEF	; 239
    5096:	2a e0       	ldi	r18, 0x0A	; 10
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	1d c0       	rjmp	.+58     	; 0x50d6 <vfprintf+0x27a>
    509c:	1f 2d       	mov	r17, r15
    509e:	19 7f       	andi	r17, 0xF9	; 249
    50a0:	9f 36       	cpi	r25, 0x6F	; 111
    50a2:	61 f0       	breq	.+24     	; 0x50bc <vfprintf+0x260>
    50a4:	90 37       	cpi	r25, 0x70	; 112
    50a6:	20 f4       	brcc	.+8      	; 0x50b0 <vfprintf+0x254>
    50a8:	98 35       	cpi	r25, 0x58	; 88
    50aa:	09 f0       	breq	.+2      	; 0x50ae <vfprintf+0x252>
    50ac:	ac c0       	rjmp	.+344    	; 0x5206 <vfprintf+0x3aa>
    50ae:	0f c0       	rjmp	.+30     	; 0x50ce <vfprintf+0x272>
    50b0:	90 37       	cpi	r25, 0x70	; 112
    50b2:	39 f0       	breq	.+14     	; 0x50c2 <vfprintf+0x266>
    50b4:	98 37       	cpi	r25, 0x78	; 120
    50b6:	09 f0       	breq	.+2      	; 0x50ba <vfprintf+0x25e>
    50b8:	a6 c0       	rjmp	.+332    	; 0x5206 <vfprintf+0x3aa>
    50ba:	04 c0       	rjmp	.+8      	; 0x50c4 <vfprintf+0x268>
    50bc:	28 e0       	ldi	r18, 0x08	; 8
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	0a c0       	rjmp	.+20     	; 0x50d6 <vfprintf+0x27a>
    50c2:	10 61       	ori	r17, 0x10	; 16
    50c4:	14 fd       	sbrc	r17, 4
    50c6:	14 60       	ori	r17, 0x04	; 4
    50c8:	20 e1       	ldi	r18, 0x10	; 16
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	04 c0       	rjmp	.+8      	; 0x50d6 <vfprintf+0x27a>
    50ce:	14 fd       	sbrc	r17, 4
    50d0:	16 60       	ori	r17, 0x06	; 6
    50d2:	20 e1       	ldi	r18, 0x10	; 16
    50d4:	32 e0       	ldi	r19, 0x02	; 2
    50d6:	17 ff       	sbrs	r17, 7
    50d8:	08 c0       	rjmp	.+16     	; 0x50ea <vfprintf+0x28e>
    50da:	f5 01       	movw	r30, r10
    50dc:	60 81       	ld	r22, Z
    50de:	71 81       	ldd	r23, Z+1	; 0x01
    50e0:	82 81       	ldd	r24, Z+2	; 0x02
    50e2:	93 81       	ldd	r25, Z+3	; 0x03
    50e4:	44 e0       	ldi	r20, 0x04	; 4
    50e6:	50 e0       	ldi	r21, 0x00	; 0
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <vfprintf+0x29e>
    50ea:	f5 01       	movw	r30, r10
    50ec:	80 81       	ld	r24, Z
    50ee:	91 81       	ldd	r25, Z+1	; 0x01
    50f0:	bc 01       	movw	r22, r24
    50f2:	80 e0       	ldi	r24, 0x00	; 0
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	42 e0       	ldi	r20, 0x02	; 2
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	a4 0e       	add	r10, r20
    50fc:	b5 1e       	adc	r11, r21
    50fe:	a1 01       	movw	r20, r2
    5100:	0e 94 4d 29 	call	0x529a	; 0x529a <__ultoa_invert>
    5104:	d8 2e       	mov	r13, r24
    5106:	d2 18       	sub	r13, r2
    5108:	8f e7       	ldi	r24, 0x7F	; 127
    510a:	f8 2e       	mov	r15, r24
    510c:	f1 22       	and	r15, r17
    510e:	f6 fe       	sbrs	r15, 6
    5110:	0b c0       	rjmp	.+22     	; 0x5128 <vfprintf+0x2cc>
    5112:	5e ef       	ldi	r21, 0xFE	; 254
    5114:	f5 22       	and	r15, r21
    5116:	d9 14       	cp	r13, r9
    5118:	38 f4       	brcc	.+14     	; 0x5128 <vfprintf+0x2cc>
    511a:	f4 fe       	sbrs	r15, 4
    511c:	07 c0       	rjmp	.+14     	; 0x512c <vfprintf+0x2d0>
    511e:	f2 fc       	sbrc	r15, 2
    5120:	05 c0       	rjmp	.+10     	; 0x512c <vfprintf+0x2d0>
    5122:	8f ee       	ldi	r24, 0xEF	; 239
    5124:	f8 22       	and	r15, r24
    5126:	02 c0       	rjmp	.+4      	; 0x512c <vfprintf+0x2d0>
    5128:	1d 2d       	mov	r17, r13
    512a:	01 c0       	rjmp	.+2      	; 0x512e <vfprintf+0x2d2>
    512c:	19 2d       	mov	r17, r9
    512e:	f4 fe       	sbrs	r15, 4
    5130:	0d c0       	rjmp	.+26     	; 0x514c <vfprintf+0x2f0>
    5132:	fe 01       	movw	r30, r28
    5134:	ed 0d       	add	r30, r13
    5136:	f1 1d       	adc	r31, r1
    5138:	80 81       	ld	r24, Z
    513a:	80 33       	cpi	r24, 0x30	; 48
    513c:	19 f4       	brne	.+6      	; 0x5144 <vfprintf+0x2e8>
    513e:	99 ee       	ldi	r25, 0xE9	; 233
    5140:	f9 22       	and	r15, r25
    5142:	08 c0       	rjmp	.+16     	; 0x5154 <vfprintf+0x2f8>
    5144:	1f 5f       	subi	r17, 0xFF	; 255
    5146:	f2 fe       	sbrs	r15, 2
    5148:	05 c0       	rjmp	.+10     	; 0x5154 <vfprintf+0x2f8>
    514a:	03 c0       	rjmp	.+6      	; 0x5152 <vfprintf+0x2f6>
    514c:	8f 2d       	mov	r24, r15
    514e:	86 78       	andi	r24, 0x86	; 134
    5150:	09 f0       	breq	.+2      	; 0x5154 <vfprintf+0x2f8>
    5152:	1f 5f       	subi	r17, 0xFF	; 255
    5154:	0f 2d       	mov	r16, r15
    5156:	f3 fc       	sbrc	r15, 3
    5158:	14 c0       	rjmp	.+40     	; 0x5182 <vfprintf+0x326>
    515a:	f0 fe       	sbrs	r15, 0
    515c:	0f c0       	rjmp	.+30     	; 0x517c <vfprintf+0x320>
    515e:	1e 15       	cp	r17, r14
    5160:	10 f0       	brcs	.+4      	; 0x5166 <vfprintf+0x30a>
    5162:	9d 2c       	mov	r9, r13
    5164:	0b c0       	rjmp	.+22     	; 0x517c <vfprintf+0x320>
    5166:	9d 2c       	mov	r9, r13
    5168:	9e 0c       	add	r9, r14
    516a:	91 1a       	sub	r9, r17
    516c:	1e 2d       	mov	r17, r14
    516e:	06 c0       	rjmp	.+12     	; 0x517c <vfprintf+0x320>
    5170:	80 e2       	ldi	r24, 0x20	; 32
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	b3 01       	movw	r22, r6
    5176:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    517a:	1f 5f       	subi	r17, 0xFF	; 255
    517c:	1e 15       	cp	r17, r14
    517e:	c0 f3       	brcs	.-16     	; 0x5170 <vfprintf+0x314>
    5180:	04 c0       	rjmp	.+8      	; 0x518a <vfprintf+0x32e>
    5182:	1e 15       	cp	r17, r14
    5184:	10 f4       	brcc	.+4      	; 0x518a <vfprintf+0x32e>
    5186:	e1 1a       	sub	r14, r17
    5188:	01 c0       	rjmp	.+2      	; 0x518c <vfprintf+0x330>
    518a:	ee 24       	eor	r14, r14
    518c:	04 ff       	sbrs	r16, 4
    518e:	0f c0       	rjmp	.+30     	; 0x51ae <vfprintf+0x352>
    5190:	80 e3       	ldi	r24, 0x30	; 48
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	b3 01       	movw	r22, r6
    5196:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    519a:	02 ff       	sbrs	r16, 2
    519c:	1d c0       	rjmp	.+58     	; 0x51d8 <vfprintf+0x37c>
    519e:	01 fd       	sbrc	r16, 1
    51a0:	03 c0       	rjmp	.+6      	; 0x51a8 <vfprintf+0x34c>
    51a2:	88 e7       	ldi	r24, 0x78	; 120
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	0e c0       	rjmp	.+28     	; 0x51c4 <vfprintf+0x368>
    51a8:	88 e5       	ldi	r24, 0x58	; 88
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	0b c0       	rjmp	.+22     	; 0x51c4 <vfprintf+0x368>
    51ae:	80 2f       	mov	r24, r16
    51b0:	86 78       	andi	r24, 0x86	; 134
    51b2:	91 f0       	breq	.+36     	; 0x51d8 <vfprintf+0x37c>
    51b4:	01 ff       	sbrs	r16, 1
    51b6:	02 c0       	rjmp	.+4      	; 0x51bc <vfprintf+0x360>
    51b8:	8b e2       	ldi	r24, 0x2B	; 43
    51ba:	01 c0       	rjmp	.+2      	; 0x51be <vfprintf+0x362>
    51bc:	80 e2       	ldi	r24, 0x20	; 32
    51be:	f7 fc       	sbrc	r15, 7
    51c0:	8d e2       	ldi	r24, 0x2D	; 45
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	b3 01       	movw	r22, r6
    51c6:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    51ca:	06 c0       	rjmp	.+12     	; 0x51d8 <vfprintf+0x37c>
    51cc:	80 e3       	ldi	r24, 0x30	; 48
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	b3 01       	movw	r22, r6
    51d2:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    51d6:	9a 94       	dec	r9
    51d8:	d9 14       	cp	r13, r9
    51da:	c0 f3       	brcs	.-16     	; 0x51cc <vfprintf+0x370>
    51dc:	da 94       	dec	r13
    51de:	f1 01       	movw	r30, r2
    51e0:	ed 0d       	add	r30, r13
    51e2:	f1 1d       	adc	r31, r1
    51e4:	80 81       	ld	r24, Z
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	b3 01       	movw	r22, r6
    51ea:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    51ee:	dd 20       	and	r13, r13
    51f0:	a9 f7       	brne	.-22     	; 0x51dc <vfprintf+0x380>
    51f2:	06 c0       	rjmp	.+12     	; 0x5200 <vfprintf+0x3a4>
    51f4:	80 e2       	ldi	r24, 0x20	; 32
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	b3 01       	movw	r22, r6
    51fa:	0e 94 21 29 	call	0x5242	; 0x5242 <fputc>
    51fe:	ea 94       	dec	r14
    5200:	ee 20       	and	r14, r14
    5202:	c1 f7       	brne	.-16     	; 0x51f4 <vfprintf+0x398>
    5204:	43 ce       	rjmp	.-890    	; 0x4e8c <vfprintf+0x30>
    5206:	f3 01       	movw	r30, r6
    5208:	66 81       	ldd	r22, Z+6	; 0x06
    520a:	77 81       	ldd	r23, Z+7	; 0x07
    520c:	cb 01       	movw	r24, r22
    520e:	2b 96       	adiw	r28, 0x0b	; 11
    5210:	e2 e1       	ldi	r30, 0x12	; 18
    5212:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__epilogue_restores__>

00005216 <strnlen_P>:
    5216:	fc 01       	movw	r30, r24
    5218:	05 90       	lpm	r0, Z+
    521a:	61 50       	subi	r22, 0x01	; 1
    521c:	70 40       	sbci	r23, 0x00	; 0
    521e:	01 10       	cpse	r0, r1
    5220:	d8 f7       	brcc	.-10     	; 0x5218 <strnlen_P+0x2>
    5222:	80 95       	com	r24
    5224:	90 95       	com	r25
    5226:	8e 0f       	add	r24, r30
    5228:	9f 1f       	adc	r25, r31
    522a:	08 95       	ret

0000522c <strnlen>:
    522c:	fc 01       	movw	r30, r24
    522e:	61 50       	subi	r22, 0x01	; 1
    5230:	70 40       	sbci	r23, 0x00	; 0
    5232:	01 90       	ld	r0, Z+
    5234:	01 10       	cpse	r0, r1
    5236:	d8 f7       	brcc	.-10     	; 0x522e <strnlen+0x2>
    5238:	80 95       	com	r24
    523a:	90 95       	com	r25
    523c:	8e 0f       	add	r24, r30
    523e:	9f 1f       	adc	r25, r31
    5240:	08 95       	ret

00005242 <fputc>:
    5242:	0f 93       	push	r16
    5244:	1f 93       	push	r17
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	8c 01       	movw	r16, r24
    524c:	eb 01       	movw	r28, r22
    524e:	8b 81       	ldd	r24, Y+3	; 0x03
    5250:	81 ff       	sbrs	r24, 1
    5252:	1b c0       	rjmp	.+54     	; 0x528a <fputc+0x48>
    5254:	82 ff       	sbrs	r24, 2
    5256:	0d c0       	rjmp	.+26     	; 0x5272 <fputc+0x30>
    5258:	2e 81       	ldd	r18, Y+6	; 0x06
    525a:	3f 81       	ldd	r19, Y+7	; 0x07
    525c:	8c 81       	ldd	r24, Y+4	; 0x04
    525e:	9d 81       	ldd	r25, Y+5	; 0x05
    5260:	28 17       	cp	r18, r24
    5262:	39 07       	cpc	r19, r25
    5264:	64 f4       	brge	.+24     	; 0x527e <fputc+0x3c>
    5266:	e8 81       	ld	r30, Y
    5268:	f9 81       	ldd	r31, Y+1	; 0x01
    526a:	01 93       	st	Z+, r16
    526c:	f9 83       	std	Y+1, r31	; 0x01
    526e:	e8 83       	st	Y, r30
    5270:	06 c0       	rjmp	.+12     	; 0x527e <fputc+0x3c>
    5272:	e8 85       	ldd	r30, Y+8	; 0x08
    5274:	f9 85       	ldd	r31, Y+9	; 0x09
    5276:	80 2f       	mov	r24, r16
    5278:	09 95       	icall
    527a:	89 2b       	or	r24, r25
    527c:	31 f4       	brne	.+12     	; 0x528a <fputc+0x48>
    527e:	8e 81       	ldd	r24, Y+6	; 0x06
    5280:	9f 81       	ldd	r25, Y+7	; 0x07
    5282:	01 96       	adiw	r24, 0x01	; 1
    5284:	9f 83       	std	Y+7, r25	; 0x07
    5286:	8e 83       	std	Y+6, r24	; 0x06
    5288:	02 c0       	rjmp	.+4      	; 0x528e <fputc+0x4c>
    528a:	0f ef       	ldi	r16, 0xFF	; 255
    528c:	1f ef       	ldi	r17, 0xFF	; 255
    528e:	c8 01       	movw	r24, r16
    5290:	df 91       	pop	r29
    5292:	cf 91       	pop	r28
    5294:	1f 91       	pop	r17
    5296:	0f 91       	pop	r16
    5298:	08 95       	ret

0000529a <__ultoa_invert>:
    529a:	fa 01       	movw	r30, r20
    529c:	aa 27       	eor	r26, r26
    529e:	28 30       	cpi	r18, 0x08	; 8
    52a0:	51 f1       	breq	.+84     	; 0x52f6 <__ultoa_invert+0x5c>
    52a2:	20 31       	cpi	r18, 0x10	; 16
    52a4:	81 f1       	breq	.+96     	; 0x5306 <__ultoa_invert+0x6c>
    52a6:	e8 94       	clt
    52a8:	6f 93       	push	r22
    52aa:	6e 7f       	andi	r22, 0xFE	; 254
    52ac:	6e 5f       	subi	r22, 0xFE	; 254
    52ae:	7f 4f       	sbci	r23, 0xFF	; 255
    52b0:	8f 4f       	sbci	r24, 0xFF	; 255
    52b2:	9f 4f       	sbci	r25, 0xFF	; 255
    52b4:	af 4f       	sbci	r26, 0xFF	; 255
    52b6:	b1 e0       	ldi	r27, 0x01	; 1
    52b8:	3e d0       	rcall	.+124    	; 0x5336 <__ultoa_invert+0x9c>
    52ba:	b4 e0       	ldi	r27, 0x04	; 4
    52bc:	3c d0       	rcall	.+120    	; 0x5336 <__ultoa_invert+0x9c>
    52be:	67 0f       	add	r22, r23
    52c0:	78 1f       	adc	r23, r24
    52c2:	89 1f       	adc	r24, r25
    52c4:	9a 1f       	adc	r25, r26
    52c6:	a1 1d       	adc	r26, r1
    52c8:	68 0f       	add	r22, r24
    52ca:	79 1f       	adc	r23, r25
    52cc:	8a 1f       	adc	r24, r26
    52ce:	91 1d       	adc	r25, r1
    52d0:	a1 1d       	adc	r26, r1
    52d2:	6a 0f       	add	r22, r26
    52d4:	71 1d       	adc	r23, r1
    52d6:	81 1d       	adc	r24, r1
    52d8:	91 1d       	adc	r25, r1
    52da:	a1 1d       	adc	r26, r1
    52dc:	20 d0       	rcall	.+64     	; 0x531e <__ultoa_invert+0x84>
    52de:	09 f4       	brne	.+2      	; 0x52e2 <__ultoa_invert+0x48>
    52e0:	68 94       	set
    52e2:	3f 91       	pop	r19
    52e4:	2a e0       	ldi	r18, 0x0A	; 10
    52e6:	26 9f       	mul	r18, r22
    52e8:	11 24       	eor	r1, r1
    52ea:	30 19       	sub	r19, r0
    52ec:	30 5d       	subi	r19, 0xD0	; 208
    52ee:	31 93       	st	Z+, r19
    52f0:	de f6       	brtc	.-74     	; 0x52a8 <__ultoa_invert+0xe>
    52f2:	cf 01       	movw	r24, r30
    52f4:	08 95       	ret
    52f6:	46 2f       	mov	r20, r22
    52f8:	47 70       	andi	r20, 0x07	; 7
    52fa:	40 5d       	subi	r20, 0xD0	; 208
    52fc:	41 93       	st	Z+, r20
    52fe:	b3 e0       	ldi	r27, 0x03	; 3
    5300:	0f d0       	rcall	.+30     	; 0x5320 <__ultoa_invert+0x86>
    5302:	c9 f7       	brne	.-14     	; 0x52f6 <__ultoa_invert+0x5c>
    5304:	f6 cf       	rjmp	.-20     	; 0x52f2 <__ultoa_invert+0x58>
    5306:	46 2f       	mov	r20, r22
    5308:	4f 70       	andi	r20, 0x0F	; 15
    530a:	40 5d       	subi	r20, 0xD0	; 208
    530c:	4a 33       	cpi	r20, 0x3A	; 58
    530e:	18 f0       	brcs	.+6      	; 0x5316 <__ultoa_invert+0x7c>
    5310:	49 5d       	subi	r20, 0xD9	; 217
    5312:	31 fd       	sbrc	r19, 1
    5314:	40 52       	subi	r20, 0x20	; 32
    5316:	41 93       	st	Z+, r20
    5318:	02 d0       	rcall	.+4      	; 0x531e <__ultoa_invert+0x84>
    531a:	a9 f7       	brne	.-22     	; 0x5306 <__ultoa_invert+0x6c>
    531c:	ea cf       	rjmp	.-44     	; 0x52f2 <__ultoa_invert+0x58>
    531e:	b4 e0       	ldi	r27, 0x04	; 4
    5320:	a6 95       	lsr	r26
    5322:	97 95       	ror	r25
    5324:	87 95       	ror	r24
    5326:	77 95       	ror	r23
    5328:	67 95       	ror	r22
    532a:	ba 95       	dec	r27
    532c:	c9 f7       	brne	.-14     	; 0x5320 <__ultoa_invert+0x86>
    532e:	00 97       	sbiw	r24, 0x00	; 0
    5330:	61 05       	cpc	r22, r1
    5332:	71 05       	cpc	r23, r1
    5334:	08 95       	ret
    5336:	9b 01       	movw	r18, r22
    5338:	ac 01       	movw	r20, r24
    533a:	0a 2e       	mov	r0, r26
    533c:	06 94       	lsr	r0
    533e:	57 95       	ror	r21
    5340:	47 95       	ror	r20
    5342:	37 95       	ror	r19
    5344:	27 95       	ror	r18
    5346:	ba 95       	dec	r27
    5348:	c9 f7       	brne	.-14     	; 0x533c <__ultoa_invert+0xa2>
    534a:	62 0f       	add	r22, r18
    534c:	73 1f       	adc	r23, r19
    534e:	84 1f       	adc	r24, r20
    5350:	95 1f       	adc	r25, r21
    5352:	a0 1d       	adc	r26, r0
    5354:	08 95       	ret

00005356 <_exit>:
    5356:	f8 94       	cli

00005358 <__stop_program>:
    5358:	ff cf       	rjmp	.-2      	; 0x5358 <__stop_program>
